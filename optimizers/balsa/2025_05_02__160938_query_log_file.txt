/*+ HashJoin(mc cn t ci rt chn ct)  HashJoin(mc cn t ci rt chn)  HashJoin(mc cn t ci rt)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(ct)  Leading(((((((mc cn) t) ci) rt) chn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS uncredited_voiced_character,        MIN(t.title) AS russian_movie FROM char_name AS chn,      cast_info AS ci,      company_name AS cn,      company_type AS ct,      movie_companies AS mc,      role_type AS rt,      title AS t WHERE ci.note LIKE '%(voice)%'   AND ci.note LIKE '%(uncredited)%'   AND cn.country_code = '[ru]'   AND rt.role = 'actor'   AND t.production_year > 2005   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mc.movie_id   AND chn.id = ci.person_role_id   AND rt.id = ci.role_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id;  ;10371.426;11.721;None;True
/*+ HashJoin(mc cn t ci rt chn ct)  HashJoin(mc cn t ci rt chn)  HashJoin(mc cn t ci rt)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(ct)  Leading(((((((mc cn) t) ci) rt) chn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS character,        MIN(t.title) AS russian_mov_with_actor_producer FROM char_name AS chn,      cast_info AS ci,      company_name AS cn,      company_type AS ct,      movie_companies AS mc,      role_type AS rt,      title AS t WHERE ci.note LIKE '%(producer)%'   AND cn.country_code = '[ru]'   AND rt.role = 'actor'   AND t.production_year > 2010   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mc.movie_id   AND chn.id = ci.person_role_id   AND rt.id = ci.role_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id;  ;20735.215;26.808;None;True
/*+ HashJoin(t mc cn ct ci chn rt)  HashJoin(t mc cn ct ci chn)  HashJoin(t mc cn ct ci)  HashJoin(t mc cn ct)  HashJoin(t mc cn)  HashJoin(t mc)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(ci)  IndexScan(chn)  IndexScan(rt)  Leading(((((((t mc) cn) ct) ci) chn) rt)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS character,        MIN(t.title) AS movie_with_american_producer FROM char_name AS chn,      cast_info AS ci,      company_name AS cn,      company_type AS ct,      movie_companies AS mc,      role_type AS rt,      title AS t WHERE ci.note LIKE '%(producer)%'   AND cn.country_code = '[us]'   AND t.production_year > 1990   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mc.movie_id   AND chn.id = ci.person_role_id   AND rt.id = ci.role_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;36297.064;19.148;None;True
/*+ HashJoin(lt ml mk k t mc cn ct)  HashJoin(lt ml mk k t mc cn)  HashJoin(lt ml mk k t mc)  HashJoin(lt ml mk k t)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  Leading((((((((lt ml) mk) k) t) mc) cn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(lt.link) AS movie_link_type,        MIN(t.title) AS non_polish_sequel_movie FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;14643.341;13.339;None;True
/*+ HashJoin(it3 pi ci mk k t mc chn rt an mi cc cct1 it n cct2 cn)  HashJoin(it3 pi ci mk k t mc chn rt an mi cc cct1 it n cct2)  HashJoin(it3 pi ci mk k t mc chn rt an mi cc cct1 it n)  HashJoin(it3 pi ci mk k t mc chn rt an mi cc cct1 it)  HashJoin(it3 pi ci mk k t mc chn rt an mi cc cct1)  HashJoin(it3 pi ci mk k t mc chn rt an mi cc)  HashJoin(it3 pi ci mk k t mc chn rt an mi)  HashJoin(it3 pi ci mk k t mc chn rt an)  HashJoin(it3 pi ci mk k t mc chn rt)  HashJoin(it3 pi ci mk k t mc chn)  HashJoin(it3 pi ci mk k t mc)  HashJoin(it3 pi ci mk k t)  HashJoin(it3 pi ci mk k)  HashJoin(it3 pi ci mk)  HashJoin(it3 pi ci)  HashJoin(it3 pi)  IndexScan(it3)  IndexScan(pi)  IndexScan(ci)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(mc)  IndexScan(chn)  IndexScan(rt)  IndexScan(an)  IndexScan(mi)  IndexScan(cc)  IndexScan(cct1)  IndexScan(it)  IndexScan(n)  IndexScan(cct2)  IndexScan(cn)  Leading(((((((((((((((((it3 pi) ci) mk) k) t) mc) chn) rt) an) mi) cc) cct1) it) n) cct2) cn)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS voiced_char,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS voiced_animation FROM aka_name AS an,      complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      info_type AS it3,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      name AS n,      person_info AS pi,      role_type AS rt,      title AS t WHERE cct1.kind ='cast'   AND cct2.kind ='complete+verified'   AND chn.name = 'Queen'   AND ci.note IN ('(voice)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND it3.info = 'trivia'   AND k.keyword = 'computer-animation'   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%200%'        OR mi.info LIKE 'USA:%200%')   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND t.title = 'Shrek 2'   AND t.production_year BETWEEN 2000 AND 2010   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = cc.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mk.movie_id   AND mc.movie_id = cc.movie_id   AND mi.movie_id = ci.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = cc.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id   AND n.id = pi.person_id   AND ci.person_id = pi.person_id   AND it3.id = pi.info_type_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;19165.007;3444.352;None;True
/*+ HashJoin(it3 pi ci rt mk k t an n cc cct2 cct1 chn mi it mc cn)  HashJoin(it3 pi ci rt mk k t an n cc cct2 cct1 chn mi it mc)  HashJoin(it3 pi ci rt mk k t an n cc cct2 cct1 chn mi it)  HashJoin(it3 pi ci rt mk k t an n cc cct2 cct1 chn mi)  HashJoin(it3 pi ci rt mk k t an n cc cct2 cct1 chn)  HashJoin(it3 pi ci rt mk k t an n cc cct2 cct1)  HashJoin(it3 pi ci rt mk k t an n cc cct2)  HashJoin(it3 pi ci rt mk k t an n cc)  HashJoin(it3 pi ci rt mk k t an n)  HashJoin(it3 pi ci rt mk k t an)  HashJoin(it3 pi ci rt mk k t)  HashJoin(it3 pi ci rt mk k)  HashJoin(it3 pi ci rt mk)  HashJoin(it3 pi ci rt)  HashJoin(it3 pi ci)  HashJoin(it3 pi)  IndexScan(it3)  IndexScan(pi)  IndexScan(ci)  IndexScan(rt)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(an)  IndexScan(n)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(chn)  IndexScan(mi)  IndexScan(it)  IndexScan(mc)  IndexScan(cn)  Leading(((((((((((((((((it3 pi) ci) rt) mk) k) t) an) n) cc) cct2) cct1) chn) mi) it) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS voiced_char,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS voiced_animation FROM aka_name AS an,      complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      info_type AS it3,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      name AS n,      person_info AS pi,      role_type AS rt,      title AS t WHERE cct1.kind ='cast'   AND cct2.kind ='complete+verified'   AND chn.name = 'Queen'   AND ci.note IN ('(voice)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND it3.info = 'height'   AND k.keyword = 'computer-animation'   AND mi.info LIKE 'USA:%200%'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND t.title = 'Shrek 2'   AND t.production_year BETWEEN 2000 AND 2005   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = cc.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mk.movie_id   AND mc.movie_id = cc.movie_id   AND mi.movie_id = ci.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = cc.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id   AND n.id = pi.person_id   AND ci.person_id = pi.person_id   AND it3.id = pi.info_type_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;12283.49;2389.085;None;True
/*+ HashJoin(it3 pi ci mk k t mc cc chn n mi it cct2 an rt cct1 cn)  HashJoin(it3 pi ci mk k t mc cc chn n mi it cct2 an rt cct1)  HashJoin(it3 pi ci mk k t mc cc chn n mi it cct2 an rt)  HashJoin(it3 pi ci mk k t mc cc chn n mi it cct2 an)  HashJoin(it3 pi ci mk k t mc cc chn n mi it cct2)  HashJoin(it3 pi ci mk k t mc cc chn n mi it)  HashJoin(it3 pi ci mk k t mc cc chn n mi)  HashJoin(it3 pi ci mk k t mc cc chn n)  HashJoin(it3 pi ci mk k t mc cc chn)  HashJoin(it3 pi ci mk k t mc cc)  HashJoin(it3 pi ci mk k t mc)  HashJoin(it3 pi ci mk k t)  HashJoin(it3 pi ci mk k)  HashJoin(it3 pi ci mk)  HashJoin(it3 pi ci)  HashJoin(it3 pi)  IndexScan(it3)  IndexScan(pi)  IndexScan(ci)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(mc)  IndexScan(cc)  IndexScan(chn)  IndexScan(n)  IndexScan(mi)  IndexScan(it)  IndexScan(cct2)  IndexScan(an)  IndexScan(rt)  IndexScan(cct1)  IndexScan(cn)  Leading(((((((((((((((((it3 pi) ci) mk) k) t) mc) cc) chn) n) mi) it) cct2) an) rt) cct1) cn)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS voiced_char,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS voiced_animation FROM aka_name AS an,      complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      info_type AS it3,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      name AS n,      person_info AS pi,      role_type AS rt,      title AS t WHERE cct1.kind ='cast'   AND cct2.kind ='complete+verified'   AND ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND it3.info = 'trivia'   AND k.keyword = 'computer-animation'   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%200%'        OR mi.info LIKE 'USA:%200%')   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2000 AND 2010   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = cc.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mk.movie_id   AND mc.movie_id = cc.movie_id   AND mi.movie_id = ci.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = cc.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id   AND n.id = pi.person_id   AND ci.person_id = pi.person_id   AND it3.id = pi.info_type_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;18050.915;2420.062;None;True
/*+ HashJoin(lt ml mk k t mc cn ct)  HashJoin(lt ml mk k t mc cn)  HashJoin(lt ml mk k t mc)  HashJoin(lt ml mk k t)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  Leading((((((((lt ml) mk) k) t) mc) cn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(lt.link) AS movie_link_type,        MIN(t.title) AS sequel_movie FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follows%'   AND mc.note IS NULL   AND t.production_year = 1998   AND t.title LIKE '%Money%'   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;4745.621;11.903;None;True
/*+ HashJoin(k mk ml mc ct cn lt t)  HashJoin(k mk ml mc ct cn lt)  HashJoin(k mk ml mc ct cn)  HashJoin(k mk ml mc ct)  HashJoin(k mk ml mc)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  IndexScan(lt)  IndexScan(t)  Leading((((((((k mk) ml) mc) ct) cn) lt) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '20th Century Fox%'        OR cn.name LIKE 'Twentieth Century Fox%')   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;5190.88;12.691;None;True
/*+ HashJoin(mi_idx it2 mc ct t cn mi it1)  HashJoin(mi_idx it2 mc ct t cn mi)  HashJoin(mi_idx it2 mc ct t cn)  HashJoin(mi_idx it2 mc ct t)  HashJoin(mi_idx it2 mc ct)  HashJoin(mi_idx it2 mc)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(cn)  IndexScan(mi)  IndexScan(it1)  Leading((((((((mi_idx it2) mc) ct) t) cn) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS drama_horror_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      title AS t WHERE cn.country_code = '[us]'   AND ct.kind = 'production companies'   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Drama',                   'Horror')   AND mi_idx.info > '8.0'   AND t.production_year BETWEEN 2005 AND 2008   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND mi.info_type_id = it1.id   AND mi_idx.info_type_id = it2.id   AND t.id = mc.movie_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id;  ;2963.145;13.188;None;True
/*+ HashJoin(mi_idx it2 t mi it1 mc cn ct)  HashJoin(mi_idx it2 t mi it1 mc cn)  HashJoin(mi_idx it2 t mi it1 mc)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  Leading((((((((mi_idx it2) t) mi) it1) mc) cn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS budget,        MIN(t.title) AS unsuccsessful_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      title AS t WHERE cn.country_code ='[us]'   AND ct.kind IS NOT NULL   AND (ct.kind ='production companies'        OR ct.kind = 'distributors')   AND it1.info ='budget'   AND it2.info ='bottom 10 rank'   AND t.production_year >2000   AND (t.title LIKE 'Birdemic%'        OR t.title LIKE '%Movie%')   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND mi.info_type_id = it1.id   AND mi_idx.info_type_id = it2.id   AND t.id = mc.movie_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id;  ;5687.498;12.78;None;True
/*+ HashJoin(mi_idx it2 t mc ct cn mi it1)  HashJoin(mi_idx it2 t mc ct cn mi)  HashJoin(mi_idx it2 t mc ct cn)  HashJoin(mi_idx it2 t mc ct)  HashJoin(mi_idx it2 t mc)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  IndexScan(mi)  IndexScan(it1)  Leading((((((((mi_idx it2) t) mc) ct) cn) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS mainstream_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      title AS t WHERE cn.country_code = '[us]'   AND ct.kind = 'production companies'   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Drama',                   'Horror',                   'Western',                   'Family')   AND mi_idx.info > '7.0'   AND t.production_year BETWEEN 2000 AND 2010   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND mi.info_type_id = it1.id   AND mi_idx.info_type_id = it2.id   AND t.id = mc.movie_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id;  ;3335.674;12.65;None;True
/*+ HashJoin(miidx it t kt mc ct cn mi it2)  HashJoin(miidx it t kt mc ct cn mi)  HashJoin(miidx it t kt mc ct cn)  HashJoin(miidx it t kt mc ct)  HashJoin(miidx it t kt mc)  HashJoin(miidx it t kt)  HashJoin(miidx it t)  HashJoin(miidx it)  IndexScan(miidx)  IndexScan(it)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  IndexScan(mi)  IndexScan(it2)  Leading(((((((((miidx it) t) kt) mc) ct) cn) mi) it2)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(miidx.info) AS rating,        MIN(t.title) AS german_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it,      info_type AS it2,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS miidx,      title AS t WHERE cn.country_code ='[de]'   AND ct.kind ='production companies'   AND it.info ='rating'   AND it2.info ='release dates'   AND kt.kind ='movie'   AND mi.movie_id = t.id   AND it2.id = mi.info_type_id   AND kt.id = t.kind_id   AND mc.movie_id = t.id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND miidx.movie_id = t.id   AND it.id = miidx.info_type_id   AND mi.movie_id = miidx.movie_id   AND mi.movie_id = mc.movie_id   AND miidx.movie_id = mc.movie_id;  ;6317.822;14.915;None;True
/*+ HashJoin(miidx it t kt mc cn ct mi it2)  HashJoin(miidx it t kt mc cn ct mi)  HashJoin(miidx it t kt mc cn ct)  HashJoin(miidx it t kt mc cn)  HashJoin(miidx it t kt mc)  HashJoin(miidx it t kt)  HashJoin(miidx it t)  HashJoin(miidx it)  IndexScan(miidx)  IndexScan(it)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mi)  IndexScan(it2)  Leading(((((((((miidx it) t) kt) mc) cn) ct) mi) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS producing_company,        MIN(miidx.info) AS rating,        MIN(t.title) AS movie_about_winning FROM company_name AS cn,      company_type AS ct,      info_type AS it,      info_type AS it2,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS miidx,      title AS t WHERE cn.country_code ='[us]'   AND ct.kind ='production companies'   AND it.info ='rating'   AND it2.info ='release dates'   AND kt.kind ='movie'   AND t.title != ''   AND (t.title LIKE '%Champion%'        OR t.title LIKE '%Loser%')   AND mi.movie_id = t.id   AND it2.id = mi.info_type_id   AND kt.id = t.kind_id   AND mc.movie_id = t.id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND miidx.movie_id = t.id   AND it.id = miidx.info_type_id   AND mi.movie_id = miidx.movie_id   AND mi.movie_id = mc.movie_id   AND miidx.movie_id = mc.movie_id;  ;5339.445;15.809;None;True
/*+ HashJoin(miidx it t kt mc cn ct mi it2)  HashJoin(miidx it t kt mc cn ct mi)  HashJoin(miidx it t kt mc cn ct)  HashJoin(miidx it t kt mc cn)  HashJoin(miidx it t kt mc)  HashJoin(miidx it t kt)  HashJoin(miidx it t)  HashJoin(miidx it)  IndexScan(miidx)  IndexScan(it)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mi)  IndexScan(it2)  Leading(((((((((miidx it) t) kt) mc) cn) ct) mi) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS producing_company,        MIN(miidx.info) AS rating,        MIN(t.title) AS movie_about_winning FROM company_name AS cn,      company_type AS ct,      info_type AS it,      info_type AS it2,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS miidx,      title AS t WHERE cn.country_code ='[us]'   AND ct.kind ='production companies'   AND it.info ='rating'   AND it2.info ='release dates'   AND kt.kind ='movie'   AND t.title != ''   AND (t.title LIKE 'Champion%'        OR t.title LIKE 'Loser%')   AND mi.movie_id = t.id   AND it2.id = mi.info_type_id   AND kt.id = t.kind_id   AND mc.movie_id = t.id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND miidx.movie_id = t.id   AND it.id = miidx.info_type_id   AND mi.movie_id = miidx.movie_id   AND mi.movie_id = mc.movie_id   AND miidx.movie_id = mc.movie_id;  ;5334.286;15.431;None;True
/*+ HashJoin(miidx it t kt mc ct cn mi it2)  HashJoin(miidx it t kt mc ct cn mi)  HashJoin(miidx it t kt mc ct cn)  HashJoin(miidx it t kt mc ct)  HashJoin(miidx it t kt mc)  HashJoin(miidx it t kt)  HashJoin(miidx it t)  HashJoin(miidx it)  IndexScan(miidx)  IndexScan(it)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  IndexScan(mi)  IndexScan(it2)  Leading(((((((((miidx it) t) kt) mc) ct) cn) mi) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS producing_company,        MIN(miidx.info) AS rating,        MIN(t.title) AS movie FROM company_name AS cn,      company_type AS ct,      info_type AS it,      info_type AS it2,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS miidx,      title AS t WHERE cn.country_code ='[us]'   AND ct.kind ='production companies'   AND it.info ='rating'   AND it2.info ='release dates'   AND kt.kind ='movie'   AND mi.movie_id = t.id   AND it2.id = mi.info_type_id   AND kt.id = t.kind_id   AND mc.movie_id = t.id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND miidx.movie_id = t.id   AND it.id = miidx.info_type_id   AND mi.movie_id = miidx.movie_id   AND mi.movie_id = mc.movie_id   AND miidx.movie_id = mc.movie_id;  ;6361.926;15.57;None;True
/*+ HashJoin(it2 mi_idx mk k t kt mi it1)  HashJoin(it2 mi_idx mk k t kt mi)  HashJoin(it2 mi_idx mk k t kt)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mi)  IndexScan(it1)  Leading((((((((it2 mi_idx) mk) k) t) kt) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS northern_dark_movie FROM info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind = 'movie'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info < '8.5'   AND t.production_year > 2010   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6067.167;11.676;None;True
/*+ HashJoin(k mk t mi it1 mi_idx it2 kt)  HashJoin(k mk t mi it1 mi_idx it2)  HashJoin(k mk t mi it1 mi_idx)  HashJoin(k mk t mi it1)  HashJoin(k mk t mi)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(kt)  Leading((((((((k mk) t) mi) it1) mi_idx) it2) kt)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS western_dark_production FROM info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title')   AND kt.kind = 'movie'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info > '6.0'   AND t.production_year > 2010   AND (t.title LIKE '%murder%'        OR t.title LIKE '%Murder%'        OR t.title LIKE '%Mord%')   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;5124.83;12.231;None;True
/*+ HashJoin(it2 mi_idx mk k t kt mi it1)  HashJoin(it2 mi_idx mk k t kt mi)  HashJoin(it2 mi_idx mk k t kt)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mi)  IndexScan(it1)  Leading((((((((it2 mi_idx) mk) k) t) kt) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS north_european_dark_production FROM info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IS NOT NULL   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Danish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info < '8.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;5848.113;7.952;None;True
/*+ HashJoin(cn mc at ct t mi it1 mk k)  HashJoin(cn mc at ct t mi it1 mk)  HashJoin(cn mc at ct t mi it1)  HashJoin(cn mc at ct t mi)  HashJoin(cn mc at ct t)  HashJoin(cn mc at ct)  HashJoin(cn mc at)  HashJoin(cn mc)  IndexScan(cn)  IndexScan(mc)  IndexScan(at)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((cn mc) at) ct) t) mi) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS youtube_movie FROM aka_title AS at,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND cn.name = 'YouTube'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year BETWEEN 2005 AND 2010   AND t.id = at.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = at.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = at.movie_id   AND mc.movie_id = at.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id;  ;4219.147;21.531;None;True
/*+ HashJoin(mi it1 t mc cn ct mk k at)  HashJoin(mi it1 t mc cn ct mk k)  HashJoin(mi it1 t mc cn ct mk)  HashJoin(mi it1 t mc cn ct)  HashJoin(mi it1 t mc cn)  HashJoin(mi it1 t mc)  HashJoin(mi it1 t)  HashJoin(mi it1)  IndexScan(mi)  IndexScan(it1)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mk)  IndexScan(k)  IndexScan(at)  Leading(((((((((mi it1) t) mc) cn) ct) mk) k) at)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS modern_american_internet_movie FROM aka_title AS at,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mi.note LIKE '%internet%'   AND mi.info IS NOT NULL   AND (mi.info LIKE 'USA:% 199%'        OR mi.info LIKE 'USA:% 200%')   AND t.production_year > 1990   AND t.id = at.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = at.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = at.movie_id   AND mc.movie_id = at.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id;  ;2809.696;22.173;None;True
/*+ HashJoin(mi it1 t mc cn ct mk k at)  HashJoin(mi it1 t mc cn ct mk k)  HashJoin(mi it1 t mc cn ct mk)  HashJoin(mi it1 t mc cn ct)  HashJoin(mi it1 t mc cn)  HashJoin(mi it1 t mc)  HashJoin(mi it1 t)  HashJoin(mi it1)  IndexScan(mi)  IndexScan(it1)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mk)  IndexScan(k)  IndexScan(at)  Leading(((((((((mi it1) t) mc) cn) ct) mk) k) at)) */ explain (verbose, analyze, format json) SELECT MIN(at.title) AS aka_title,        MIN(t.title) AS internet_movie_title FROM aka_title AS at,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mi.note LIKE '%internet%'   AND t.production_year > 1990   AND t.id = at.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = at.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = at.movie_id   AND mc.movie_id = at.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id;  ;2885.043;19.182;None;True
/*+ HashJoin(k mk t mc cn ci n an)  HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  IndexScan(an)  Leading((((((((k mk) t) mc) cn) ci) n) an)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS cool_actor_pseudonym,        MIN(t.title) AS series_named_after_char FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND t.episode_nr >= 50   AND t.episode_nr < 100   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26358.979;12.373;None;True
/*+ HashJoin(k mk t mc cn ci n an)  HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  IndexScan(an)  Leading((((((((k mk) t) mc) cn) ci) n) an)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS cool_actor_pseudonym,        MIN(t.title) AS series_named_after_char FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28166.706;11.049;None;True
/*+ HashJoin(k mk t mc cn ci n an)  HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  IndexScan(an)  Leading((((((((k mk) t) mc) cn) ci) n) an)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS cool_actor_pseudonym,        MIN(t.title) AS series_named_after_char FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND t.episode_nr < 100   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25342.015;11.276;None;True
/*+ HashJoin(k mk t mc cn ci n an)  HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  IndexScan(an)  Leading((((((((k mk) t) mc) cn) ci) n) an)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS cool_actor_pseudonym,        MIN(t.title) AS series_named_after_char FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND t.episode_nr >= 5   AND t.episode_nr < 100   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25425.551;12.621;None;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_american_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.name LIKE 'B%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;23792.314;8.996;None;True
/*+ HashJoin(k mk ci n mc cn t)  HashJoin(k mk ci n mc cn)  HashJoin(k mk ci n mc)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((((k mk) ci) n) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'X%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25047.333;9.488;None;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE '%Bert%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;24577.899;9.121;None;True
/*+ HashJoin(k mk t ci n mc cn)  HashJoin(k mk t ci n mc)  HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) t) ci) n) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE '%B%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27346.364;8.587;None;True
/*+ HashJoin(mi_idx it2 mi it1 ci n t)  HashJoin(mi_idx it2 mi it1 ci n)  HashJoin(mi_idx it2 mi it1 ci)  HashJoin(mi_idx it2 mi it1)  HashJoin(mi_idx it2 mi)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((mi_idx it2) mi) it1) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(producer)',                   '(executive producer)')   AND it1.info = 'budget'   AND it2.info = 'votes'   AND n.gender = 'm'   AND n.name LIKE '%Tim%'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;14028.184;10.373;None;True
/*+ HashJoin(mi_idx it2 mi it1 t ci n)  HashJoin(mi_idx it2 mi it1 t ci)  HashJoin(mi_idx it2 mi it1 t)  HashJoin(mi_idx it2 mi it1)  HashJoin(mi_idx it2 mi)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mi)  IndexScan(it1)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) mi) it1) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;9853.697;10.395;None;True
/*+ HashJoin(n an ci rt t chn mc cn mi it)  HashJoin(n an ci rt t chn mc cn mi)  HashJoin(n an ci rt t chn mc cn)  HashJoin(n an ci rt t chn mc)  HashJoin(n an ci rt t chn)  HashJoin(n an ci rt t)  HashJoin(n an ci rt)  HashJoin(n an ci)  HashJoin(n an)  IndexScan(n)  IndexScan(an)  IndexScan(ci)  IndexScan(rt)  IndexScan(t)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(mi)  IndexScan(it)  Leading((((((((((n an) ci) rt) t) chn) mc) cn) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS voicing_actress,        MIN(t.title) AS voiced_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND mc.note IS NOT NULL   AND (mc.note LIKE '%(USA)%'        OR mc.note LIKE '%(worldwide)%')   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%200%'        OR mi.info LIKE 'USA:%200%')   AND n.gender ='f'   AND n.name LIKE '%Ang%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2005 AND 2009   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mi.movie_id = ci.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id;  ;7867.461;19.956;None;True
/*+ HashJoin(t mc ci cn an chn mi it n rt)  HashJoin(t mc ci cn an chn mi it n)  HashJoin(t mc ci cn an chn mi it)  HashJoin(t mc ci cn an chn mi)  HashJoin(t mc ci cn an chn)  HashJoin(t mc ci cn an)  HashJoin(t mc ci cn)  HashJoin(t mc ci)  HashJoin(t mc)  IndexScan(t)  IndexScan(mc)  IndexScan(ci)  IndexScan(cn)  IndexScan(an)  IndexScan(chn)  IndexScan(mi)  IndexScan(it)  IndexScan(n)  IndexScan(rt)  Leading((((((((((t mc) ci) cn) an) chn) mi) it) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS voicing_actress,        MIN(t.title) AS kung_fu_panda FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      name AS n,      role_type AS rt,      title AS t WHERE ci.note = '(voice)'   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND (mc.note LIKE '%(USA)%'        OR mc.note LIKE '%(worldwide)%')   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%2007%'        OR mi.info LIKE 'USA:%2008%')   AND n.gender ='f'   AND n.name LIKE '%Angel%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2007 AND 2008   AND t.title LIKE '%Kung%Fu%Panda%'   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mi.movie_id = ci.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id;  ;6579.039;27.647;None;True
/*+ HashJoin(an n ci rt t mi it chn mc cn)  HashJoin(an n ci rt t mi it chn mc)  HashJoin(an n ci rt t mi it chn)  HashJoin(an n ci rt t mi it)  HashJoin(an n ci rt t mi)  HashJoin(an n ci rt t)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  Leading((((((((((an n) ci) rt) t) mi) it) chn) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS voicing_actress,        MIN(t.title) AS jap_engl_voiced_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%200%'        OR mi.info LIKE 'USA:%200%')   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND t.production_year > 2000   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mi.movie_id = ci.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id;  ;8351.62;24.626;None;True
/*+ HashJoin(t ci rt n mi it chn mc cn an)  HashJoin(t ci rt n mi it chn mc cn)  HashJoin(t ci rt n mi it chn mc)  HashJoin(t ci rt n mi it chn)  HashJoin(t ci rt n mi it)  HashJoin(t ci rt n mi)  HashJoin(t ci rt n)  HashJoin(t ci rt)  HashJoin(t ci)  IndexScan(t)  IndexScan(ci)  IndexScan(rt)  IndexScan(n)  IndexScan(mi)  IndexScan(it)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(an)  Leading((((((((((t ci) rt) n) mi) it) chn) mc) cn) an)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS voicing_actress,        MIN(t.title) AS jap_engl_voiced_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND n.gender ='f'   AND rt.role ='actress'   AND t.production_year > 2000   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mi.movie_id = ci.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id;  ;9454.96;23.705;None;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%'        OR mc.note LIKE '%(presents)%')   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1913.463;5.818;None;True
/*+ HashJoin(mi_idx it t mc ct)  HashJoin(mi_idx it t mc)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mc)  IndexScan(ct)  Leading(((((mi_idx it) t) mc) ct)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'bottom 10 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND t.production_year BETWEEN 2005 AND 2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1781.363;5.839;None;True
/*+ HashJoin(mi_idx it t mc ct)  HashJoin(mi_idx it t mc)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mc)  IndexScan(ct)  Leading(((((mi_idx it) t) mc) ct)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'bottom 10 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND t.production_year >2000   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;2120.945;5.989;None;True
/*+ HashJoin(cct2 cc cct1 mk k t kt ci n chn)  HashJoin(cct2 cc cct1 mk k t kt ci n)  HashJoin(cct2 cc cct1 mk k t kt ci)  HashJoin(cct2 cc cct1 mk k t kt)  HashJoin(cct2 cc cct1 mk k t)  HashJoin(cct2 cc cct1 mk k)  HashJoin(cct2 cc cct1 mk)  HashJoin(cct2 cc cct1)  HashJoin(cct2 cc)  IndexScan(cct2)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(ci)  IndexScan(n)  IndexScan(chn)  Leading((((((((((cct2 cc) cct1) mk) k) t) kt) ci) n) chn)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;25606.81;14.859;None;True
/*+ HashJoin(cct2 cc cct1 mk k t kt ci chn n)  HashJoin(cct2 cc cct1 mk k t kt ci chn)  HashJoin(cct2 cc cct1 mk k t kt ci)  HashJoin(cct2 cc cct1 mk k t kt)  HashJoin(cct2 cc cct1 mk k t)  HashJoin(cct2 cc cct1 mk k)  HashJoin(cct2 cc cct1 mk)  HashJoin(cct2 cc cct1)  HashJoin(cct2 cc)  IndexScan(cct2)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((cct2 cc) cct1) mk) k) t) kt) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS cast_member,        MIN(t.title) AS complete_dynamic_hero_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name IS NOT NULL   AND (chn.name LIKE '%man%'        OR chn.name LIKE '%Man%')   AND k.keyword IN ('superhero',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence',                     'magnet',                     'web',                     'claw',                     'laser')   AND kt.kind = 'movie'   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29167.265;23.234;None;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS german_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Germany',                   'German')   AND t.production_year BETWEEN 2000 AND 2010   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7907.797;19.279;None;True
/*+ HashJoin(ct mc mk k ml lt cn mi t)  HashJoin(ct mc mk k ml lt cn mi)  HashJoin(ct mc mk k ml lt cn)  HashJoin(ct mc mk k ml lt)  HashJoin(ct mc mk k ml)  HashJoin(ct mc mk k)  HashJoin(ct mc mk)  HashJoin(ct mc)  IndexScan(ct)  IndexScan(mc)  IndexScan(mk)  IndexScan(k)  IndexScan(ml)  IndexScan(lt)  IndexScan(cn)  IndexScan(mi)  IndexScan(t)  Leading(((((((((ct mc) mk) k) ml) lt) cn) mi) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'English')   AND t.production_year BETWEEN 1950 AND 2010   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8442.11;14.635;None;True
/*+ HashJoin(it2 mi_idx mk k t kt mc cn ct mi it1)  HashJoin(it2 mi_idx mk k t kt mc cn ct mi)  HashJoin(it2 mi_idx mk k t kt mc cn ct)  HashJoin(it2 mi_idx mk k t kt mc cn)  HashJoin(it2 mi_idx mk k t kt mc)  HashJoin(it2 mi_idx mk k t kt)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mi)  IndexScan(it1)  Leading(((((((((((it2 mi_idx) mk) k) t) kt) mc) cn) ct) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS western_violent_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Germany',                   'German',                   'USA',                   'American')   AND mi_idx.info < '7.0'   AND t.production_year > 2008   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id;  ;6531.27;37.174;None;True
/*+ HashJoin(it2 mi_idx mk k t kt mc cn ct mi it1)  HashJoin(it2 mi_idx mk k t kt mc cn ct mi)  HashJoin(it2 mi_idx mk k t kt mc cn ct)  HashJoin(it2 mi_idx mk k t kt mc cn)  HashJoin(it2 mi_idx mk k t kt mc)  HashJoin(it2 mi_idx mk k t kt)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mi)  IndexScan(it1)  Leading(((((((((((it2 mi_idx) mk) k) t) kt) mc) cn) ct) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS western_violent_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Germany',                   'German',                   'USA',                   'American')   AND mi_idx.info < '7.0'   AND t.production_year > 2009   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id;  ;6660.326;43.212;None;True
/*+ HashJoin(it2 mi_idx mk k t kt mc cn ct mi it1)  HashJoin(it2 mi_idx mk k t kt mc cn ct mi)  HashJoin(it2 mi_idx mk k t kt mc cn ct)  HashJoin(it2 mi_idx mk k t kt mc cn)  HashJoin(it2 mi_idx mk k t kt mc)  HashJoin(it2 mi_idx mk k t kt)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mi)  IndexScan(it1)  Leading(((((((((((it2 mi_idx) mk) k) t) kt) mc) cn) ct) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS western_violent_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Danish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info < '8.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id;  ;6700.676;35.583;None;True
/*+ HashJoin(it2 mi_idx mk k t kt mi it1 mc cn ct)  HashJoin(it2 mi_idx mk k t kt mi it1 mc cn)  HashJoin(it2 mi_idx mk k t kt mi it1 mc)  HashJoin(it2 mi_idx mk k t kt mi it1)  HashJoin(it2 mi_idx mk k t kt mi)  HashJoin(it2 mi_idx mk k t kt)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mi)  IndexScan(it1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  Leading(((((((((((it2 mi_idx) mk) k) t) kt) mi) it1) mc) cn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS western_violent_movie FROM company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Danish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info < '8.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id;  ;7411.275;37.565;None;True
/*+ HashJoin(t cc cct1 kt mi it1 mk mc cn ct k)  HashJoin(t cc cct1 kt mi it1 mk mc cn ct)  HashJoin(t cc cct1 kt mi it1 mk mc cn)  HashJoin(t cc cct1 kt mi it1 mk mc)  HashJoin(t cc cct1 kt mi it1 mk)  HashJoin(t cc cct1 kt mi it1)  HashJoin(t cc cct1 kt mi)  HashJoin(t cc cct1 kt)  HashJoin(t cc cct1)  HashJoin(t cc)  IndexScan(t)  IndexScan(cc)  IndexScan(cct1)  IndexScan(kt)  IndexScan(mi)  IndexScan(it1)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(k)  Leading(((((((((((t cc) cct1) kt) mi) it1) mk) mc) cn) ct) k)) */ explain (verbose, analyze, format json) SELECT MIN(kt.kind) AS movie_kind,        MIN(t.title) AS complete_us_internet_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'complete+verified'   AND cn.country_code = '[us]'   AND it1.info = 'release dates'   AND kt.kind IN ('movie')   AND mi.note LIKE '%internet%'   AND mi.info IS NOT NULL   AND (mi.info LIKE 'USA:% 199%'        OR mi.info LIKE 'USA:% 200%')   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND cct1.id = cc.status_id;  ;3200.036;41.02;None;True
/*+ HashJoin(cct1 cc mk k t kt mc cn ct mi it1)  HashJoin(cct1 cc mk k t kt mc cn ct mi)  HashJoin(cct1 cc mk k t kt mc cn ct)  HashJoin(cct1 cc mk k t kt mc cn)  HashJoin(cct1 cc mk k t kt mc)  HashJoin(cct1 cc mk k t kt)  HashJoin(cct1 cc mk k t)  HashJoin(cct1 cc mk k)  HashJoin(cct1 cc mk)  HashJoin(cct1 cc)  IndexScan(cct1)  IndexScan(cc)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(mi)  IndexScan(it1)  Leading(((((((((((cct1 cc) mk) k) t) kt) mc) cn) ct) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(kt.kind) AS movie_kind,        MIN(t.title) AS complete_nerdy_internet_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'complete+verified'   AND cn.country_code = '[us]'   AND it1.info = 'release dates'   AND k.keyword IN ('nerd',                     'loner',                     'alienation',                     'dignity')   AND kt.kind IN ('movie')   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND cct1.id = cc.status_id;  ;7345.913;40.907;None;True
/*+ HashJoin(t cc cct1 kt mi it1 mk mc cn ct k)  HashJoin(t cc cct1 kt mi it1 mk mc cn ct)  HashJoin(t cc cct1 kt mi it1 mk mc cn)  HashJoin(t cc cct1 kt mi it1 mk mc)  HashJoin(t cc cct1 kt mi it1 mk)  HashJoin(t cc cct1 kt mi it1)  HashJoin(t cc cct1 kt mi)  HashJoin(t cc cct1 kt)  HashJoin(t cc cct1)  HashJoin(t cc)  IndexScan(t)  IndexScan(cc)  IndexScan(cct1)  IndexScan(kt)  IndexScan(mi)  IndexScan(it1)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(k)  Leading(((((((((((t cc) cct1) kt) mi) it1) mk) mc) cn) ct) k)) */ explain (verbose, analyze, format json) SELECT MIN(kt.kind) AS movie_kind,        MIN(t.title) AS complete_us_internet_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'complete+verified'   AND cn.country_code = '[us]'   AND it1.info = 'release dates'   AND kt.kind IN ('movie',                   'tv movie',                   'video movie',                   'video game')   AND mi.note LIKE '%internet%'   AND mi.info IS NOT NULL   AND (mi.info LIKE 'USA:% 199%'        OR mi.info LIKE 'USA:% 200%')   AND t.production_year > 1990   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id   AND cct1.id = cc.status_id;  ;2610.871;40.941;None;True
/*+ HashJoin(it mi mk k t ci chn n rt mc cn an)  HashJoin(it mi mk k t ci chn n rt mc cn)  HashJoin(it mi mk k t ci chn n rt mc)  HashJoin(it mi mk k t ci chn n rt)  HashJoin(it mi mk k t ci chn n)  HashJoin(it mi mk k t ci chn)  HashJoin(it mi mk k t ci)  HashJoin(it mi mk k t)  HashJoin(it mi mk k)  HashJoin(it mi mk)  HashJoin(it mi)  IndexScan(it)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  IndexScan(rt)  IndexScan(mc)  IndexScan(cn)  IndexScan(an)  Leading((((((((((((it mi) mk) k) t) ci) chn) n) rt) mc) cn) an)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS voiced_char_name,        MIN(n.name) AS voicing_actress_name,        MIN(t.title) AS voiced_action_movie_jap_eng FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND it.info = 'release dates'   AND k.keyword IN ('hero',                     'martial-arts',                     'hand-to-hand-combat')   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%201%'        OR mi.info LIKE 'USA:%201%')   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND t.production_year > 2010   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mk.movie_id   AND mi.movie_id = ci.movie_id   AND mi.movie_id = mk.movie_id   AND ci.movie_id = mk.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id   AND k.id = mk.keyword_id;  ;15273.851;74.538;None;True
/*+ HashJoin(cn mc t mk ci rt chn an n k mi it)  HashJoin(cn mc t mk ci rt chn an n k mi)  HashJoin(cn mc t mk ci rt chn an n k)  HashJoin(cn mc t mk ci rt chn an n)  HashJoin(cn mc t mk ci rt chn an)  HashJoin(cn mc t mk ci rt chn)  HashJoin(cn mc t mk ci rt)  HashJoin(cn mc t mk ci)  HashJoin(cn mc t mk)  HashJoin(cn mc t)  HashJoin(cn mc)  IndexScan(cn)  IndexScan(mc)  IndexScan(t)  IndexScan(mk)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(an)  IndexScan(n)  IndexScan(k)  IndexScan(mi)  IndexScan(it)  Leading((((((((((((cn mc) t) mk) ci) rt) chn) an) n) k) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS voiced_char_name,        MIN(n.name) AS voicing_actress_name,        MIN(t.title) AS kung_fu_panda FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      info_type AS it,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND cn.name = 'DreamWorks Animation'   AND it.info = 'release dates'   AND k.keyword IN ('hero',                     'martial-arts',                     'hand-to-hand-combat',                     'computer-animated-movie')   AND mi.info IS NOT NULL   AND (mi.info LIKE 'Japan:%201%'        OR mi.info LIKE 'USA:%201%')   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND t.production_year > 2010   AND t.title LIKE 'Kung Fu Panda%'   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND mc.movie_id = ci.movie_id   AND mc.movie_id = mi.movie_id   AND mc.movie_id = mk.movie_id   AND mi.movie_id = ci.movie_id   AND mi.movie_id = mk.movie_id   AND ci.movie_id = mk.movie_id   AND cn.id = mc.company_id   AND it.id = mi.info_type_id   AND n.id = ci.person_id   AND rt.id = ci.role_id   AND n.id = an.person_id   AND ci.person_id = an.person_id   AND chn.id = ci.person_role_id   AND k.id = mk.keyword_id;  ;12521.272;71.223;None;True
/*+ HashJoin(it2 mi_idx mk k mi ci it1 n t)  HashJoin(it2 mi_idx mk k mi ci it1 n)  HashJoin(it2 mi_idx mk k mi ci it1)  HashJoin(it2 mi_idx mk k mi ci)  HashJoin(it2 mi_idx mk k mi)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(ci)  IndexScan(it1)  IndexScan(n)  IndexScan(t)  Leading(((((((((it2 mi_idx) mk) k) mi) ci) it1) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'blood',                     'gore',                     'death',                     'female-nudity')   AND mi.info = 'Horror'   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13523.837;20.065;None;True
/*+ HashJoin(k mk t ci mi it1 mi_idx it2 n)  HashJoin(k mk t ci mi it1 mi_idx it2)  HashJoin(k mk t ci mi it1 mi_idx)  HashJoin(k mk t ci mi it1)  HashJoin(k mk t ci mi)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(mi)  IndexScan(it1)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(n)  Leading(((((((((k mk) t) ci) mi) it1) mi_idx) it2) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'blood',                     'gore',                     'death',                     'female-nudity')   AND mi.info = 'Horror'   AND n.gender = 'm'   AND t.production_year > 2010   AND t.title LIKE 'Vampire%'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12384.542;19.15;None;True
/*+ HashJoin(cct2 cc mk k mi_idx it2 t kt ci chn cct1 n)  HashJoin(cct2 cc mk k mi_idx it2 t kt ci chn cct1)  HashJoin(cct2 cc mk k mi_idx it2 t kt ci chn)  HashJoin(cct2 cc mk k mi_idx it2 t kt ci)  HashJoin(cct2 cc mk k mi_idx it2 t kt)  HashJoin(cct2 cc mk k mi_idx it2 t)  HashJoin(cct2 cc mk k mi_idx it2)  HashJoin(cct2 cc mk k mi_idx)  HashJoin(cct2 cc mk k)  HashJoin(cct2 cc mk)  HashJoin(cct2 cc)  IndexScan(cct2)  IndexScan(cc)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(ci)  IndexScan(chn)  IndexScan(cct1)  IndexScan(n)  Leading((((((((((((cct2 cc) mk) k) mi_idx) it2) t) kt) ci) chn) cct1) n)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS character_name,        MIN(mi_idx.info) AS rating,        MIN(n.name) AS playing_actor,        MIN(t.title) AS complete_hero_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name IS NOT NULL   AND (chn.name LIKE '%man%'        OR chn.name LIKE '%Man%')   AND it2.info = 'rating'   AND k.keyword IN ('superhero',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence',                     'magnet',                     'web',                     'claw',                     'laser')   AND kt.kind = 'movie'   AND mi_idx.info > '7.0'   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND t.id = mi_idx.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND mk.movie_id = mi_idx.movie_id   AND ci.movie_id = cc.movie_id   AND ci.movie_id = mi_idx.movie_id   AND cc.movie_id = mi_idx.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id   AND it2.id = mi_idx.info_type_id;  ;32681.579;62.884;None;True
/*+ HashJoin(kt t mk k mi_idx it2 cc cct2 ci chn n cct1)  HashJoin(kt t mk k mi_idx it2 cc cct2 ci chn n)  HashJoin(kt t mk k mi_idx it2 cc cct2 ci chn)  HashJoin(kt t mk k mi_idx it2 cc cct2 ci)  HashJoin(kt t mk k mi_idx it2 cc cct2)  HashJoin(kt t mk k mi_idx it2 cc)  HashJoin(kt t mk k mi_idx it2)  HashJoin(kt t mk k mi_idx)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(cc)  IndexScan(cct2)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  IndexScan(cct1)  Leading((((((((((((kt t) mk) k) mi_idx) it2) cc) cct2) ci) chn) n) cct1)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS character_name,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_hero_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name IS NOT NULL   AND (chn.name LIKE '%man%'        OR chn.name LIKE '%Man%')   AND it2.info = 'rating'   AND k.keyword IN ('superhero',                     'marvel-comics',                     'based-on-comic',                     'fight')   AND kt.kind = 'movie'   AND mi_idx.info > '8.0'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND t.id = mi_idx.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND mk.movie_id = mi_idx.movie_id   AND ci.movie_id = cc.movie_id   AND ci.movie_id = mi_idx.movie_id   AND cc.movie_id = mi_idx.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id   AND it2.id = mi_idx.info_type_id;  ;26181.828;63.242;None;True
/*+ HashJoin(kt t cc cct1 cct2 mi_idx it2 mk k ci n chn)  HashJoin(kt t cc cct1 cct2 mi_idx it2 mk k ci n)  HashJoin(kt t cc cct1 cct2 mi_idx it2 mk k ci)  HashJoin(kt t cc cct1 cct2 mi_idx it2 mk k)  HashJoin(kt t cc cct1 cct2 mi_idx it2 mk)  HashJoin(kt t cc cct1 cct2 mi_idx it2)  HashJoin(kt t cc cct1 cct2 mi_idx)  HashJoin(kt t cc cct1 cct2)  HashJoin(kt t cc cct1)  HashJoin(kt t cc)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(cc)  IndexScan(cct1)  IndexScan(cct2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mk)  IndexScan(k)  IndexScan(ci)  IndexScan(n)  IndexScan(chn)  Leading((((((((((((kt t) cc) cct1) cct2) mi_idx) it2) mk) k) ci) n) chn)) */ explain (verbose, analyze, format json) SELECT MIN(chn.name) AS character_name,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_hero_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name IS NOT NULL   AND (chn.name LIKE '%man%'        OR chn.name LIKE '%Man%')   AND it2.info = 'rating'   AND k.keyword IN ('superhero',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence',                     'magnet',                     'web',                     'claw',                     'laser')   AND kt.kind = 'movie'   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND t.id = mi_idx.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND mk.movie_id = mi_idx.movie_id   AND ci.movie_id = cc.movie_id   AND ci.movie_id = mi_idx.movie_id   AND cc.movie_id = mi_idx.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id   AND it2.id = mi_idx.info_type_id;  ;25577.712;62.147;None;True
/*+ HashJoin(cc ml lt cct1 cct2 t mk k mi mc cn ct)  HashJoin(cc ml lt cct1 cct2 t mk k mi mc cn)  HashJoin(cc ml lt cct1 cct2 t mk k mi mc)  HashJoin(cc ml lt cct1 cct2 t mk k mi)  HashJoin(cc ml lt cct1 cct2 t mk k)  HashJoin(cc ml lt cct1 cct2 t mk)  HashJoin(cc ml lt cct1 cct2 t)  HashJoin(cc ml lt cct1 cct2)  HashJoin(cc ml lt cct1)  HashJoin(cc ml lt)  HashJoin(cc ml)  IndexScan(cc)  IndexScan(ml)  IndexScan(lt)  IndexScan(cct1)  IndexScan(cct2)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  Leading((((((((((((cc ml) lt) cct1) cct2) t) mk) k) mi) mc) cn) ct)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS producing_company,        MIN(lt.link) AS link_type,        MIN(t.title) AS complete_western_sequel FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cct1.kind IN ('cast',                     'crew')   AND cct2.kind = 'complete'   AND cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND t.id = cc.movie_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id   AND ml.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND mc.movie_id = cc.movie_id   AND mi.movie_id = cc.movie_id;  ;6954.552;94.396;None;True
/*+ HashJoin(ct mc cc cct1 cct2 ml lt cn t mi mk k)  HashJoin(ct mc cc cct1 cct2 ml lt cn t mi mk)  HashJoin(ct mc cc cct1 cct2 ml lt cn t mi)  HashJoin(ct mc cc cct1 cct2 ml lt cn t)  HashJoin(ct mc cc cct1 cct2 ml lt cn)  HashJoin(ct mc cc cct1 cct2 ml lt)  HashJoin(ct mc cc cct1 cct2 ml)  HashJoin(ct mc cc cct1 cct2)  HashJoin(ct mc cc cct1)  HashJoin(ct mc cc)  HashJoin(ct mc)  IndexScan(ct)  IndexScan(mc)  IndexScan(cc)  IndexScan(cct1)  IndexScan(cct2)  IndexScan(ml)  IndexScan(lt)  IndexScan(cn)  IndexScan(t)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  Leading((((((((((((ct mc) cc) cct1) cct2) ml) lt) cn) t) mi) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS producing_company,        MIN(lt.link) AS link_type,        MIN(t.title) AS complete_western_sequel FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cct1.kind IN ('cast',                     'crew')   AND cct2.kind = 'complete'   AND cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND t.production_year = 1998   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND t.id = cc.movie_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id   AND ml.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND mc.movie_id = cc.movie_id   AND mi.movie_id = cc.movie_id;  ;5979.585;72.041;None;True
/*+ HashJoin(cc ml lt cct1 cct2 t mi mc cn mk k ct)  HashJoin(cc ml lt cct1 cct2 t mi mc cn mk k)  HashJoin(cc ml lt cct1 cct2 t mi mc cn mk)  HashJoin(cc ml lt cct1 cct2 t mi mc cn)  HashJoin(cc ml lt cct1 cct2 t mi mc)  HashJoin(cc ml lt cct1 cct2 t mi)  HashJoin(cc ml lt cct1 cct2 t)  HashJoin(cc ml lt cct1 cct2)  HashJoin(cc ml lt cct1)  HashJoin(cc ml lt)  HashJoin(cc ml)  IndexScan(cc)  IndexScan(ml)  IndexScan(lt)  IndexScan(cct1)  IndexScan(cct2)  IndexScan(t)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(mk)  IndexScan(k)  IndexScan(ct)  Leading((((((((((((cc ml) lt) cct1) cct2) t) mi) mc) cn) mk) k) ct)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS producing_company,        MIN(lt.link) AS link_type,        MIN(t.title) AS complete_western_sequel FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE 'complete%'   AND cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'English')   AND t.production_year BETWEEN 1950 AND 2010   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND t.id = cc.movie_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id   AND ml.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND mc.movie_id = cc.movie_id   AND mi.movie_id = cc.movie_id;  ;6667.591;72.042;None;True
/*+ HashJoin(it1 mi mk k t kt cc cct2 mi_idx it2 mc cct1 ct cn)  HashJoin(it1 mi mk k t kt cc cct2 mi_idx it2 mc cct1 ct)  HashJoin(it1 mi mk k t kt cc cct2 mi_idx it2 mc cct1)  HashJoin(it1 mi mk k t kt cc cct2 mi_idx it2 mc)  HashJoin(it1 mi mk k t kt cc cct2 mi_idx it2)  HashJoin(it1 mi mk k t kt cc cct2 mi_idx)  HashJoin(it1 mi mk k t kt cc cct2)  HashJoin(it1 mi mk k t kt cc)  HashJoin(it1 mi mk k t kt)  HashJoin(it1 mi mk k t)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mc)  IndexScan(cct1)  IndexScan(ct)  IndexScan(cn)  Leading((((((((((((((it1 mi) mk) k) t) kt) cc) cct2) mi_idx) it2) mc) cct1) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Danish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info < '8.5'   AND t.production_year > 2000   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6576.354;276.45;None;True
/*+ HashJoin(it1 mi mk k cc cct1 cct2 t kt mi_idx it2 mc ct cn)  HashJoin(it1 mi mk k cc cct1 cct2 t kt mi_idx it2 mc ct)  HashJoin(it1 mi mk k cc cct1 cct2 t kt mi_idx it2 mc)  HashJoin(it1 mi mk k cc cct1 cct2 t kt mi_idx it2)  HashJoin(it1 mi mk k cc cct1 cct2 t kt mi_idx)  HashJoin(it1 mi mk k cc cct1 cct2 t kt)  HashJoin(it1 mi mk k cc cct1 cct2 t)  HashJoin(it1 mi mk k cc cct1 cct2)  HashJoin(it1 mi mk k cc cct1)  HashJoin(it1 mi mk k cc)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct1)  IndexScan(cct2)  IndexScan(t)  IndexScan(kt)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((((((((it1 mi) mk) k) cc) cct1) cct2) t) kt) mi_idx) it2) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind = 'complete'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Danish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND mi_idx.info < '8.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6351.989;191.021;None;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[de]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6662.711;5.523;None;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[nl]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6484.672;5.27;None;True
/*+ HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((k mk) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7169.185;5.84;None;True
/*+ HashJoin(it1 mi mk k mi_idx it2 cc cct2 ci n t cct1)  HashJoin(it1 mi mk k mi_idx it2 cc cct2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 cc cct2 ci n)  HashJoin(it1 mi mk k mi_idx it2 cc cct2 ci)  HashJoin(it1 mi mk k mi_idx it2 cc cct2)  HashJoin(it1 mi mk k mi_idx it2 cc)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(cc)  IndexScan(cct2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(cct1)  Leading((((((((((((it1 mi) mk) k) mi_idx) it2) cc) cct2) ci) n) t) cct1)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS writer,        MIN(t.title) AS complete_violent_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind IN ('cast',                     'crew')   AND cct2.kind ='complete+verified'   AND ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Thriller')   AND n.gender = 'm'   AND t.production_year > 2000   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = cc.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = cc.movie_id   AND mi_idx.movie_id = mk.movie_id   AND mi_idx.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;10872.952;68.323;None;True
/*+ HashJoin(it2 mi_idx mk k t cc cct2 cct1 ci n mi it1)  HashJoin(it2 mi_idx mk k t cc cct2 cct1 ci n mi)  HashJoin(it2 mi_idx mk k t cc cct2 cct1 ci n)  HashJoin(it2 mi_idx mk k t cc cct2 cct1 ci)  HashJoin(it2 mi_idx mk k t cc cct2 cct1)  HashJoin(it2 mi_idx mk k t cc cct2)  HashJoin(it2 mi_idx mk k t cc)  HashJoin(it2 mi_idx mk k t)  HashJoin(it2 mi_idx mk k)  HashJoin(it2 mi_idx mk)  HashJoin(it2 mi_idx)  IndexScan(it2)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(n)  IndexScan(mi)  IndexScan(it1)  Leading((((((((((((it2 mi_idx) mk) k) t) cc) cct2) cct1) ci) n) mi) it1)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS writer,        MIN(t.title) AS complete_gore_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind IN ('cast',                     'crew')   AND cct2.kind ='complete+verified'   AND ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Thriller')   AND n.gender = 'm'   AND t.production_year > 2000   AND (t.title LIKE '%Freddy%'        OR t.title LIKE '%Jason%'        OR t.title LIKE 'Saw%')   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = cc.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = cc.movie_id   AND mi_idx.movie_id = mk.movie_id   AND mi_idx.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;11310.496;74.012;None;True
/*+ HashJoin(cct1 cc mk k mi_idx it2 mi it1 t ci n cct2)  HashJoin(cct1 cc mk k mi_idx it2 mi it1 t ci n)  HashJoin(cct1 cc mk k mi_idx it2 mi it1 t ci)  HashJoin(cct1 cc mk k mi_idx it2 mi it1 t)  HashJoin(cct1 cc mk k mi_idx it2 mi it1)  HashJoin(cct1 cc mk k mi_idx it2 mi)  HashJoin(cct1 cc mk k mi_idx it2)  HashJoin(cct1 cc mk k mi_idx)  HashJoin(cct1 cc mk k)  HashJoin(cct1 cc mk)  HashJoin(cct1 cc)  IndexScan(cct1)  IndexScan(cc)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mi)  IndexScan(it1)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  IndexScan(cct2)  Leading((((((((((((cct1 cc) mk) k) mi_idx) it2) mi) it1) t) ci) n) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS writer,        MIN(t.title) AS complete_violent_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind ='complete+verified'   AND ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = cc.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = cc.movie_id   AND mi_idx.movie_id = mk.movie_id   AND mi_idx.movie_id = cc.movie_id   AND mk.movie_id = cc.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;13418.052;74.436;None;True
/*+ HashJoin(cn mc mi_idx it2 mi ci n t mk k it1)  HashJoin(cn mc mi_idx it2 mi ci n t mk k)  HashJoin(cn mc mi_idx it2 mi ci n t mk)  HashJoin(cn mc mi_idx it2 mi ci n t)  HashJoin(cn mc mi_idx it2 mi ci n)  HashJoin(cn mc mi_idx it2 mi ci)  HashJoin(cn mc mi_idx it2 mi)  HashJoin(cn mc mi_idx it2)  HashJoin(cn mc mi_idx)  HashJoin(cn mc)  IndexScan(cn)  IndexScan(mc)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mi)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(it1)  Leading(((((((((((cn mc) mi_idx) it2) mi) ci) n) t) mk) k) it1)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS writer,        MIN(t.title) AS violent_liongate_movie FROM cast_info AS ci,      company_name AS cn,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND cn.name LIKE 'Lionsgate%'   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Thriller')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = mc.movie_id   AND mi_idx.movie_id = mk.movie_id   AND mi_idx.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id   AND cn.id = mc.company_id;  ;11185.11;44.268;None;True
/*+ HashJoin(cn mc mi_idx it2 t mk ci mi it1 k n)  HashJoin(cn mc mi_idx it2 t mk ci mi it1 k)  HashJoin(cn mc mi_idx it2 t mk ci mi it1)  HashJoin(cn mc mi_idx it2 t mk ci mi)  HashJoin(cn mc mi_idx it2 t mk ci)  HashJoin(cn mc mi_idx it2 t mk)  HashJoin(cn mc mi_idx it2 t)  HashJoin(cn mc mi_idx it2)  HashJoin(cn mc mi_idx)  HashJoin(cn mc)  IndexScan(cn)  IndexScan(mc)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mk)  IndexScan(ci)  IndexScan(mi)  IndexScan(it1)  IndexScan(k)  IndexScan(n)  Leading(((((((((((cn mc) mi_idx) it2) t) mk) ci) mi) it1) k) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS writer,        MIN(t.title) AS violent_liongate_movie FROM cast_info AS ci,      company_name AS cn,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND cn.name LIKE 'Lionsgate%'   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mc.note LIKE '%(Blu-ray)%'   AND mi.info IN ('Horror',                   'Thriller')   AND n.gender = 'm'   AND t.production_year > 2000   AND (t.title LIKE '%Freddy%'        OR t.title LIKE '%Jason%'        OR t.title LIKE 'Saw%')   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = mc.movie_id   AND mi_idx.movie_id = mk.movie_id   AND mi_idx.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id   AND cn.id = mc.company_id;  ;15023.361;39.288;None;True
/*+ HashJoin(cn mc mi_idx it2 mi it1 t mk k ci n)  HashJoin(cn mc mi_idx it2 mi it1 t mk k ci)  HashJoin(cn mc mi_idx it2 mi it1 t mk k)  HashJoin(cn mc mi_idx it2 mi it1 t mk)  HashJoin(cn mc mi_idx it2 mi it1 t)  HashJoin(cn mc mi_idx it2 mi it1)  HashJoin(cn mc mi_idx it2 mi)  HashJoin(cn mc mi_idx it2)  HashJoin(cn mc mi_idx)  HashJoin(cn mc)  IndexScan(cn)  IndexScan(mc)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(mi)  IndexScan(it1)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(ci)  IndexScan(n)  Leading(((((((((((cn mc) mi_idx) it2) mi) it1) t) mk) k) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS writer,        MIN(t.title) AS violent_liongate_movie FROM cast_info AS ci,      company_name AS cn,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND cn.name LIKE 'Lionsgate%'   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND ci.movie_id = mc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi.movie_id = mc.movie_id   AND mi_idx.movie_id = mk.movie_id   AND mi_idx.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id   AND cn.id = mc.company_id;  ;14369.421;57.078;None;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='10,000-mile-club'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8816.695;7.204;None;True
/*+ HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1 t2 kt2)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1 t2)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1 cn1)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1 mc1)  HashJoin(it2 mi_idx2 ml mi_idx1 lt it1)  HashJoin(it2 mi_idx2 ml mi_idx1 lt)  HashJoin(it2 mi_idx2 ml mi_idx1)  HashJoin(it2 mi_idx2 ml)  HashJoin(it2 mi_idx2)  IndexScan(it2)  IndexScan(mi_idx2)  IndexScan(ml)  IndexScan(mi_idx1)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  Leading((((((((((((((it2 mi_idx2) ml) mi_idx1) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[nl]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link LIKE '%follow%'   AND mi_idx2.info < '3.0'   AND t2.production_year = 2007   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;9602.106;308.83;None;True
/*+ HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2 t2 kt2 mc1 cn1 mi_idx2 it2)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2 t2 kt2 mc1 cn1 mi_idx2)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2 t2 kt2 mc1 cn1)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2 t2 kt2 mc1)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2 t2 kt2)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2 t2)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2 cn2)  HashJoin(mi_idx1 ml it1 lt t1 kt1 mc2)  HashJoin(mi_idx1 ml it1 lt t1 kt1)  HashJoin(mi_idx1 ml it1 lt t1)  HashJoin(mi_idx1 ml it1 lt)  HashJoin(mi_idx1 ml it1)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(it1)  IndexScan(lt)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) it1) lt) t1) kt1) mc2) cn2) t2) kt2) mc1) cn1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code != '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series',                    'episode')   AND kt2.kind IN ('tv series',                    'episode')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.5'   AND t2.production_year BETWEEN 2000 AND 2010   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5521.776;227.176;None;True
/*+ HashJoin(k mk t mi)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mi)  Leading((((k mk) t) mi)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM keyword AS k,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE k.keyword LIKE '%sequel%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year > 2005   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi.movie_id   AND k.id = mk.keyword_id;  ;7181.765;5.439;None;True
/*+ HashJoin(k mk t mi)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mi)  Leading((((k mk) t) mi)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM keyword AS k,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE k.keyword LIKE '%sequel%'   AND mi.info IN ('Bulgaria')   AND t.production_year > 2010   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi.movie_id   AND k.id = mk.keyword_id;  ;7372.693;4.099;None;True
/*+ HashJoin(k mk t mi)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mi)  Leading((((k mk) t) mi)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM keyword AS k,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE k.keyword LIKE '%sequel%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi.movie_id   AND k.id = mk.keyword_id;  ;5981.173;3.688;None;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '5.0'   AND t.production_year > 2005   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4706.161;4.874;None;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS typical_european_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note LIKE '%(theatrical)%'   AND mc.note LIKE '%(France)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year > 2005   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2043.594;6.524;None;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_vhs_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note LIKE '%(VHS)%'   AND mc.note LIKE '%(USA)%'   AND mc.note LIKE '%(1994)%'   AND mi.info IN ('USA',                   'America')   AND t.production_year > 2010   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2035.904;5.906;None;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS hero_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22268.05;6.386;None;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS hero_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;142515.924;5.962;None;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS hero_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;31480.127;7.775;None;True
/*+ HashJoin(ml lt t ci n pi an it)  HashJoin(ml lt t ci n pi an)  HashJoin(ml lt t ci n pi)  HashJoin(ml lt t ci n)  HashJoin(ml lt t ci)  HashJoin(ml lt t)  HashJoin(ml lt)  IndexScan(ml)  IndexScan(lt)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  IndexScan(pi)  IndexScan(an)  IndexScan(it)  Leading((((((((ml lt) t) ci) n) pi) an) it)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS of_person,        MIN(t.title) AS biography_movie FROM aka_name AS an,      cast_info AS ci,      info_type AS it,      link_type AS lt,      movie_link AS ml,      name AS n,      person_info AS pi,      title AS t WHERE an.name LIKE '%a%'   AND it.info ='mini biography'   AND lt.link ='features'   AND n.name_pcode_cf BETWEEN 'A' AND 'F'   AND (n.gender='m'        OR (n.gender = 'f'            AND n.name LIKE 'B%'))   AND pi.note ='Volker Boehm'   AND t.production_year BETWEEN 1980 AND 1995   AND n.id = an.person_id   AND n.id = pi.person_id   AND ci.person_id = n.id   AND t.id = ci.movie_id   AND ml.linked_movie_id = t.id   AND lt.id = ml.link_type_id   AND it.id = pi.info_type_id   AND pi.person_id = an.person_id   AND pi.person_id = ci.person_id   AND an.person_id = ci.person_id   AND ci.movie_id = ml.linked_movie_id;  ;24899.249;11.943;None;True
/*+ HashJoin(ml lt t ci n pi an it)  HashJoin(ml lt t ci n pi an)  HashJoin(ml lt t ci n pi)  HashJoin(ml lt t ci n)  HashJoin(ml lt t ci)  HashJoin(ml lt t)  HashJoin(ml lt)  IndexScan(ml)  IndexScan(lt)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  IndexScan(pi)  IndexScan(an)  IndexScan(it)  Leading((((((((ml lt) t) ci) n) pi) an) it)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS of_person,        MIN(t.title) AS biography_movie FROM aka_name AS an,      cast_info AS ci,      info_type AS it,      link_type AS lt,      movie_link AS ml,      name AS n,      person_info AS pi,      title AS t WHERE an.name LIKE '%a%'   AND it.info ='mini biography'   AND lt.link ='features'   AND n.name_pcode_cf LIKE 'D%'   AND n.gender='m'   AND pi.note ='Volker Boehm'   AND t.production_year BETWEEN 1980 AND 1984   AND n.id = an.person_id   AND n.id = pi.person_id   AND ci.person_id = n.id   AND t.id = ci.movie_id   AND ml.linked_movie_id = t.id   AND lt.id = ml.link_type_id   AND it.id = pi.info_type_id   AND pi.person_id = an.person_id   AND pi.person_id = ci.person_id   AND an.person_id = ci.person_id   AND ci.movie_id = ml.linked_movie_id;  ;24358.291;11.438;None;True
/*+ HashJoin(pi it an n ci ml lt t)  HashJoin(pi it an n ci ml lt)  HashJoin(pi it an n ci ml)  HashJoin(pi it an n ci)  HashJoin(pi it an n)  HashJoin(pi it an)  HashJoin(pi it)  IndexScan(pi)  IndexScan(it)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(ml)  IndexScan(lt)  IndexScan(t)  Leading((((((((pi it) an) n) ci) ml) lt) t)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS cast_member_name,        MIN(pi.info) AS cast_member_info FROM aka_name AS an,      cast_info AS ci,      info_type AS it,      link_type AS lt,      movie_link AS ml,      name AS n,      person_info AS pi,      title AS t WHERE an.name IS NOT NULL   AND (an.name LIKE '%a%'        OR an.name LIKE 'A%')   AND it.info ='mini biography'   AND lt.link IN ('references',                   'referenced in',                   'features',                   'featured in')   AND n.name_pcode_cf BETWEEN 'A' AND 'F'   AND (n.gender='m'        OR (n.gender = 'f'            AND n.name LIKE 'A%'))   AND pi.note IS NOT NULL   AND t.production_year BETWEEN 1980 AND 2010   AND n.id = an.person_id   AND n.id = pi.person_id   AND ci.person_id = n.id   AND t.id = ci.movie_id   AND ml.linked_movie_id = t.id   AND lt.id = ml.link_type_id   AND it.id = pi.info_type_id   AND pi.person_id = an.person_id   AND pi.person_id = ci.person_id   AND an.person_id = ci.person_id   AND ci.movie_id = ml.linked_movie_id;  ;9715.546;11.569;None;True
/*+ HashJoin(mc cn t ci rt an1 n1)  HashJoin(mc cn t ci rt an1)  HashJoin(mc cn t ci rt)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(rt)  IndexScan(an1)  IndexScan(n1)  Leading(((((((mc cn) t) ci) rt) an1) n1)) */ explain (verbose, analyze, format json) SELECT MIN(an1.name) AS actress_pseudonym,        MIN(t.title) AS japanese_movie_dubbed FROM aka_name AS an1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND n1.name LIKE '%Yo%'   AND n1.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND an1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5513.14;9.378;None;True
/*+ HashJoin(an1 ci t mc cn rt n1)  HashJoin(an1 ci t mc cn rt)  HashJoin(an1 ci t mc cn)  HashJoin(an1 ci t mc)  HashJoin(an1 ci t)  HashJoin(an1 ci)  IndexScan(an1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((an1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(an1.name) AS costume_designer_pseudo,        MIN(t.title) AS movie_with_costumes FROM aka_name AS an1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='costume designer'   AND an1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;41494.245;9.196;None;True
/*+ HashJoin(n an ci rt t mc chn cn)  HashJoin(n an ci rt t mc chn)  HashJoin(n an ci rt t mc)  HashJoin(n an ci rt t)  HashJoin(n an ci rt)  HashJoin(n an ci)  HashJoin(n an)  IndexScan(n)  IndexScan(an)  IndexScan(ci)  IndexScan(rt)  IndexScan(t)  IndexScan(mc)  IndexScan(chn)  IndexScan(cn)  Leading((((((((n an) ci) rt) t) mc) chn) cn)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS character_name,        MIN(t.title) AS movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND mc.note IS NOT NULL   AND (mc.note LIKE '%(USA)%'        OR mc.note LIKE '%(worldwide)%')   AND n.gender ='f'   AND n.name LIKE '%Ang%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2005 AND 2015   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;7633.988;14.47;None;True
/*+ HashJoin(n an ci rt mc chn cn t)  HashJoin(n an ci rt mc chn cn)  HashJoin(n an ci rt mc chn)  HashJoin(n an ci rt mc)  HashJoin(n an ci rt)  HashJoin(n an ci)  HashJoin(n an)  IndexScan(n)  IndexScan(an)  IndexScan(ci)  IndexScan(rt)  IndexScan(mc)  IndexScan(chn)  IndexScan(cn)  IndexScan(t)  Leading((((((((n an) ci) rt) mc) chn) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note = '(voice)'   AND cn.country_code ='[us]'   AND mc.note LIKE '%(200%)%'   AND (mc.note LIKE '%(USA)%'        OR mc.note LIKE '%(worldwide)%')   AND n.gender ='f'   AND n.name LIKE '%Angel%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2007 AND 2010   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5750.616;11.897;None;True
/*+ HashJoin(mc cn ci rt n chn t an)  HashJoin(mc cn ci rt n chn t)  HashJoin(mc cn ci rt n chn)  HashJoin(mc cn ci rt n)  HashJoin(mc cn ci rt)  HashJoin(mc cn ci)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(rt)  IndexScan(n)  IndexScan(chn)  IndexScan(t)  IndexScan(an)  Leading((((((((mc cn) ci) rt) n) chn) t) an)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_char_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;7104.289;12.656;None;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6596.484;12.658;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3668.836;21.794;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;35188.016;6.644;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32869.59;9.016;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6352.16;9.792;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1434.467;5.664;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30395.702;21.785;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7018.681;19.878;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13235.653;21.01;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7206.398;210.191;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7137.675;4.256;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7712.292;5.931;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4923.027;340.566;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1941.409;5.38;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6010.423;5.261;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3011.919;5.84;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25519.814;2.935;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24697.737;6.496;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;76952.624;6.912;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;6671.098;11.26;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;37110.841;5.619;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;8566.052;14.045;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6158.133;12.276;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4515.459;21.065;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33527.96;5.409;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32846.205;8.95;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6512.471;9.45;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1087.468;6.085;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;33344.896;21.395;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7441.834;19.839;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;15466.105;16.568;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6625.006;199.952;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6503.801;5.712;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7392.918;6.202;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4928.908;326.885;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1827.374;5.909;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4811.801;2.405;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2658.379;6.065;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23069.206;6.538;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22736.212;5.69;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;27511.04;5.938;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4374.88;10.07;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23601.678;8.6;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6739.976;14.255;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6436.763;17.287;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3842.401;29.132;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28526.368;9.837;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;36034.723;8.625;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6589.205;9.879;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1233.766;6.034;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30328.114;21.435;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7309.372;19.537;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;16328.408;19.758;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7034.218;236.859;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6434.577;5.142;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7308.921;5.931;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4640.992;215.221;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2109.715;5.736;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6191.972;2.798;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2765.095;6.882;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;29060.515;5.909;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;27448.464;5.713;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;31944.487;6.66;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4799.687;10.452;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;25655.013;9.065;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5899.221;13.005;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6674.524;23.225;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;2752.04;21.962;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;35103.475;9.608;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;36339.519;9.835;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7146.881;10.965;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1299.701;5.432;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29088.95;15.965;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7780.138;18.581;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14235.447;16.0;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7562.372;272.822;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7234.708;5.79;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8199.925;6.228;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4973.323;316.729;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1859.904;5.538;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5573.149;5.104;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2940.288;6.002;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;31273.563;6.028;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;28032.003;6.513;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23110.38;5.639;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4645.316;9.745;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;25482.967;8.988;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;7015.91;13.83;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7787.438;16.437;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4763.78;23.225;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;36620.573;10.334;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32983.009;9.407;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6007.676;9.259;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1196.839;5.342;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29109.732;23.0;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7405.42;22.479;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14668.662;18.37;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8043.405;303.88;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7109.677;5.318;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8076.077;7.479;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4493.79;312.246;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2175.494;5.783;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5230.806;4.989;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2907.457;6.013;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25756.685;6.897;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25220.622;6.221;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22936.788;6.045;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5035.595;9.456;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;24796.518;9.596;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6169.572;13.896;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7414.969;31.794;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3178.309;22.489;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26822.889;5.153;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33960.277;9.201;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6755.508;11.046;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1217.548;6.22;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27400.634;21.459;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7299.771;20.523;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13967.396;18.087;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7390.941;318.378;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7355.132;5.384;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6885.593;6.9;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5046.356;316.428;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2107.853;5.815;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5489.447;4.359;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2430.452;6.433;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23247.045;6.114;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23733.654;6.144;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25491.662;5.84;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4042.494;9.711;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22193.28;9.351;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6498.472;13.215;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6376.141;12.791;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3335.33;40.871;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33534.966;7.352;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;34077.76;9.033;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6519.523;9.239;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1079.233;5.76;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30179.476;22.418;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6630.19;19.275;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13342.975;20.54;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7086.142;196.296;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7266.185;5.16;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7055.169;5.987;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4788.071;312.517;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1847.596;5.771;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4932.613;5.523;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2563.314;6.301;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24297.855;2.428;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24567.63;5.74;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;27487.034;6.325;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4616.182;10.198;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21727.417;8.858;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5815.181;13.091;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6538.73;15.914;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3316.037;20.719;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30484.399;10.277;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33229.009;8.905;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6202.545;9.909;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1058.062;5.285;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30427.444;23.517;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;5998.364;16.891;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13494.853;19.23;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6944.612;230.658;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6835.971;5.681;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7200.599;7.245;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4338.974;214.231;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2084.345;5.9;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4884.271;5.486;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3003.678;6.657;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24551.513;6.127;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;28023.264;6.524;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24824.444;6.818;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4759.6;9.725;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23340.207;9.454;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6592.073;13.939;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6161.862;11.929;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3938.636;21.964;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28904.696;9.951;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30756.422;9.248;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6699.124;10.304;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1214.509;5.518;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28835.706;17.231;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7323.002;20.556;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12573.285;19.598;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7388.962;196.423;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7444.626;6.005;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6788.938;6.254;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4772.059;212.606;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1904.697;5.617;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5747.525;6.12;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2623.818;6.579;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24165.061;6.364;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;26322.52;8.539;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;28773.248;6.614;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5373.786;10.34;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23925.587;9.232;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6251.595;13.014;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6907.149;12.493;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3049.196;23.01;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28237.879;9.551;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31038.585;9.237;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6158.1;10.481;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1140.388;5.471;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;33539.0;23.309;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7764.496;21.112;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14195.767;15.57;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7782.825;196.745;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7446.472;5.655;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6488.041;7.344;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4920.884;214.16;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2010.047;5.393;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4712.767;5.783;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2594.205;6.656;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22287.31;6.418;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22096.111;6.53;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24837.682;5.69;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4042.782;9.998;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;24676.352;9.057;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;8368.557;13.228;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6362.033;12.193;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4020.517;23.379;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27305.391;9.871;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;36586.993;8.413;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;8386.366;9.81;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1150.414;5.919;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29908.054;14.682;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7454.492;20.861;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13029.711;18.569;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7242.307;286.027;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;8053.203;5.697;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7640.606;9.296;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4632.729;218.24;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2832.806;6.116;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4951.319;6.563;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2837.041;6.863;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25458.608;5.877;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24863.857;6.444;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;26956.166;6.381;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4113.264;9.775;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;24063.412;9.404;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6274.696;13.079;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6991.62;12.563;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3095.523;22.947;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30314.867;8.956;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32076.873;9.929;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6242.473;10.388;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1309.167;6.225;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29125.117;15.377;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6972.764;20.085;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14518.113;19.756;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7332.624;195.865;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7200.615;5.417;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7143.874;7.017;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4692.373;373.421;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1865.665;5.672;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5228.211;5.589;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2881.274;6.05;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;27786.826;5.94;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24062.237;6.263;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25477.974;6.853;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4245.605;10.407;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22610.613;4.789;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;7252.068;12.698;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6430.154;12.609;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3744.982;21.551;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30742.149;9.187;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32073.648;8.994;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6734.461;10.477;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1386.728;3.086;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;31239.891;21.868;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7805.74;19.86;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14535.517;19.803;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7230.448;298.429;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7412.712;5.165;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6865.262;6.845;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4938.42;333.947;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2101.113;5.296;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5524.904;5.331;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3010.973;6.881;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25559.971;6.208;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25085.667;6.464;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25079.475;6.146;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4356.321;9.986;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;24063.035;8.835;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6159.106;13.267;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6239.603;12.159;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3515.515;20.966;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28446.947;9.791;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;35587.492;9.122;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;8218.9;10.908;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1235.74;5.851;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;34408.197;23.152;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7534.929;20.843;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;18651.581;17.934;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7632.292;314.688;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6610.071;5.144;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7497.303;6.212;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5261.596;318.354;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1883.588;5.904;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5312.046;6.123;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2830.103;6.245;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;28833.424;6.43;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24940.189;5.737;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25650.288;5.62;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4740.029;9.655;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23183.191;9.214;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6734.295;13.301;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6979.421;15.31;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3999.443;35.067;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33507.986;9.605;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;34839.47;8.649;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;8794.958;10.427;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1159.059;6.03;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30062.893;22.312;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6718.088;19.929;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12939.458;20.627;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6517.26;217.551;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6366.587;5.175;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7339.56;6.278;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4571.054;231.09;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1733.981;5.435;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4862.708;5.689;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2399.98;6.423;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22426.98;6.327;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23523.179;6.248;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23044.408;6.098;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4695.119;9.104;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22868.983;9.13;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5743.661;13.204;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6962.102;45.361;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3757.547;21.909;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26538.846;10.681;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29569.136;9.093;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6831.326;9.823;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1723.692;6.599;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30130.808;16.793;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7367.819;20.264;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13431.177;15.853;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6468.018;190.693;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6606.995;5.687;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7164.691;6.762;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5694.199;319.609;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2583.261;5.349;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4915.63;4.886;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2599.723;6.492;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24107.5;6.214;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24618.788;6.826;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23043.861;6.876;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4704.438;10.121;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21876.559;9.024;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6339.845;14.081;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7039.245;18.934;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3494.666;24.149;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27276.617;10.171;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29107.729;9.445;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6741.78;10.485;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1150.775;6.123;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29231.671;15.487;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7176.855;20.589;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13410.218;17.861;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6406.452;190.723;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7140.32;5.752;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7514.798;5.164;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4852.842;319.3;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1881.005;5.697;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5833.154;5.366;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3157.409;5.804;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24377.606;4.281;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25154.751;6.589;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23202.923;6.248;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4655.511;10.0;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21847.09;8.856;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6378.042;14.098;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6654.569;35.554;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4472.001;22.462;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25920.457;9.777;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;34019.81;9.644;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7268.048;10.134;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1429.591;5.949;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30107.439;23.073;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7369.04;21.118;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13474.809;17.788;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6597.947;204.465;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6422.161;5.564;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7371.37;6.483;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4848.349;322.813;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1901.218;5.588;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5788.736;6.077;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2874.917;6.654;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23546.393;6.517;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;26045.087;5.857;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24168.736;6.388;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5019.131;10.547;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22812.297;9.203;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6826.903;13.518;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7246.624;18.561;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4248.102;21.597;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29944.528;10.35;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29802.494;9.843;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6699.524;9.621;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1479.503;5.805;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28785.028;23.807;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7231.737;19.43;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14316.624;17.073;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6444.994;192.747;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6677.865;5.963;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7337.999;6.789;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4832.333;322.061;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1895.236;5.066;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5633.76;5.467;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2938.892;6.502;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22775.557;6.553;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23975.368;6.399;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23714.332;6.852;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4397.954;9.752;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20762.695;8.359;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6020.853;12.579;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6309.98;20.085;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3719.556;22.433;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25199.572;8.833;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31489.81;8.865;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6217.281;10.235;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1196.452;2.409;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28216.334;21.378;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7040.003;20.842;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12771.974;14.445;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6406.695;194.353;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6287.852;5.128;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7214.077;6.728;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4256.272;316.55;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1859.328;5.837;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4684.042;5.762;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2632.371;5.952;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;21975.53;5.427;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23291.844;5.868;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25814.822;6.151;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4698.989;8.141;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;25703.131;9.972;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6241.822;12.861;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6367.989;17.57;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3537.078;21.408;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25666.311;10.026;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29575.735;9.012;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6243.297;10.701;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1103.835;5.922;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26581.451;22.628;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7004.412;19.288;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12934.271;17.789;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6400.214;196.196;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6309.652;5.663;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7121.993;6.706;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4496.666;325.643;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1878.654;5.322;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5668.257;4.812;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2569.416;6.645;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22170.522;3.057;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22935.16;5.723;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23373.831;5.674;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4609.246;10.523;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22454.167;8.978;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5773.507;13.457;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6173.028;19.033;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4039.645;21.381;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25426.425;9.752;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29975.75;9.042;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6903.811;10.806;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1202.287;6.233;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26867.356;14.416;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7562.715;19.535;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12973.052;18.437;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8441.235;286.882;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7422.005;5.854;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7055.381;6.23;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4465.955;319.536;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2642.715;5.714;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5506.196;5.927;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2710.2;6.005;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22250.113;2.924;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22621.318;6.229;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23195.544;6.125;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5129.704;10.28;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22422.552;8.841;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6525.184;13.075;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6223.344;21.821;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3920.709;21.277;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26404.878;9.357;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29565.373;8.954;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6509.32;9.999;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1195.371;6.048;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26710.753;22.789;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7205.845;20.17;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13910.308;23.353;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7270.968;196.31;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7294.52;5.23;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7344.122;6.747;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5419.296;320.175;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1880.364;5.971;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4758.112;2.986;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2986.253;5.979;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22014.957;2.983;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23301.978;6.555;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23624.785;6.243;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4924.225;9.901;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22819.057;6.591;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5984.73;13.277;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7253.638;20.035;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3169.531;21.655;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25661.86;5.232;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28985.42;8.972;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6649.59;10.001;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1183.505;2.85;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26700.611;22.497;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7727.721;20.258;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13798.208;20.14;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7136.707;285.863;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6292.227;5.644;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7113.701;6.712;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4340.592;318.047;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1826.162;5.939;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5482.369;5.815;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2636.777;6.269;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22345.478;5.572;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22969.933;6.221;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;27123.549;5.883;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4306.272;11.053;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21712.754;4.735;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5659.801;13.845;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6643.809;19.131;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3630.715;21.502;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26673.858;9.371;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30493.357;8.546;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6470.846;10.5;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1305.001;3.081;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29121.605;23.272;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6974.776;20.321;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12873.353;17.681;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6436.866;194.672;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6329.039;5.698;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7157.127;6.687;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4223.244;322.277;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1878.318;5.846;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4694.455;5.614;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2659.233;6.063;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23248.408;5.816;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23171.052;6.55;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23125.122;5.935;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4981.981;10.186;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22141.754;8.959;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5889.416;13.344;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6190.772;19.9;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3540.419;20.81;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25537.834;9.789;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32710.56;9.289;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6948.266;10.885;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1173.436;5.662;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29538.024;22.655;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7264.114;19.762;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13681.317;20.815;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7191.825;199.622;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7710.714;5.705;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7211.439;7.612;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4461.382;320.059;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1964.685;5.389;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6094.125;3.901;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3294.117;8.083;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23948.671;6.402;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22707.232;6.072;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22921.473;6.708;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4355.178;7.601;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20822.465;9.057;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5805.088;13.682;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6111.882;18.314;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3966.906;20.36;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25428.342;10.083;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29635.95;9.328;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6726.427;10.403;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1067.234;3.008;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27462.058;22.265;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6867.027;19.863;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13507.564;16.538;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6439.777;192.601;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6690.277;5.248;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6992.333;6.767;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6411.263;318.128;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2594.157;6.016;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5680.712;5.107;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2831.051;7.199;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23692.363;6.149;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24418.177;6.349;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24946.512;6.127;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4575.972;10.284;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20938.024;12.097;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6910.872;13.511;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6372.043;20.173;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4084.581;22.48;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27484.403;11.047;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30141.466;9.675;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6803.943;10.061;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1167.933;6.278;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27532.388;23.411;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8494.436;19.103;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13990.008;19.839;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7364.26;193.143;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7450.772;6.347;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7447.159;6.257;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4823.285;313.505;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2796.389;5.979;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4690.389;5.778;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2832.757;6.5;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22466.552;5.885;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24559.079;6.093;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23365.804;6.369;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4908.082;10.599;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21454.581;9.398;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6115.954;12.763;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6260.542;19.314;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3417.843;20.175;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26450.399;6.888;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30184.995;8.638;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6441.452;10.22;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1074.698;6.045;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26844.755;22.079;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6889.726;20.337;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13045.406;18.567;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6474.739;195.297;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6282.444;5.415;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7178.24;6.904;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4393.219;319.479;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1886.339;6.024;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4682.726;5.158;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2717.77;5.98;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23203.845;2.87;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23176.861;6.041;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23237.705;6.502;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4216.119;10.525;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21991.911;9.003;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6119.878;13.475;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6929.735;19.16;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4150.66;21.457;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25898.941;9.704;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29245.411;9.351;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6510.092;11.042;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1295.267;5.489;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27061.861;14.446;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7281.364;20.332;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14413.796;17.841;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7932.668;286.108;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7425.626;5.341;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7113.329;6.839;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4438.935;315.805;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2040.083;5.73;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5572.551;5.729;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2880.827;6.386;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24119.572;3.295;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23226.387;6.427;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25605.215;6.292;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4098.981;10.868;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21036.225;8.95;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6139.769;13.856;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6263.221;18.811;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4106.336;21.529;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25996.603;9.684;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31980.039;9.14;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7123.144;11.113;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1213.414;5.838;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27117.057;22.243;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7106.974;19.554;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13028.395;18.043;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6614.364;194.684;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7120.653;5.464;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7910.527;6.89;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4866.382;317.088;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2063.769;5.95;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4798.3;5.483;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2759.149;6.626;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22615.467;5.953;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25302.276;6.413;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23397.837;6.16;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4719.453;10.228;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21925.827;9.63;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5864.314;14.353;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6952.966;19.942;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3999.21;21.571;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29124.163;10.255;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32277.556;8.866;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6893.039;11.607;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1486.366;5.589;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27937.484;22.894;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7470.721;20.662;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14440.184;16.854;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7880.713;284.176;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7444.934;6.071;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8188.89;6.33;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4343.583;319.479;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2890.666;5.403;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4690.918;5.89;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3239.489;5.919;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23440.876;6.176;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23973.505;6.732;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25654.198;6.22;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4523.323;10.238;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22677.348;6.594;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6879.807;14.49;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6533.69;19.431;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3841.941;21.173;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26615.546;9.27;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29555.198;9.795;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6537.204;10.368;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1059.802;5.548;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29327.62;21.747;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7078.09;20.746;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13171.814;17.205;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7203.351;194.026;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7219.136;5.122;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7560.825;6.836;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4947.636;320.186;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2048.523;6.901;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5616.251;6.319;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2685.346;6.177;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22941.39;5.606;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23195.811;6.649;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25295.037;5.962;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4078.302;10.176;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20744.093;8.868;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6118.94;13.092;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6455.343;20.439;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3258.756;21.525;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26180.048;5.325;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29104.042;9.208;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6882.935;9.989;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1669.099;5.5;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29647.471;22.695;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7228.929;20.602;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13291.118;19.052;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7918.269;281.368;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7608.442;5.848;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6952.048;6.691;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4291.619;318.479;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1698.223;5.895;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5140.367;3.019;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2475.315;6.638;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23730.033;6.069;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23615.738;5.978;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24522.152;5.639;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;3818.148;10.505;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20809.112;9.292;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5921.632;14.706;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6055.634;18.088;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3821.988;20.866;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25751.558;9.825;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31801.372;9.656;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6455.878;10.741;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1323.758;6.046;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28764.206;22.759;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7100.113;19.837;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14117.522;18.943;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7210.735;197.528;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7170.35;5.807;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7054.665;6.805;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4890.236;320.125;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1900.064;6.016;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5312.483;3.889;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2619.257;6.022;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22950.865;6.109;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24054.624;6.572;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23501.314;6.306;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4734.454;10.384;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21467.412;8.349;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5857.105;13.651;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6378.442;18.166;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3993.12;19.393;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26015.56;10.142;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32272.961;9.297;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6820.115;10.475;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1191.785;5.852;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30682.326;22.902;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7426.121;20.609;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12952.205;19.906;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8208.798;286.445;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7840.229;6.479;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7448.898;7.016;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;7069.724;321.628;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2994.469;5.884;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5551.198;5.742;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2873.745;6.697;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24939.725;6.138;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25023.021;6.238;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25589.342;6.396;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4844.468;10.923;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23037.413;9.971;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6163.227;13.378;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6492.203;19.826;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3908.042;20.945;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28944.396;10.411;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32799.984;9.479;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7285.786;10.873;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1228.828;5.801;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29035.909;23.966;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7544.932;20.646;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13446.812;18.524;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7394.598;203.97;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7084.565;6.413;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7485.32;6.855;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4797.725;321.807;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2057.633;5.943;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5456.766;5.627;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2770.16;6.132;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24485.594;3.884;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25781.301;3.117;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25810.336;6.429;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5198.768;10.504;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21445.876;4.932;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6388.343;14.671;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6441.029;19.898;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4115.99;21.839;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28997.607;10.35;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32509.101;9.679;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7011.023;10.957;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1759.613;6.142;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27127.715;19.553;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7785.876;20.517;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14313.912;19.622;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6626.246;209.234;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6757.911;5.437;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7118.911;6.939;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5965.914;318.976;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2864.77;6.013;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5449.412;5.77;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2692.548;6.612;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24716.544;6.405;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24997.514;7.151;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25065.153;7.166;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4732.403;10.815;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22330.605;4.959;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6227.77;13.938;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6120.244;20.75;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4320.694;22.534;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28999.991;10.123;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30644.383;9.585;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6900.352;11.267;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1539.176;3.875;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27826.604;26.395;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8361.763;20.439;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13310.755;17.6;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6449.8;197.594;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7484.833;5.913;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7267.569;6.307;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5759.471;327.371;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1909.698;5.923;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5625.423;5.718;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2955.719;6.52;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23278.392;6.091;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24265.636;6.134;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23942.608;6.146;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4701.057;9.849;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22617.198;9.661;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6092.732;13.403;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6186.819;19.548;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4042.073;20.357;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26397.209;9.709;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29315.377;8.898;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6910.941;10.06;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1068.766;5.63;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29403.499;21.948;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8222.374;20.086;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13275.864;17.599;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7403.589;286.634;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7131.0;4.577;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7505.795;6.544;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6233.861;327.025;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2531.773;5.591;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4751.234;5.599;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2853.124;6.517;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22159.454;6.1;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22844.27;6.227;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22917.301;5.6;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;3858.829;9.98;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20329.427;9.24;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6372.264;13.277;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6244.063;19.13;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3949.536;21.234;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25656.198;9.897;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29583.23;9.091;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6730.194;10.675;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1554.897;6.021;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27217.303;19.355;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6955.377;20.277;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13925.243;16.979;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7025.818;286.524;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6346.001;5.31;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6334.78;7.131;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4055.633;212.427;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1870.913;5.927;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4717.04;5.784;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2602.887;6.629;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22355.842;6.135;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23341.619;6.218;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24433.42;6.411;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4396.075;10.257;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20645.08;4.876;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6130.279;14.216;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6230.083;18.42;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3558.963;20.361;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26119.843;6.756;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31080.575;9.356;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6818.836;10.667;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1325.494;5.589;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26856.942;22.968;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7334.132;21.48;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14023.619;21.474;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7800.823;285.299;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7014.828;5.676;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7605.267;6.783;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6214.967;319.331;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2888.898;6.06;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5832.681;5.424;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3132.656;5.985;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23208.059;5.638;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25225.423;5.833;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24595.588;6.685;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4877.15;9.675;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22631.141;9.595;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;8376.587;14.224;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6295.678;18.385;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3912.799;20.533;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28941.448;6.175;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30589.715;9.506;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6363.145;10.153;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1373.404;3.145;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29558.027;22.454;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7309.136;20.533;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14125.375;18.106;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7534.491;195.617;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7440.269;6.273;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6755.05;6.488;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6971.133;318.134;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2083.814;6.614;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5513.835;3.896;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3011.431;6.695;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22158.708;5.213;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22556.547;5.856;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23372.574;5.727;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4484.546;10.017;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21693.429;9.246;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6142.676;14.304;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6041.131;18.855;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3814.387;21.154;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28611.898;6.569;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29133.535;9.529;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7018.363;10.289;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1332.568;6.069;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27430.17;23.627;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7581.347;21.351;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13012.179;18.683;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6453.051;196.3;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6262.669;5.718;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6364.568;6.639;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5184.843;315.555;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2033.397;5.552;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5411.668;6.554;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2930.117;5.907;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22410.815;5.707;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25127.801;4.45;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24789.308;6.715;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;3873.634;10.266;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21746.244;8.837;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6413.737;14.566;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6204.203;19.164;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3710.615;20.494;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25440.724;9.963;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32335.971;9.214;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6590.83;11.045;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1317.956;6.913;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29791.516;23.494;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7531.188;21.308;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13083.326;19.522;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6455.943;193.011;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7535.937;5.197;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7026.976;6.785;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4926.109;321.17;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2025.848;6.061;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5321.065;4.829;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2960.093;6.589;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22223.147;6.364;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23410.213;6.623;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23126.542;6.322;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4555.795;10.589;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22003.141;9.368;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6022.172;14.165;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7167.58;19.316;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3185.734;21.534;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28981.339;5.16;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30362.448;9.524;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6422.723;10.508;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1064.798;3.174;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27544.687;23.249;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7455.983;20.231;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14718.375;19.848;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6394.695;200.642;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6371.885;5.398;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7194.502;6.482;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4922.427;318.083;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2037.771;6.005;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5538.821;5.883;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2606.893;6.1;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22279.89;6.666;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22814.94;6.141;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23049.469;6.279;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4314.065;10.685;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21663.2;9.676;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5738.835;13.187;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6177.702;20.7;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4035.843;20.63;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28163.55;10.107;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30912.279;10.054;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6880.538;10.102;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1196.998;5.649;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26562.961;22.542;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7001.513;20.352;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14098.613;19.937;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7034.584;286.429;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6342.413;6.014;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7194.184;6.884;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4526.897;315.853;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1982.685;5.546;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5697.277;5.198;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2602.075;6.44;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;21959.327;6.183;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23550.591;6.303;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23186.456;5.793;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4657.538;9.828;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22541.09;9.087;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6403.678;13.418;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6132.726;19.578;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4237.121;21.175;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26303.658;6.016;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29898.43;9.409;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6980.793;10.438;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1173.339;4.227;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30691.502;25.328;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7359.141;21.807;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13418.17;18.503;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7198.384;193.609;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7759.833;5.815;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7274.175;7.218;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4791.516;316.584;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1995.545;5.99;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5552.292;5.311;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2656.504;6.114;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24181.305;6.341;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23331.149;6.593;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25244.159;6.33;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4607.272;10.104;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22717.475;7.602;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6954.199;14.455;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6154.401;19.263;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4538.631;21.074;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29028.437;9.637;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29480.993;9.327;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7059.216;10.402;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1336.183;5.929;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28866.763;23.602;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7453.16;21.257;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13374.829;18.556;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8059.214;284.24;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7616.654;5.306;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7359.889;7.045;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4700.731;319.055;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2029.44;5.793;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4900.315;5.334;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2584.306;6.006;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24262.113;6.079;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23509.373;6.944;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25229.114;6.611;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4841.175;10.682;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22938.394;9.606;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5987.741;13.669;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6404.752;16.105;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3871.378;21.111;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28130.978;6.57;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31257.255;10.011;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6960.114;9.557;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1308.098;6.117;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27218.421;15.887;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7087.654;20.293;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14986.779;19.311;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7094.592;284.156;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6328.85;5.595;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7132.931;6.328;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4396.469;317.9;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2687.037;5.49;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4728.173;5.196;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2870.223;6.586;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22254.692;2.697;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23750.209;6.225;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24820.798;6.106;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4483.937;10.939;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21661.344;4.912;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6078.912;17.599;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6177.947;18.652;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4251.015;22.757;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26196.936;11.246;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29596.659;9.546;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6788.789;10.336;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;952.605;5.719;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27608.718;14.534;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7544.191;20.284;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14242.063;17.847;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8002.431;193.617;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7190.617;5.818;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7124.857;7.101;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4472.215;321.497;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2047.834;6.142;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5651.735;5.728;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2672.078;6.354;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22126.809;3.073;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25635.44;5.684;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24577.537;6.562;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4781.431;10.101;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22233.009;9.702;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5809.987;13.213;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6251.537;20.746;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3469.245;21.821;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27051.317;9.44;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29915.261;9.658;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6419.649;10.549;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1315.535;5.574;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27666.172;23.707;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7083.823;20.071;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14033.159;19.835;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7336.8;286.639;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6360.477;5.53;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7136.691;6.329;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4359.062;322.425;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2538.655;6.105;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4725.74;5.807;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3041.43;6.623;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22362.562;6.605;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23603.062;6.475;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23781.653;6.257;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4649.034;9.881;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23047.035;9.158;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6499.902;13.74;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6278.063;19.354;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3620.956;21.215;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26352.271;9.597;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29977.989;8.875;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7297.226;11.024;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1180.102;3.477;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28035.254;15.758;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7270.688;19.989;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13278.668;17.057;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7945.295;197.602;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7503.18;5.749;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8148.618;6.132;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4456.754;317.778;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1879.287;6.014;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5222.481;5.166;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3115.976;5.965;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23533.53;6.421;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23765.941;6.232;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25545.269;6.282;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4142.024;10.955;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21169.863;9.791;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6106.654;13.552;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6097.501;17.85;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3147.028;21.036;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27864.391;9.865;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29405.845;9.134;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6972.762;10.284;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1217.106;5.9;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26837.199;16.203;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7233.366;20.279;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12821.502;17.379;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7180.558;198.738;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7038.319;5.61;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7162.078;6.739;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4377.419;322.6;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1697.88;5.526;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5251.82;3.585;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2350.636;6.152;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;21884.252;3.04;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22388.806;6.01;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23423.222;5.645;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4326.569;10.153;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20825.146;8.999;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5602.999;13.563;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6158.894;17.349;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4001.4;21.266;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25484.84;6.157;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28929.981;8.996;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6429.962;10.25;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1059.756;5.36;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27067.912;14.383;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7498.548;20.212;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12871.084;11.683;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7039.762;285.928;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7467.941;5.768;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7389.387;6.153;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4704.659;317.663;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1934.895;6.771;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6325.927;2.91;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2964.472;6.911;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22589.693;5.877;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23981.08;6.31;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23322.136;6.207;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4889.269;9.675;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20665.521;9.192;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6186.816;13.644;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;8024.218;13.339;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4478.593;18.086;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26674.04;7.553;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30466.792;9.371;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6967.617;10.257;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1218.17;4.174;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27766.784;23.039;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8424.538;19.212;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12894.157;18.321;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7239.669;196.761;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7563.8;5.751;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7171.832;6.55;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4558.432;324.779;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2831.036;5.963;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4737.048;5.729;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2933.384;6.269;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22958.193;6.184;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;26118.289;6.736;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22935.141;5.863;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4834.77;10.426;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21953.415;9.294;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6294.584;13.572;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6484.902;31.615;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4075.717;20.12;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27429.34;11.119;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32469.884;8.938;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6569.095;11.269;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1177.533;6.209;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27924.282;22.979;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7426.151;20.064;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13348.013;20.205;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6933.179;192.593;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6333.85;5.327;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7423.042;6.766;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4588.48;321.731;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2062.569;5.83;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5653.328;5.381;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2704.047;7.418;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23848.083;6.188;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23866.121;6.283;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25259.586;6.086;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4938.955;11.02;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21218.272;9.21;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5840.239;14.301;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6628.497;19.861;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3794.187;20.83;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27597.693;10.49;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31935.078;8.708;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7063.426;10.687;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1187.666;5.735;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26692.145;22.69;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6939.88;20.158;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13784.248;15.98;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7190.947;193.49;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7689.806;5.274;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7145.461;6.951;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4704.836;317.8;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1905.249;5.758;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5361.232;3.659;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2726.364;7.378;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24605.292;5.811;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22994.675;6.948;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23771.62;6.686;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4480.11;10.549;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22084.579;9.589;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6726.846;12.846;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6147.083;19.254;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4017.311;20.743;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26012.74;9.74;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32255.022;9.49;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7395.305;10.258;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1325.548;5.59;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27090.617;22.125;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7082.599;20.28;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12966.819;16.493;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6405.419;195.203;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6430.834;5.56;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7411.458;6.901;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4723.546;318.051;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1863.027;6.132;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5598.763;5.99;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2708.468;6.146;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22433.955;6.251;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24436.164;5.81;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23614.465;6.515;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4453.354;10.339;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22884.709;9.317;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6587.576;13.48;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6542.179;18.661;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4087.573;20.941;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25822.58;9.696;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29397.093;8.751;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6889.325;10.205;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1059.928;5.299;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27730.282;23.364;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7482.975;19.912;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14966.871;17.408;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7229.522;190.718;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7788.473;5.495;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7136.087;6.68;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6045.004;318.003;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2109.227;5.845;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5348.364;4.809;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2457.056;6.648;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23343.955;5.684;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;27052.554;6.394;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24070.258;6.754;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4721.214;9.508;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22032.29;9.07;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5356.562;13.641;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6312.717;19.93;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3531.947;20.264;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26176.186;10.203;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30969.923;11.289;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6493.948;11.184;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1058.547;4.14;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26567.79;22.801;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7272.34;20.375;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14015.286;16.862;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7123.619;196.476;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7460.607;5.854;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7114.996;6.808;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4421.679;317.471;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2112.801;5.44;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5433.428;5.841;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3077.633;6.038;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22230.13;4.227;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23854.364;6.283;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23954.123;6.259;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4651.083;9.964;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21895.192;4.901;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6240.809;14.039;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6067.505;18.72;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3601.532;21.62;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27694.225;10.249;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31504.281;9.848;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7055.634;10.335;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1140.31;5.683;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26590.715;21.361;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6975.924;20.06;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13135.281;17.917;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7086.444;200.712;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7417.643;5.587;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6981.773;6.824;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6004.693;315.801;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2803.55;5.293;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4870.828;5.357;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2560.861;6.063;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22477.178;5.803;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23044.184;9.5;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22653.412;5.68;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4631.798;9.712;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22710.761;4.874;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6435.398;14.056;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6087.918;20.659;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4014.522;20.951;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25351.791;9.418;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29175.428;9.471;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7089.196;9.699;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1719.494;6.196;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30035.812;18.865;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7350.39;22.82;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14145.87;20.36;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7314.303;195.715;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7777.069;5.916;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;6997.384;7.044;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4705.029;323.897;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1992.252;5.914;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6334.667;5.821;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2904.918;6.934;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23927.209;3.117;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22684.408;6.822;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22756.672;6.567;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4920.73;10.597;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21005.841;8.743;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5367.359;13.865;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6358.486;19.139;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3424.271;21.07;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29120.084;10.41;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29296.701;10.161;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6997.16;10.288;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1189.275;5.532;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28786.851;24.345;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7103.373;21.047;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14494.925;17.445;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7389.236;285.582;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6661.016;5.67;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7180.135;6.75;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4859.239;316.269;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1999.954;5.648;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4901.091;5.748;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2426.172;5.991;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24209.956;5.844;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23790.149;7.039;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25264.812;5.864;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4885.327;10.932;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23940.411;8.807;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;8710.708;14.575;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6491.958;18.946;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3810.792;22.713;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28315.026;9.599;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29501.665;9.291;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6794.233;10.541;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1182.442;6.159;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27958.355;22.425;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7609.431;24.591;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14949.299;19.691;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7445.794;205.995;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6758.008;6.078;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7346.121;6.832;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5419.188;318.202;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1881.447;5.318;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5519.377;5.589;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2991.722;6.321;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24253.56;6.177;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23216.982;6.88;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25328.997;6.122;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4581.716;10.469;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22381.052;9.043;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6364.362;14.13;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6344.685;19.85;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3860.913;19.775;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25679.689;9.14;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30556.134;9.447;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6788.759;10.74;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1205.473;3.248;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26502.214;23.023;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7394.551;19.653;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;15153.503;19.963;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7242.576;195.962;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7486.148;6.016;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7029.488;6.742;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4612.679;321.989;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1865.168;5.442;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4683.087;3.818;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2650.404;6.098;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22146.293;6.629;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24327.417;6.324;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23134.112;6.734;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4504.671;10.176;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21312.729;8.458;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5960.438;13.158;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6152.824;19.589;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3854.074;20.499;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28387.128;9.618;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29317.075;9.13;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6762.937;9.68;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1178.357;5.836;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29857.229;23.607;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7235.447;21.876;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13368.925;19.797;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7090.119;285.362;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7824.675;5.864;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7154.484;6.766;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4688.764;319.689;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1725.318;5.379;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4941.945;2.942;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2521.567;6.097;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22044.945;3.102;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24973.869;5.809;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23169.918;6.71;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4541.784;10.664;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21235.066;9.236;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6347.218;14.157;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6389.619;19.836;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3673.04;20.186;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29483.791;10.883;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29478.803;10.029;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7130.743;9.752;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1060.309;3.254;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26537.805;17.587;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7213.919;19.694;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12912.532;17.151;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6408.078;196.919;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7817.624;5.773;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7494.752;6.447;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4976.777;323.837;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2074.925;6.714;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5289.289;3.844;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2817.812;6.594;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24738.412;6.573;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24242.781;7.047;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25507.077;6.674;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4972.709;10.78;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23107.602;9.19;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5796.483;14.34;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6974.967;20.819;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4542.509;22.699;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27032.364;9.246;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32081.844;8.955;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7082.642;10.814;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1762.041;6.228;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28358.378;14.337;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7510.38;20.113;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14285.403;18.915;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7403.417;198.522;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7507.339;5.549;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7497.928;7.712;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4985.443;325.31;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2121.444;6.655;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5866.196;6.074;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3198.005;6.736;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24842.969;3.427;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23156.069;6.376;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23772.296;6.072;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4770.597;10.285;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21276.307;9.011;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5687.076;13.871;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6271.659;19.19;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4111.321;25.636;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26679.807;10.118;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29406.988;9.309;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6251.039;10.158;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1710.443;6.165;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26987.859;16.291;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7412.79;19.746;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13988.512;19.566;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7356.304;192.957;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7490.028;5.814;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7832.386;6.41;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4881.387;321.884;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1881.492;5.411;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4738.965;5.749;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2592.674;6.054;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22087.984;6.111;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22682.517;6.229;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23817.988;6.142;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4610.077;10.402;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21547.863;9.014;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5515.706;12.88;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7058.708;19.292;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4443.54;20.925;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28435.642;8.561;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30669.773;9.59;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6933.174;10.404;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1166.65;3.127;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27355.581;23.255;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7709.282;18.501;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14001.934;19.898;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6528.473;194.991;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6418.848;5.693;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7326.792;6.834;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5814.735;325.728;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1868.274;5.897;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5406.454;4.826;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2868.063;5.537;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23933.37;3.162;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24213.98;6.5;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25216.08;7.069;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4767.193;10.528;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22711.124;9.13;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5819.809;13.822;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6392.134;19.398;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4109.975;20.193;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27168.835;10.513;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32098.832;8.934;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6532.993;11.271;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1338.005;3.153;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29391.687;16.42;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7300.122;20.602;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13501.837;20.934;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6457.38;191.905;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6631.437;5.727;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7456.82;6.774;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4954.907;320.616;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2452.121;5.984;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5994.107;6.209;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2893.639;6.594;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24162.24;6.192;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23096.886;6.317;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25031.656;6.119;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4672.446;9.779;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22418.364;9.613;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6032.782;13.185;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6356.081;19.923;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4137.978;21.813;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28015.883;10.682;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30307.039;9.704;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7008.594;10.424;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1559.387;5.506;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29910.621;23.475;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7610.816;21.075;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;15808.133;18.933;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8043.456;294.529;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7138.24;6.447;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7411.403;6.887;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4826.624;318.957;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1814.505;6.181;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4885.242;6.518;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2770.057;6.655;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24201.762;3.172;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23209.26;6.683;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25237.17;6.093;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4833.337;10.831;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21492.299;6.774;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5970.769;14.535;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6376.076;18.998;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3708.097;20.913;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26129.456;8.847;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30023.127;9.372;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6620.037;10.027;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1195.38;6.835;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29514.02;21.998;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7376.001;21.577;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;15227.594;19.954;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7231.418;287.042;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6744.736;5.75;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8361.091;7.03;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5003.016;318.601;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1856.603;5.815;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4977.097;3.119;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2753.712;6.686;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24595.325;6.2;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25215.223;6.484;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24601.91;2.212;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4933.671;10.15;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21749.327;11.501;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6023.115;14.61;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6065.164;16.017;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3814.592;20.705;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26101.394;8.36;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33061.126;9.268;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6219.443;10.476;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1202.605;3.067;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26591.213;21.182;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8159.028;19.923;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12939.18;18.698;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7365.217;194.966;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7090.953;5.294;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7509.926;6.358;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4584.174;319.397;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2083.776;6.604;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5631.392;5.808;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2704.41;7.541;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23461.387;6.811;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25421.697;6.345;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23136.774;6.459;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5045.835;9.834;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;24201.357;8.781;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6738.095;13.906;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6904.019;19.16;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3636.323;21.045;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28718.629;10.016;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29855.055;9.675;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6951.695;9.966;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1060.413;5.936;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28838.549;14.28;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7301.75;21.857;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13921.881;18.19;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7822.801;194.444;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7711.872;5.742;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7393.368;7.606;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4665.747;322.993;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2112.777;5.933;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4904.897;5.829;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2770.387;6.196;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24341.138;6.084;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22834.548;6.437;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25286.65;6.282;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4024.132;10.058;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21487.062;6.646;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5997.342;13.706;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6421.178;20.079;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4695.776;21.606;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28152.225;10.994;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31275.411;9.503;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7046.278;10.135;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1858.264;6.312;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28313.781;23.356;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6895.415;20.106;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13959.152;17.401;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6409.31;196.485;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7021.857;5.257;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7117.396;6.728;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4769.27;325.783;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1847.027;5.698;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5043.122;3.107;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2545.865;6.364;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22150.259;6.578;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22620.098;6.792;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23436.917;6.099;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4019.102;10.688;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21803.208;8.682;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5671.435;13.779;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6005.577;18.843;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3655.178;20.476;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26065.037;10.175;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29452.834;8.66;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6542.305;10.675;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1065.922;6.239;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27752.834;14.622;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6981.633;20.637;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12693.074;19.675;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7223.8;194.326;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7463.408;6.204;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8340.318;7.047;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5007.835;213.414;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2749.943;6.076;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5671.952;6.028;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2917.461;5.971;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23772.321;6.013;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22959.766;6.151;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25119.336;5.968;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4393.579;10.253;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21636.217;9.224;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6033.888;13.504;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6297.19;18.908;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3795.667;22.74;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27497.873;9.519;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31338.728;9.519;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6956.213;9.718;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1320.024;5.511;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28551.033;23.521;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7153.912;20.828;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14141.901;22.038;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7277.182;201.56;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6760.37;5.892;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7986.186;6.407;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5598.692;317.111;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2833.953;5.676;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4888.481;5.335;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2601.575;5.538;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24112.38;6.286;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23527.095;6.229;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25123.594;6.329;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4262.724;10.068;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22907.137;8.946;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6203.086;13.511;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6414.783;20.359;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4494.256;21.139;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27750.917;11.35;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29740.339;10.029;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6845.433;10.417;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1761.862;5.879;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28867.36;24.113;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7223.659;20.747;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12968.024;19.915;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7049.97;288.42;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7316.549;5.683;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7029.665;6.247;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;6519.22;331.986;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2086.03;5.915;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;7442.49;6.486;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3095.644;5.966;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23484.095;6.483;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23710.255;5.845;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25117.632;6.548;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4468.88;10.314;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22236.825;4.897;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6955.641;14.286;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6246.79;18.847;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3609.336;20.54;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25709.92;10.218;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29643.111;9.052;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6240.995;9.874;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1213.659;5.97;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26443.425;22.02;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7158.2;19.434;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13284.977;17.671;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7105.944;195.619;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6327.403;5.643;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8683.916;6.782;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4957.633;337.796;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2536.46;5.918;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4936.288;2.741;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2645.414;6.014;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24781.994;4.403;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23248.421;6.368;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23444.4;6.691;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;5324.446;10.443;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21349.16;9.207;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6367.981;13.808;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6797.592;18.894;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3740.127;20.52;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27406.832;10.487;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29847.673;9.602;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6302.491;10.601;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1711.14;6.14;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27702.799;21.943;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7155.432;20.37;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13799.332;16.695;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6430.205;191.92;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7460.906;5.314;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7063.412;6.969;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4738.422;316.377;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1855.741;5.467;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6270.596;5.804;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2757.931;6.326;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24773.046;5.686;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22458.799;6.969;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;26467.475;5.727;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4755.973;11.264;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22461.688;5.283;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5692.236;14.955;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6426.052;19.657;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3856.456;22.194;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27160.863;10.115;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29402.059;9.461;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7107.671;10.955;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1330.955;5.884;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29170.551;16.83;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7206.625;20.234;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13172.042;17.378;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6437.481;191.775;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6651.743;5.496;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7054.573;7.539;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4800.289;315.49;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2027.256;5.728;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4842.282;5.256;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2667.308;6.598;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23957.736;6.207;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22701.932;6.12;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23437.019;6.6;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4659.578;10.369;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22590.649;6.62;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6303.34;15.047;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6290.287;18.585;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3982.125;20.98;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27332.5;9.685;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;33143.894;9.221;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7555.063;9.909;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1304.855;5.994;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29261.998;22.917;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7306.789;22.013;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14842.826;18.069;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7902.324;293.924;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7423.294;6.168;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7176.938;7.147;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4787.835;318.951;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2035.479;6.175;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4863.468;6.147;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2673.532;6.179;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24008.171;6.169;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24471.268;6.45;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25207.446;6.625;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4861.237;11.671;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21936.087;9.574;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6414.89;14.139;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;8484.427;19.944;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3633.941;22.774;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27442.394;10.696;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31935.252;8.873;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6166.099;10.362;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1330.302;5.916;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26612.45;23.129;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7463.778;20.725;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12921.816;17.801;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6518.398;193.598;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6406.181;5.767;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7341.668;7.344;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4874.74;324.398;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2907.785;5.696;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4692.73;5.796;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2946.23;6.154;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22244.968;6.158;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25378.423;6.297;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23840.345;7.469;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4415.903;10.641;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21404.618;8.911;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5774.995;14.856;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6055.913;22.205;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3671.73;20.646;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25625.153;9.429;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31485.497;9.303;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6903.822;11.032;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1303.52;5.949;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26831.136;22.297;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7552.332;19.285;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13258.841;17.046;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7718.35;286.563;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6311.193;5.375;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7452.875;6.894;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4392.725;212.308;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1885.993;5.693;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4740.039;5.643;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2428.182;6.421;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22049.879;5.996;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22888.347;6.253;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23208.431;5.599;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4628.398;10.069;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21712.59;10.511;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6413.322;13.06;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6342.778;19.44;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4046.786;21.002;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25830.867;7.273;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29457.311;9.052;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6724.461;10.218;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1075.139;3.031;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27261.14;22.935;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;8032.345;19.442;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13945.64;20.577;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7201.755;196.134;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7512.725;6.237;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7115.013;6.472;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4568.859;318.624;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1678.582;5.366;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5573.27;5.924;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2654.612;6.411;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23878.07;5.702;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25026.541;6.33;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23065.467;6.842;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4653.488;10.825;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23260.586;6.43;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6586.131;12.841;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6164.94;22.377;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3058.315;19.87;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28494.565;9.691;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32097.437;10.234;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7057.765;10.95;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1300.947;3.105;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26628.953;23.514;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6891.722;19.83;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14037.947;16.069;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7132.437;285.439;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7179.724;5.479;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7383.733;6.88;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4922.128;315.154;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2075.423;6.786;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;6197.354;5.649;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2839.407;5.975;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24018.29;2.709;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25551.091;6.245;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25228.837;6.377;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4748.645;11.008;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22690.479;5.972;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6461.291;13.841;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6148.799;18.636;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4087.096;21.267;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27635.715;5.252;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;31045.34;9.044;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7060.899;11.802;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1623.63;6.081;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29504.522;24.547;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7064.402;20.589;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13357.281;20.385;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7044.53;283.676;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6847.412;5.6;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7391.34;7.564;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4761.806;332.542;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2066.474;5.95;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5932.401;5.925;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;3064.345;6.443;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24167.295;3.911;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24861.135;6.497;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24827.748;7.146;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4606.083;9.608;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21878.061;8.754;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;8234.583;13.982;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6607.836;19.453;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4234.799;23.131;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26520.07;10.378;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32916.058;9.02;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7098.024;12.058;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1335.124;5.595;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26439.392;14.801;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7496.93;19.416;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13726.661;20.059;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;9037.317;334.475;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6994.829;5.669;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;8377.029;6.686;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4402.599;328.25;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1899.049;6.259;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5383.969;5.363;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2580.231;5.949;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22289.998;6.123;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23391.693;6.295;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23434.526;6.211;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4549.464;10.093;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21733.568;9.29;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6653.661;13.376;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6203.209;20.376;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4162.61;20.907;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27364.41;9.934;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32190.405;9.133;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6830.67;10.299;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1297.302;5.532;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;30279.925;22.882;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7206.458;20.501;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13069.379;18.189;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8048.772;283.471;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7330.363;6.256;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7231.395;6.816;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5990.788;321.715;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1869.772;5.388;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5175.033;4.545;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2928.965;5.917;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22482.072;5.729;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22865.836;5.806;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24851.474;6.134;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;3986.741;10.375;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20640.771;4.9;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5815.62;13.709;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6140.209;18.373;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3949.967;21.636;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29572.912;10.669;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30262.398;9.182;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;7104.083;9.971;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1663.651;5.883;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26739.548;22.003;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7354.674;19.519;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14820.81;17.661;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7978.468;285.816;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6985.469;5.43;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7479.925;6.827;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4675.653;318.118;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1862.632;5.683;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5599.872;5.719;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2536.194;6.147;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22003.72;6.695;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23955.761;6.346;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25700.426;6.261;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4915.177;10.152;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;21972.384;9.383;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5736.747;13.407;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6210.443;18.754;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3444.767;20.032;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28824.612;9.862;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29822.381;9.527;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6902.171;10.441;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1193.909;3.106;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27166.796;23.08;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7356.815;20.169;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14179.958;20.278;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8034.659;290.131;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7751.388;5.863;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7324.503;6.875;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4314.137;215.595;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1684.585;5.904;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4917.975;5.557;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2433.748;6.693;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22103.191;3.119;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25166.428;6.156;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24028.565;7.017;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4883.127;9.899;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20755.141;6.475;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6089.714;13.302;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6442.812;20.13;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3777.933;21.518;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;28068.435;9.085;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;32459.627;9.56;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6219.333;10.608;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1150.354;3.03;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26597.302;22.807;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6947.525;21.131;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12843.854;16.993;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6792.903;195.356;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7477.669;5.682;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7041.085;7.112;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4389.915;321.536;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2009.032;5.706;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4705.632;5.797;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2739.379;6.657;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23571.49;5.994;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24076.439;6.069;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23581.942;5.586;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4443.816;10.993;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22653.35;6.279;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6177.77;13.104;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;8123.555;18.903;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3526.074;20.252;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;25606.398;5.041;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29341.331;9.536;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6205.851;10.683;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1063.415;3.015;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26538.771;14.355;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;6851.914;19.907;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13265.654;17.231;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;6466.377;195.648;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7520.313;5.737;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7447.002;6.565;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4960.708;317.036;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2569.746;6.666;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4880.661;5.856;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2733.052;4.092;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22541.8;6.015;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24798.264;6.002;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23047.879;6.778;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4360.483;10.184;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20946.47;8.693;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5610.315;13.501;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7216.685;16.166;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3876.335;22.207;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26161.861;6.808;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30279.641;9.845;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6726.376;10.093;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1203.617;3.039;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;29095.879;22.59;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7119.531;21.428;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13108.604;18.076;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7172.023;191.434;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7596.129;5.638;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7271.487;7.527;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4394.813;215.667;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1839.787;5.822;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4876.164;5.647;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2480.423;6.001;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23548.239;6.171;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22600.762;6.94;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24878.584;6.324;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4018.624;10.627;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22027.501;9.848;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5336.4;13.638;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;7479.376;19.481;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3572.289;20.916;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26624.692;10.394;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30079.551;9.438;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6785.978;10.292;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1061.963;3.948;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27710.224;15.933;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7221.88;19.461;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;12836.658;17.861;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7337.866;192.2;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7662.0;6.459;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7439.901;6.327;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4929.392;314.768;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2080.895;5.754;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5436.154;4.96;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2631.435;5.959;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22078.463;5.848;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24354.739;6.082;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23231.597;6.248;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4733.931;9.331;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;23894.903;8.981;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6106.926;12.696;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6314.295;18.178;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3513.599;20.76;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;26257.864;9.113;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;29347.549;9.097;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6393.681;10.336;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1210.908;5.461;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;27311.826;23.217;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7112.679;19.924;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13888.222;19.503;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7909.466;285.641;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7117.195;5.605;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7415.833;6.75;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;5019.456;318.064;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;2620.81;5.991;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5502.235;5.611;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2725.028;6.545;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22239.589;6.25;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22980.422;5.674;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23413.157;6.196;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4191.639;10.518;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;20488.766;8.984;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5969.253;14.213;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6372.037;16.021;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;3616.209;21.353;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27871.538;10.111;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30464.755;9.549;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6766.806;9.835;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1098.771;6.536;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;26431.772;15.575;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7363.134;20.956;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;14593.894;18.883;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;8211.813;285.571;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;6779.882;5.724;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7391.77;7.653;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4632.274;320.663;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1711.418;5.545;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;5446.238;5.666;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2626.842;6.327;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22185.764;6.17;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;22668.702;5.94;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23208.831;6.206;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4599.463;9.908;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22106.386;9.189;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;6163.264;13.275;180000;True
/*+ HashJoin(k mk ml t lt mc ct cn)  HashJoin(k mk ml t lt mc ct)  HashJoin(k mk ml t lt mc)  HashJoin(k mk ml t lt)  HashJoin(k mk ml t)  HashJoin(k mk ml)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ml)  IndexScan(t)  IndexScan(lt)  IndexScan(mc)  IndexScan(ct)  IndexScan(cn)  Leading((((((((k mk) ml) t) lt) mc) ct) cn)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS from_company,        MIN(mc.note) AS production_note,        MIN(t.title) AS movie_based_on_book FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND ct.kind != 'production companies'   AND ct.kind IS NOT NULL   AND k.keyword IN ('sequel',                     'revenge',                     'based-on-novel')   AND mc.note IS NOT NULL   AND t.production_year > 1950   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id;  ;6051.656;19.886;180000;True
/*+ HashJoin(mc cn aka_t t mi ct it1 mk k)  HashJoin(mc cn aka_t t mi ct it1 mk)  HashJoin(mc cn aka_t t mi ct it1)  HashJoin(mc cn aka_t t mi ct)  HashJoin(mc cn aka_t t mi)  HashJoin(mc cn aka_t t)  HashJoin(mc cn aka_t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(aka_t)  IndexScan(t)  IndexScan(mi)  IndexScan(ct)  IndexScan(it1)  IndexScan(mk)  IndexScan(k)  Leading(((((((((mc cn) aka_t) t) mi) ct) it1) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS release_date,        MIN(t.title) AS internet_movie FROM aka_title AS aka_t,      company_name AS cn,      company_type AS ct,      info_type AS it1,      keyword AS k,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      title AS t WHERE cn.country_code = '[us]'   AND it1.info = 'release dates'   AND mc.note LIKE '%(200%)%'   AND mc.note LIKE '%(worldwide)%'   AND mi.note LIKE '%internet%'   AND mi.info LIKE 'USA:% 200%'   AND t.production_year > 2000   AND t.id = aka_t.movie_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = aka_t.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = aka_t.movie_id   AND mc.movie_id = aka_t.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND cn.id = mc.company_id   AND ct.id = mc.company_type_id; ;4102.895;20.92;180000;True
/*+ HashJoin(k mk ci n t mc cn)  HashJoin(k mk ci n t mc)  HashJoin(k mk ci n t)  HashJoin(k mk ci n)  HashJoin(k mk ci)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  Leading(((((((k mk) ci) n) t) mc) cn)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie,        MIN(n.name) AS a1 FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword ='character-name-in-title'   AND n.name LIKE 'Z%'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;27963.596;10.794;180000;True
/*+ HashJoin(k mk t mc cn ci n)  HashJoin(k mk t mc cn ci)  HashJoin(k mk t mc cn)  HashJoin(k mk t mc)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(ci)  IndexScan(n)  Leading(((((((k mk) t) mc) cn) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci,      company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      name AS n,      title AS t WHERE cn.country_code ='[us]'   AND k.keyword ='character-name-in-title'   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.movie_id = mc.movie_id   AND ci.movie_id = mk.movie_id   AND mc.movie_id = mk.movie_id;  ;30796.018;8.844;180000;True
/*+ HashJoin(mi_idx it2 t mi it1 ci n)  HashJoin(mi_idx it2 t mi it1 ci)  HashJoin(mi_idx it2 t mi it1)  HashJoin(mi_idx it2 t mi)  HashJoin(mi_idx it2 t)  HashJoin(mi_idx it2)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(mi)  IndexScan(it1)  IndexScan(ci)  IndexScan(n)  Leading(((((((mi_idx it2) t) mi) it1) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(t.title) AS movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      movie_info AS mi,      movie_info_idx AS mi_idx,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'rating'   AND mi.info IN ('Horror',                   'Thriller')   AND mi.note IS NULL   AND mi_idx.info > '8.0'   AND n.gender IS NOT NULL   AND n.gender = 'f'   AND t.production_year BETWEEN 2008 AND 2014   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND mi.movie_id = mi_idx.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id;  ;6833.591;9.854;180000;True
/*+ HashJoin(mi_idx it mc ct t)  HashJoin(mi_idx it mc ct)  HashJoin(mi_idx it mc)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  Leading(((((mi_idx it) mc) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(mc.note) AS production_note,        MIN(t.title) AS movie_title,        MIN(t.production_year) AS movie_year FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info_idx AS mi_idx,      title AS t WHERE ct.kind = 'production companies'   AND it.info = 'top 250 rank'   AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'   AND (mc.note LIKE '%(co-production)%')   AND t.production_year >2010   AND ct.id = mc.company_type_id   AND t.id = mc.movie_id   AND t.id = mi_idx.movie_id   AND mc.movie_id = mi_idx.movie_id   AND it.id = mi_idx.info_type_id;  ;1195.679;6.402;180000;True
/*+ HashJoin(kt t mk k cc cct2 cct1 ci chn n)  HashJoin(kt t mk k cc cct2 cct1 ci chn)  HashJoin(kt t mk k cc cct2 cct1 ci)  HashJoin(kt t mk k cc cct2 cct1)  HashJoin(kt t mk k cc cct2)  HashJoin(kt t mk k cc)  HashJoin(kt t mk k)  HashJoin(kt t mk)  HashJoin(kt t)  IndexScan(kt)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  IndexScan(cc)  IndexScan(cct2)  IndexScan(cct1)  IndexScan(ci)  IndexScan(chn)  IndexScan(n)  Leading((((((((((kt t) mk) k) cc) cct2) cct1) ci) chn) n)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS complete_downey_ironman_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      char_name AS chn,      cast_info AS ci,      keyword AS k,      kind_type AS kt,      movie_keyword AS mk,      name AS n,      title AS t WHERE cct1.kind = 'cast'   AND cct2.kind LIKE '%complete%'   AND chn.name NOT LIKE '%Sherlock%'   AND (chn.name LIKE '%Tony%Stark%'        OR chn.name LIKE '%Iron%Man%')   AND k.keyword IN ('superhero',                     'sequel',                     'second-part',                     'marvel-comics',                     'based-on-comic',                     'tv-special',                     'fight',                     'violence')   AND kt.kind = 'movie'   AND t.production_year > 1950   AND kt.id = t.kind_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = ci.movie_id   AND mk.movie_id = cc.movie_id   AND ci.movie_id = cc.movie_id   AND chn.id = ci.person_role_id   AND n.id = ci.person_id   AND k.id = mk.keyword_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;28816.729;23.262;180000;True
/*+ HashJoin(lt ml mk k mi mc cn ct t)  HashJoin(lt ml mk k mi mc cn ct)  HashJoin(lt ml mk k mi mc cn)  HashJoin(lt ml mk k mi mc)  HashJoin(lt ml mk k mi)  HashJoin(lt ml mk k)  HashJoin(lt ml mk)  HashJoin(lt ml)  IndexScan(lt)  IndexScan(ml)  IndexScan(mk)  IndexScan(k)  IndexScan(mi)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(t)  Leading(((((((((lt ml) mk) k) mi) mc) cn) ct) t)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS company_name,        MIN(lt.link) AS link_type,        MIN(t.title) AS western_follow_up FROM company_name AS cn,      company_type AS ct,      keyword AS k,      link_type AS lt,      movie_companies AS mc,      movie_info AS mi,      movie_keyword AS mk,      movie_link AS ml,      title AS t WHERE cn.country_code !='[pl]'   AND (cn.name LIKE '%Film%'        OR cn.name LIKE '%Warner%')   AND ct.kind ='production companies'   AND k.keyword ='sequel'   AND lt.link LIKE '%follow%'   AND mc.note IS NULL   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German')   AND t.production_year BETWEEN 1950 AND 2000   AND lt.id = ml.link_type_id   AND ml.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND t.id = mc.movie_id   AND mc.company_type_id = ct.id   AND mc.company_id = cn.id   AND mi.movie_id = t.id   AND ml.movie_id = mk.movie_id   AND ml.movie_id = mc.movie_id   AND mk.movie_id = mc.movie_id   AND ml.movie_id = mi.movie_id   AND mk.movie_id = mi.movie_id   AND mc.movie_id = mi.movie_id;  ;7240.464;18.407;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 ci n t)  HashJoin(it1 mi mk k mi_idx it2 ci n)  HashJoin(it1 mi mk k mi_idx it2 ci)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(ci)  IndexScan(n)  IndexScan(t)  Leading(((((((((it1 mi) mk) k) mi_idx) it2) ci) n) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi.info) AS movie_budget,        MIN(mi_idx.info) AS movie_votes,        MIN(n.name) AS male_writer,        MIN(t.title) AS violent_movie_title FROM cast_info AS ci,      info_type AS it1,      info_type AS it2,      keyword AS k,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      name AS n,      title AS t WHERE ci.note IN ('(writer)',                   '(head writer)',                   '(written by)',                   '(story)',                   '(story editor)')   AND it1.info = 'genres'   AND it2.info = 'votes'   AND k.keyword IN ('murder',                     'violence',                     'blood',                     'gore',                     'death',                     'female-nudity',                     'hospital')   AND mi.info IN ('Horror',                   'Action',                   'Sci-Fi',                   'Thriller',                   'Crime',                   'War')   AND n.gender = 'm'   AND t.id = mi.movie_id   AND t.id = mi_idx.movie_id   AND t.id = ci.movie_id   AND t.id = mk.movie_id   AND ci.movie_id = mi.movie_id   AND ci.movie_id = mi_idx.movie_id   AND ci.movie_id = mk.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mk.movie_id   AND mi_idx.movie_id = mk.movie_id   AND n.id = ci.person_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND k.id = mk.keyword_id;  ;13376.498;19.671;180000;True
/*+ HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct cct2)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn ct)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc cn)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1 mc)  HashJoin(it1 mi mk k mi_idx it2 t kt cc cct1)  HashJoin(it1 mi mk k mi_idx it2 t kt cc)  HashJoin(it1 mi mk k mi_idx it2 t kt)  HashJoin(it1 mi mk k mi_idx it2 t)  HashJoin(it1 mi mk k mi_idx it2)  HashJoin(it1 mi mk k mi_idx)  HashJoin(it1 mi mk k)  HashJoin(it1 mi mk)  HashJoin(it1 mi)  IndexScan(it1)  IndexScan(mi)  IndexScan(mk)  IndexScan(k)  IndexScan(mi_idx)  IndexScan(it2)  IndexScan(t)  IndexScan(kt)  IndexScan(cc)  IndexScan(cct1)  IndexScan(mc)  IndexScan(cn)  IndexScan(ct)  IndexScan(cct2)  Leading((((((((((((((it1 mi) mk) k) mi_idx) it2) t) kt) cc) cct1) mc) cn) ct) cct2)) */ explain (verbose, analyze, format json) SELECT MIN(cn.name) AS movie_company,        MIN(mi_idx.info) AS rating,        MIN(t.title) AS complete_euro_dark_movie FROM complete_cast AS cc,      comp_cast_type AS cct1,      comp_cast_type AS cct2,      company_name AS cn,      company_type AS ct,      info_type AS it1,      info_type AS it2,      keyword AS k,      kind_type AS kt,      movie_companies AS mc,      movie_info AS mi,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE cct1.kind = 'crew'   AND cct2.kind != 'complete+verified'   AND cn.country_code != '[us]'   AND it1.info = 'countries'   AND it2.info = 'rating'   AND k.keyword IN ('murder',                     'murder-in-title',                     'blood',                     'violence')   AND kt.kind IN ('movie',                   'episode')   AND mc.note NOT LIKE '%(USA)%'   AND mc.note LIKE '%(200%)%'   AND mi.info IN ('Sweden',                   'Germany',                   'Swedish',                   'German')   AND mi_idx.info > '6.5'   AND t.production_year > 2005   AND kt.id = t.kind_id   AND t.id = mi.movie_id   AND t.id = mk.movie_id   AND t.id = mi_idx.movie_id   AND t.id = mc.movie_id   AND t.id = cc.movie_id   AND mk.movie_id = mi.movie_id   AND mk.movie_id = mi_idx.movie_id   AND mk.movie_id = mc.movie_id   AND mk.movie_id = cc.movie_id   AND mi.movie_id = mi_idx.movie_id   AND mi.movie_id = mc.movie_id   AND mi.movie_id = cc.movie_id   AND mc.movie_id = mi_idx.movie_id   AND mc.movie_id = cc.movie_id   AND mi_idx.movie_id = cc.movie_id   AND k.id = mk.keyword_id   AND it1.id = mi.info_type_id   AND it2.id = mi_idx.info_type_id   AND ct.id = mc.company_type_id   AND cn.id = mc.company_id   AND cct1.id = cc.subject_id   AND cct2.id = cc.status_id;  ;7175.712;191.191;180000;True
/*+ HashJoin(k mk mc cn t)  HashJoin(k mk mc cn)  HashJoin(k mk mc)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading(((((k mk) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS movie_title FROM company_name AS cn,      keyword AS k,      movie_companies AS mc,      movie_keyword AS mk,      title AS t WHERE cn.country_code ='[sm]'   AND k.keyword ='character-name-in-title'   AND cn.id = mc.company_id   AND mc.movie_id = t.id   AND t.id = mk.movie_id   AND mk.keyword_id = k.id   AND mc.movie_id = mk.movie_id;  ;7701.781;5.405;180000;True
/*+ HashJoin(k mk t1 ml lt t2)  HashJoin(k mk t1 ml lt)  HashJoin(k mk t1 ml)  HashJoin(k mk t1)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t1)  IndexScan(ml)  IndexScan(lt)  IndexScan(t2)  Leading((((((k mk) t1) ml) lt) t2)) */ explain (verbose, analyze, format json) SELECT MIN(lt.link) AS link_type,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM keyword AS k,      link_type AS lt,      movie_keyword AS mk,      movie_link AS ml,      title AS t1,      title AS t2 WHERE k.keyword ='character-name-in-title'   AND mk.keyword_id = k.id   AND t1.id = mk.movie_id   AND ml.movie_id = t1.id   AND ml.linked_movie_id = t2.id   AND lt.id = ml.link_type_id   AND mk.movie_id = t1.id;  ;7169.037;6.882;180000;True
/*+ HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2 it2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1 mi_idx2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1 kt1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2 t1)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2 cn2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2 mc2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2 kt2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1 t2)  HashJoin(mi_idx1 ml lt it1 mc1 cn1)  HashJoin(mi_idx1 ml lt it1 mc1)  HashJoin(mi_idx1 ml lt it1)  HashJoin(mi_idx1 ml lt)  HashJoin(mi_idx1 ml)  IndexScan(mi_idx1)  IndexScan(ml)  IndexScan(lt)  IndexScan(it1)  IndexScan(mc1)  IndexScan(cn1)  IndexScan(t2)  IndexScan(kt2)  IndexScan(mc2)  IndexScan(cn2)  IndexScan(t1)  IndexScan(kt1)  IndexScan(mi_idx2)  IndexScan(it2)  Leading((((((((((((((mi_idx1 ml) lt) it1) mc1) cn1) t2) kt2) mc2) cn2) t1) kt1) mi_idx2) it2)) */ explain (verbose, analyze, format json) SELECT MIN(cn1.name) AS first_company,        MIN(cn2.name) AS second_company,        MIN(mi_idx1.info) AS first_rating,        MIN(mi_idx2.info) AS second_rating,        MIN(t1.title) AS first_movie,        MIN(t2.title) AS second_movie FROM company_name AS cn1,      company_name AS cn2,      info_type AS it1,      info_type AS it2,      kind_type AS kt1,      kind_type AS kt2,      link_type AS lt,      movie_companies AS mc1,      movie_companies AS mc2,      movie_info_idx AS mi_idx1,      movie_info_idx AS mi_idx2,      movie_link AS ml,      title AS t1,      title AS t2 WHERE cn1.country_code = '[us]'   AND it1.info = 'rating'   AND it2.info = 'rating'   AND kt1.kind IN ('tv series')   AND kt2.kind IN ('tv series')   AND lt.link IN ('sequel',                   'follows',                   'followed by')   AND mi_idx2.info < '3.0'   AND t2.production_year BETWEEN 2005 AND 2008   AND lt.id = ml.link_type_id   AND t1.id = ml.movie_id   AND t2.id = ml.linked_movie_id   AND it1.id = mi_idx1.info_type_id   AND t1.id = mi_idx1.movie_id   AND kt1.id = t1.kind_id   AND cn1.id = mc1.company_id   AND t1.id = mc1.movie_id   AND ml.movie_id = mi_idx1.movie_id   AND ml.movie_id = mc1.movie_id   AND mi_idx1.movie_id = mc1.movie_id   AND it2.id = mi_idx2.info_type_id   AND t2.id = mi_idx2.movie_id   AND kt2.id = t2.kind_id   AND cn2.id = mc2.company_id   AND t2.id = mc2.movie_id   AND ml.linked_movie_id = mi_idx2.movie_id   AND ml.linked_movie_id = mc2.movie_id   AND mi_idx2.movie_id = mc2.movie_id;  ;4681.009;317.759;180000;True
/*+ HashJoin(mi_idx it t mk k)  HashJoin(mi_idx it t mk)  HashJoin(mi_idx it t)  HashJoin(mi_idx it)  IndexScan(mi_idx)  IndexScan(it)  IndexScan(t)  IndexScan(mk)  IndexScan(k)  Leading(((((mi_idx it) t) mk) k)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '9.0'   AND t.production_year > 2010   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;1883.821;5.899;180000;True
/*+ HashJoin(it mi_idx mk k t)  HashJoin(it mi_idx mk k)  HashJoin(it mi_idx mk)  HashJoin(it mi_idx)  IndexScan(it)  IndexScan(mi_idx)  IndexScan(mk)  IndexScan(k)  IndexScan(t)  Leading(((((it mi_idx) mk) k) t)) */ explain (verbose, analyze, format json) SELECT MIN(mi_idx.info) AS rating,        MIN(t.title) AS movie_title FROM info_type AS it,      keyword AS k,      movie_info_idx AS mi_idx,      movie_keyword AS mk,      title AS t WHERE it.info ='rating'   AND k.keyword LIKE '%sequel%'   AND mi_idx.info > '2.0'   AND t.production_year > 1990   AND t.id = mi_idx.movie_id   AND t.id = mk.movie_id   AND mk.movie_id = mi_idx.movie_id   AND k.id = mk.keyword_id   AND it.id = mi_idx.info_type_id;  ;4878.154;5.949;180000;True
/*+ HashJoin(mc ct t mi it)  HashJoin(mc ct t mi)  HashJoin(mc ct t)  HashJoin(mc ct)  IndexScan(mc)  IndexScan(ct)  IndexScan(t)  IndexScan(mi)  IndexScan(it)  Leading(((((mc ct) t) mi) it)) */ explain (verbose, analyze, format json) SELECT MIN(t.title) AS american_movie FROM company_type AS ct,      info_type AS it,      movie_companies AS mc,      movie_info AS mi,      title AS t WHERE ct.kind = 'production companies'   AND mc.note NOT LIKE '%(TV)%'   AND mc.note LIKE '%(USA)%'   AND mi.info IN ('Sweden',                   'Norway',                   'Germany',                   'Denmark',                   'Swedish',                   'Denish',                   'Norwegian',                   'German',                   'USA',                   'American')   AND t.production_year > 1990   AND t.id = mi.movie_id   AND t.id = mc.movie_id   AND mc.movie_id = mi.movie_id   AND ct.id = mc.company_type_id   AND it.id = mi.info_type_id;  ;2885.327;6.544;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2010   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;23326.865;4.084;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2014   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;24583.247;6.33;180000;True
/*+ HashJoin(k mk t ci n)  HashJoin(k mk t ci)  HashJoin(k mk t)  HashJoin(k mk)  IndexScan(k)  IndexScan(mk)  IndexScan(t)  IndexScan(ci)  IndexScan(n)  Leading(((((k mk) t) ci) n)) */ explain (verbose, analyze, format json) SELECT MIN(k.keyword) AS movie_keyword,        MIN(n.name) AS actor_name,        MIN(t.title) AS marvel_movie FROM cast_info AS ci,      keyword AS k,      movie_keyword AS mk,      name AS n,      title AS t WHERE k.keyword = 'marvel-cinematic-universe'   AND n.name LIKE '%Downey%Robert%'   AND t.production_year > 2000   AND k.id = mk.keyword_id   AND t.id = mk.movie_id   AND t.id = ci.movie_id   AND ci.movie_id = mk.movie_id   AND n.id = ci.person_id;  ;25319.432;5.846;180000;True
/*+ HashJoin(mc cn t ci an n rt)  HashJoin(mc cn t ci an n)  HashJoin(mc cn t ci an)  HashJoin(mc cn t ci)  HashJoin(mc cn t)  HashJoin(mc cn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  IndexScan(ci)  IndexScan(an)  IndexScan(n)  IndexScan(rt)  Leading(((((((mc cn) t) ci) an) n) rt)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS acress_pseudonym,        MIN(t.title) AS japanese_anime_movie FROM aka_name AS an,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note ='(voice: English version)'   AND cn.country_code ='[jp]'   AND mc.note LIKE '%(Japan)%'   AND mc.note NOT LIKE '%(USA)%'   AND (mc.note LIKE '%(2006)%'        OR mc.note LIKE '%(2007)%')   AND n.name LIKE '%Yo%'   AND n.name NOT LIKE '%Yu%'   AND rt.role ='actress'   AND t.production_year BETWEEN 2006 AND 2007   AND (t.title LIKE 'One Piece%'        OR t.title LIKE 'Dragon Ball Z%')   AND an.person_id = n.id   AND n.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND an.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;4300.539;10.481;180000;True
/*+ HashJoin(a1 ci t mc cn rt n1)  HashJoin(a1 ci t mc cn rt)  HashJoin(a1 ci t mc cn)  HashJoin(a1 ci t mc)  HashJoin(a1 ci t)  HashJoin(a1 ci)  IndexScan(a1)  IndexScan(ci)  IndexScan(t)  IndexScan(mc)  IndexScan(cn)  IndexScan(rt)  IndexScan(n1)  Leading(((((((a1 ci) t) mc) cn) rt) n1)) */ explain (verbose, analyze, format json) SELECT MIN(a1.name) AS writer_pseudo_name,        MIN(t.title) AS movie_title FROM aka_name AS a1,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n1,      role_type AS rt,      title AS t WHERE cn.country_code ='[us]'   AND rt.role ='writer'   AND a1.person_id = n1.id   AND n1.id = ci.person_id   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND a1.person_id = ci.person_id   AND ci.movie_id = mc.movie_id;  ;22525.257;8.745;180000;True
/*+ HashJoin(an n ci rt chn mc cn t)  HashJoin(an n ci rt chn mc cn)  HashJoin(an n ci rt chn mc)  HashJoin(an n ci rt chn)  HashJoin(an n ci rt)  HashJoin(an n ci)  HashJoin(an n)  IndexScan(an)  IndexScan(n)  IndexScan(ci)  IndexScan(rt)  IndexScan(chn)  IndexScan(mc)  IndexScan(cn)  IndexScan(t)  Leading((((((((an n) ci) rt) chn) mc) cn) t)) */ explain (verbose, analyze, format json) SELECT MIN(an.name) AS alternative_name,        MIN(chn.name) AS voiced_character_name,        MIN(n.name) AS voicing_actress,        MIN(t.title) AS american_movie FROM aka_name AS an,      char_name AS chn,      cast_info AS ci,      company_name AS cn,      movie_companies AS mc,      name AS n,      role_type AS rt,      title AS t WHERE ci.note IN ('(voice)',                   '(voice: Japanese version)',                   '(voice) (uncredited)',                   '(voice: English version)')   AND cn.country_code ='[us]'   AND n.gender ='f'   AND n.name LIKE '%An%'   AND rt.role ='actress'   AND ci.movie_id = t.id   AND t.id = mc.movie_id   AND ci.movie_id = mc.movie_id   AND mc.company_id = cn.id   AND ci.role_id = rt.id   AND n.id = ci.person_id   AND chn.id = ci.person_role_id   AND an.person_id = n.id   AND an.person_id = ci.person_id;  ;5738.208;13.458;180000;True
