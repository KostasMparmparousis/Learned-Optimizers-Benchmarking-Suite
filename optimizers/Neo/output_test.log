nohup: ignoring input
Total queries read: 113
Splitting queries:   0%|          | 0/1 [00:00<?, ?it/s]Splitting queries: 100%|██████████| 1/1 [00:00<00:00, 13617.87it/s]
Fetching schema:   0%|          | 0/1 [00:00<?, ?it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Fetching schema: 100%|██████████| 1/1 [00:00<00:00, 10.92it/s]
Processing queries:   0%|          | 0/113 [00:00<?, ?it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:   2%|▏         | 2/113 [00:00<00:06, 18.13it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:   4%|▎         | 4/113 [00:00<00:05, 18.57it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:   5%|▌         | 6/113 [00:00<00:06, 15.76it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:   7%|▋         | 8/113 [00:00<00:06, 15.23it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:   9%|▉         | 10/113 [00:00<00:06, 15.06it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  11%|█         | 12/113 [00:00<00:06, 14.87it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  12%|█▏        | 14/113 [00:00<00:06, 14.61it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  14%|█▍        | 16/113 [00:01<00:07, 13.69it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  16%|█▌        | 18/113 [00:01<00:06, 13.66it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  18%|█▊        | 20/113 [00:01<00:06, 13.89it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  19%|█▉        | 22/113 [00:01<00:06, 13.97it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  21%|██        | 24/113 [00:01<00:06, 13.62it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  23%|██▎       | 26/113 [00:01<00:06, 13.67it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  25%|██▍       | 28/113 [00:01<00:06, 13.89it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  27%|██▋       | 30/113 [00:02<00:06, 13.38it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  28%|██▊       | 32/113 [00:02<00:06, 13.49it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  30%|███       | 34/113 [00:02<00:06, 13.12it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  32%|███▏      | 36/113 [00:02<00:05, 13.56it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  34%|███▎      | 38/113 [00:02<00:05, 13.25it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  35%|███▌      | 40/113 [00:02<00:05, 13.45it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  37%|███▋      | 42/113 [00:03<00:05, 13.52it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  39%|███▉      | 44/113 [00:03<00:05, 13.18it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  41%|████      | 46/113 [00:03<00:04, 13.69it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  42%|████▏     | 48/113 [00:03<00:04, 14.34it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  44%|████▍     | 50/113 [00:03<00:04, 14.07it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  46%|████▌     | 52/113 [00:03<00:04, 14.98it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  48%|████▊     | 54/113 [00:03<00:03, 14.96it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  50%|████▉     | 56/113 [00:03<00:03, 15.76it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  51%|█████▏    | 58/113 [00:04<00:03, 15.16it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  53%|█████▎    | 60/113 [00:04<00:03, 14.13it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  55%|█████▍    | 62/113 [00:04<00:03, 14.17it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  57%|█████▋    | 64/113 [00:04<00:03, 15.27it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  58%|█████▊    | 66/113 [00:04<00:03, 14.85it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  60%|██████    | 68/113 [00:04<00:02, 15.60it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  62%|██████▏   | 70/113 [00:04<00:02, 14.64it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  64%|██████▎   | 72/113 [00:05<00:02, 13.73it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  65%|██████▌   | 74/113 [00:05<00:02, 13.91it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  67%|██████▋   | 76/113 [00:05<00:02, 13.86it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  69%|██████▉   | 78/113 [00:05<00:02, 13.37it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  71%|███████   | 80/113 [00:05<00:02, 13.59it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  73%|███████▎  | 82/113 [00:05<00:02, 13.37it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  74%|███████▍  | 84/113 [00:05<00:02, 13.37it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  76%|███████▌  | 86/113 [00:06<00:02, 13.41it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  78%|███████▊  | 88/113 [00:06<00:01, 13.34it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  80%|███████▉  | 90/113 [00:06<00:01, 12.53it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  81%|████████▏ | 92/113 [00:06<00:01, 12.40it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  83%|████████▎ | 94/113 [00:06<00:01, 12.90it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  85%|████████▍ | 96/113 [00:06<00:01, 13.47it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  87%|████████▋ | 98/113 [00:07<00:01, 13.15it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  88%|████████▊ | 100/113 [00:07<00:00, 13.08it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  90%|█████████ | 102/113 [00:07<00:00, 12.63it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  92%|█████████▏| 104/113 [00:07<00:00, 12.91it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  94%|█████████▍| 106/113 [00:07<00:00, 13.20it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  96%|█████████▌| 108/113 [00:07<00:00, 13.17it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  97%|█████████▋| 110/113 [00:07<00:00, 12.62it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries:  99%|█████████▉| 112/113 [00:08<00:00, 12.73it/s]/data/hdd1/users/kmparmp/Neo/sql_parser/config.py:92: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)
Processing queries: 100%|██████████| 113/113 [00:08<00:00, 13.75it/s]
113
113
/data/hdd1/users/kmparmp/Neo/test_neo.py:285: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(checkpoint_path, map_location=device)
INFO:__main__:Starting evaluation on 113 test queries
Evaluating queries:   0%|          | 0/113 [00:00<?, ?it/s]Evaluating query 22b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22b/22b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22b/NEO for query 22b.sql
Creating a new environment for query 22b.sql
Generating plan for query 22b.sql
Evaluating plan for query 22b.sql
Executing query: SELECT /*+  leading((it1 (k (mi (kt ((t (it2 (((mc cn) ct) mi_idx))) mk)))))) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS western_violent_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mc.note  not like '%(USA)%' and mc.note like '%(200%)%' AND mi.info IN ('Germany', 'German', 'USA', 'American') AND mi_idx.info  < '7.0' AND t.production_year  > 2009 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mc.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id;
Calculating metrics for query 22b.sql
Metrics for query 22b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 2.593336, 'q_error': np.float32(89.00263), 'inference_time': 1.6644401550292969, 'timestamp': 1745854622.5075755}
Saving results for query 22b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22b/NEO/22b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22b/NEO/22b.sql_neo_metrics.json
INFO:__main__:Evaluated 22b.sql: Latency=2.59ms, Q-error=89.00
Evaluating queries:   1%|          | 1/113 [00:04<08:06,  4.34s/it]Evaluating query 4b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4b/4b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4b/NEO for query 4b.sql
Creating a new environment for query 4b.sql
Generating plan for query 4b.sql
Evaluating plan for query 4b.sql
Executing query: SELECT /*+  leading((k ((mk (it mi_idx)) t))) */  MIN(mi_idx.info) AS rating, MIN(t.title) AS movie_title  FROM  info_type AS it, keyword AS k, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE it.info ='rating' AND k.keyword  like '%sequel%' AND mi_idx.info  > '9.0' AND t.production_year > 2010 AND t.id = mi_idx.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 4b.sql
Metrics for query 4b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 0.647115, 'q_error': np.float32(22.208822), 'inference_time': 0.09490418434143066, 'timestamp': 1745854623.2992558}
Saving results for query 4b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4b/NEO/4b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4b/NEO/4b.sql_neo_metrics.json
INFO:__main__:Evaluated 4b.sql: Latency=0.65ms, Q-error=22.21
Evaluating queries:   2%|▏         | 2/113 [00:05<04:10,  2.25s/it]Evaluating query 33a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33a/33a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33a/NEO for query 33a.sql
Creating a new environment for query 33a.sql
Generating plan for query 33a.sql
Evaluating plan for query 33a.sql
Executing query: SELECT /*+  leading(((((mc1 t1) cn1) ((cn2 mc2) ((it1 mi_idx1) ((it2 ((kt2 t2) mi_idx2)) (lt ml))))) kt1)) */  MIN(cn1.name) AS first_company, MIN(cn2.name) AS second_company, MIN(mi_idx1.info) AS first_rating, MIN(mi_idx2.info) AS second_rating, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie  FROM  company_name AS cn1, company_name AS cn2, info_type AS it1, info_type AS it2, kind_type AS kt1, kind_type AS kt2, link_type AS lt, movie_companies AS mc1, movie_companies AS mc2, movie_info_idx AS mi_idx1, movie_info_idx AS mi_idx2, movie_link AS ml, title AS t1, title AS t2 WHERE cn1.country_code  = '[us]' AND it1.info  = 'rating' AND it2.info  = 'rating' AND kt1.kind  in ('tv series') AND kt2.kind  in ('tv series') AND lt.link  in ('sequel', 'follows', 'followed by') AND mi_idx2.info  < '3.0' AND t2.production_year  between 2005 and 2008 AND lt.id = ml.link_type_id AND t1.id = ml.movie_id AND t2.id = ml.linked_movie_id AND it1.id = mi_idx1.info_type_id AND t1.id = mi_idx1.movie_id AND kt1.id = t1.kind_id AND cn1.id = mc1.company_id AND t1.id = mc1.movie_id AND ml.movie_id = mi_idx1.movie_id AND ml.movie_id = mc1.movie_id AND mi_idx1.movie_id = mc1.movie_id AND it2.id = mi_idx2.info_type_id AND t2.id = mi_idx2.movie_id AND kt2.id = t2.kind_id AND cn2.id = mc2.company_id AND t2.id = mc2.movie_id AND ml.linked_movie_id = mi_idx2.movie_id AND ml.linked_movie_id = mc2.movie_id AND mi_idx2.movie_id = mc2.movie_id;
Calculating metrics for query 33a.sql
Metrics for query 33a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.8944520000000002, 'q_error': np.float32(133.6566), 'inference_time': 2.760085105895996, 'timestamp': 1745854630.372991}
Saving results for query 33a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33a/NEO/33a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33a/NEO/33a.sql_neo_metrics.json
INFO:__main__:Evaluated 33a.sql: Latency=3.89ms, Q-error=133.66
Evaluating queries:   3%|▎         | 3/113 [00:12<08:10,  4.46s/it]Evaluating query 1d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1d/1d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1d/NEO for query 1d.sql
Creating a new environment for query 1d.sql
Generating plan for query 1d.sql
Evaluating plan for query 1d.sql
Executing query: SELECT /*+  leading((t (((it mi_idx) mc) ct))) */  MIN(mc.note) AS production_note, MIN(t.title) AS movie_title, MIN(t.production_year) AS movie_year  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info_idx AS mi_idx, title AS t WHERE ct.kind = 'production companies' AND it.info = 'bottom 10 rank' AND mc.note  not like '%(as Metro-Goldwyn-Mayer Pictures)%' AND t.production_year > 2000 AND ct.id = mc.company_type_id AND t.id = mc.movie_id AND t.id = mi_idx.movie_id AND mc.movie_id = mi_idx.movie_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 1d.sql
Metrics for query 1d.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.181921, 'q_error': np.float32(6.243482), 'inference_time': 0.06717753410339355, 'timestamp': 1745854630.6673903}
Saving results for query 1d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1d/NEO/1d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1d/NEO/1d.sql_neo_metrics.json
INFO:__main__:Evaluated 1d.sql: Latency=0.18ms, Q-error=6.24
Evaluating queries:   4%|▎         | 4/113 [00:12<05:06,  2.81s/it]Evaluating query 11a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11a/11a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11a/NEO for query 11a.sql
Creating a new environment for query 11a.sql
Generating plan for query 11a.sql
Evaluating plan for query 11a.sql
Executing query: SELECT /*+  leading((ct (((k (mk (lt (ml t)))) mc) cn))) */  MIN(cn.name) AS from_company, MIN(lt.link) AS movie_link_type, MIN(t.title) AS non_polish_sequel_movie  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND t.production_year BETWEEN 1950 AND 2000 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id;
Calculating metrics for query 11a.sql
Metrics for query 11a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 0.255158, 'q_error': np.float32(8.756958), 'inference_time': 0.5657463073730469, 'timestamp': 1745854631.5296605}
Saving results for query 11a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11a/NEO/11a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11a/NEO/11a.sql_neo_metrics.json
INFO:__main__:Evaluated 11a.sql: Latency=0.26ms, Q-error=8.76
Evaluating queries:   4%|▍         | 5/113 [00:13<03:47,  2.11s/it]Evaluating query 16b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16b/16b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16b/NEO for query 16b.sql
Creating a new environment for query 16b.sql
Generating plan for query 16b.sql
Evaluating plan for query 16b.sql
Executing query: SELECT /*+  leading((((((n (ci (t mk))) an) k) mc) cn)) */  MIN(an.name) AS cool_actor_pseudonym, MIN(t.title) AS series_named_after_char  FROM  aka_name AS an, cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND an.person_id = n.id AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND an.person_id = ci.person_id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 16b.sql
Metrics for query 16b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 70.946958, 'q_error': np.float32(2434.8816), 'inference_time': 0.4470956325531006, 'timestamp': 1745854702.9775999}
Saving results for query 16b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16b/NEO/16b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16b/NEO/16b.sql_neo_metrics.json
INFO:__main__:Evaluated 16b.sql: Latency=70.95ms, Q-error=2434.88
Evaluating queries:   5%|▌         | 6/113 [01:24<45:48, 25.68s/it]Evaluating query 30a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30a/30a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30a/NEO for query 30a.sql
Creating a new environment for query 30a.sql
Generating plan for query 30a.sql
Evaluating plan for query 30a.sql
Executing query: SELECT /*+  leading((n ((it1 (cct1 (ci (cct2 (cc ((k ((mk mi) t)) mi_idx)))))) it2))) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS writer, MIN(t.title) AS complete_violent_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, cast_info AS ci, info_type AS it1, info_type AS it2, keyword AS k, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  in ('cast', 'crew') AND cct2.kind  ='complete+verified' AND ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mi.info  in ('Horror', 'Thriller') AND n.gender  = 'm' AND t.production_year  > 2000 AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND mi_idx.movie_id = mk.movie_id AND mi_idx.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 30a.sql
Metrics for query 30a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 5.313465, 'q_error': np.float32(182.35678), 'inference_time': 1.3260252475738525, 'timestamp': 1745854709.7620628}
Saving results for query 30a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30a/NEO/30a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30a/NEO/30a.sql_neo_metrics.json
INFO:__main__:Evaluated 30a.sql: Latency=5.31ms, Q-error=182.36
Evaluating queries:   6%|▌         | 7/113 [01:31<34:27, 19.51s/it]Evaluating query 23a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23a/23a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23a/NEO for query 23a.sql
Creating a new environment for query 23a.sql
Generating plan for query 23a.sql
Evaluating plan for query 23a.sql
Executing query: SELECT /*+  leading((k ((kt (((cn (mi (t (cc (ct mc))))) cct1) it1)) mk))) */  MIN(kt.kind) AS movie_kind, MIN(t.title) AS complete_us_internet_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cct1.kind  = 'complete+verified' AND cn.country_code  = '[us]' AND it1.info  = 'release dates' AND kt.kind  in ('movie') AND mi.note  like '%internet%' AND mi.info  is not NULL and (mi.info like 'USA:% 199%' or mi.info like 'USA:% 200%') AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND t.id = cc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = cc.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = cc.movie_id AND mc.movie_id = cc.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND cct1.id = cc.status_id;
Calculating metrics for query 23a.sql
Metrics for query 23a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 10.877581, 'q_error': np.float32(373.31577), 'inference_time': 1.6297328472137451, 'timestamp': 1745854722.3790097}
Saving results for query 23a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23a/NEO/23a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23a/NEO/23a.sql_neo_metrics.json
INFO:__main__:Evaluated 23a.sql: Latency=10.88ms, Q-error=373.32
Evaluating queries:   7%|▋         | 8/113 [01:44<30:17, 17.31s/it]Evaluating query 5a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5a/5a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5a/NEO for query 5a.sql
Creating a new environment for query 5a.sql
Generating plan for query 5a.sql
Evaluating plan for query 5a.sql
Executing query: SELECT /*+  leading(((((mc t) ct) mi) it)) */  MIN(t.title) AS typical_european_movie  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info AS mi, title AS t WHERE ct.kind  = 'production companies' AND mc.note  like '%(theatrical)%' and mc.note like '%(France)%' AND mi.info  IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German') AND t.production_year > 2005 AND t.id = mi.movie_id AND t.id = mc.movie_id AND mc.movie_id = mi.movie_id AND ct.id = mc.company_type_id AND it.id = mi.info_type_id;
Calculating metrics for query 5a.sql
Metrics for query 5a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.23354, 'q_error': np.float32(8.015033), 'inference_time': 0.06305813789367676, 'timestamp': 1745854722.746336}
Saving results for query 5a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5a/NEO/5a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5a/NEO/5a.sql_neo_metrics.json
INFO:__main__:Evaluated 5a.sql: Latency=0.23ms, Q-error=8.02
Evaluating queries:   8%|▊         | 9/113 [01:44<20:49, 12.01s/it]Evaluating query 20c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20c/20c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20c/NEO for query 20c.sql
Creating a new environment for query 20c.sql
Generating plan for query 20c.sql
Evaluating plan for query 20c.sql
Executing query: SELECT /*+  leading((((mk (n ((((t (cc cct2)) cct1) ci) kt))) k) chn)) */  MIN(n.name) AS cast_member, MIN(t.title) AS complete_dynamic_hero_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, keyword AS k, kind_type AS kt, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  is not NULL and (chn.name like '%man%' or chn.name like '%Man%') AND k.keyword  in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') AND kt.kind  = 'movie' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND ci.movie_id = cc.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 20c.sql
Metrics for query 20c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 4.255166, 'q_error': np.float32(146.03621), 'inference_time': 0.7707335948944092, 'timestamp': 1745854727.8347313}
Saving results for query 20c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20c/NEO/20c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20c/NEO/20c.sql_neo_metrics.json
INFO:__main__:Evaluated 20c.sql: Latency=4.26ms, Q-error=146.04
Evaluating queries:   9%|▉         | 10/113 [01:49<16:57,  9.88s/it]Evaluating query 15d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15d/15d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15d/NEO for query 15d.sql
Creating a new environment for query 15d.sql
Generating plan for query 15d.sql
Evaluating plan for query 15d.sql
Executing query: SELECT /*+  leading(((it1 (mi (mk (t (((ct mc) at) cn))))) k)) */  MIN(at.title) AS aka_title, MIN(t.title) AS internet_movie_title  FROM  aka_title AS at, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cn.country_code  = '[us]' AND it1.info  = 'release dates' AND mi.note  like '%internet%' AND t.production_year  > 1990 AND t.id = at.movie_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = at.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = at.movie_id AND mc.movie_id = at.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 15d.sql
Metrics for query 15d.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 7.336066, 'q_error': np.float32(251.7719), 'inference_time': 0.921572208404541, 'timestamp': 1745854736.1992254}
Saving results for query 15d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15d/NEO/15d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15d/NEO/15d.sql_neo_metrics.json
INFO:__main__:Evaluated 15d.sql: Latency=7.34ms, Q-error=251.77
Evaluating queries:  10%|▉         | 11/113 [01:58<16:00,  9.41s/it]Evaluating query 26b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26b/26b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26b/NEO for query 26b.sql
Creating a new environment for query 26b.sql
Generating plan for query 26b.sql
Evaluating plan for query 26b.sql
Executing query: SELECT /*+  leading((k (cct1 (mk (cct2 (((it2 ((((cc ci) n) mi_idx) chn)) t) kt)))))) */  MIN(chn.name) AS character_name, MIN(mi_idx.info) AS rating, MIN(t.title) AS complete_hero_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, info_type AS it2, keyword AS k, kind_type AS kt, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  is not NULL and (chn.name like '%man%' or chn.name like '%Man%') AND it2.info  = 'rating' AND k.keyword  in ('superhero', 'marvel-comics', 'based-on-comic', 'fight') AND kt.kind  = 'movie' AND mi_idx.info  > '8.0' AND t.production_year  > 2005 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND mk.movie_id = mi_idx.movie_id AND ci.movie_id = cc.movie_id AND ci.movie_id = mi_idx.movie_id AND cc.movie_id = mi_idx.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 26b.sql
Metrics for query 26b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 32.027226999999996, 'q_error': np.float32(1099.1663), 'inference_time': 1.0949397087097168, 'timestamp': 1745854769.6155748}
Saving results for query 26b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26b/NEO/26b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26b/NEO/26b.sql_neo_metrics.json
INFO:__main__:Evaluated 26b.sql: Latency=32.03ms, Q-error=1099.17
Evaluating queries:  11%|█         | 12/113 [02:31<28:08, 16.72s/it]Evaluating query 22a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22a/22a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22a/NEO for query 22a.sql
Creating a new environment for query 22a.sql
Generating plan for query 22a.sql
Evaluating plan for query 22a.sql
Executing query: SELECT /*+  leading((it1 (k (mi (kt ((t (it2 (((mc cn) ct) mi_idx))) mk)))))) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS western_violent_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mc.note  not like '%(USA)%' and mc.note like '%(200%)%' AND mi.info IN ('Germany', 'German', 'USA', 'American') AND mi_idx.info  < '7.0' AND t.production_year  > 2008 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mc.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id;
Calculating metrics for query 22a.sql
Metrics for query 22a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 2.546912, 'q_error': np.float32(87.40936), 'inference_time': 1.5995662212371826, 'timestamp': 1745854773.8686042}
Saving results for query 22a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22a/NEO/22a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22a/NEO/22a.sql_neo_metrics.json
INFO:__main__:Evaluated 22a.sql: Latency=2.55ms, Q-error=87.41
Evaluating queries:  12%|█▏        | 13/113 [02:35<21:34, 12.94s/it]Evaluating query 7c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7c/7c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7c/NEO for query 7c.sql
Creating a new environment for query 7c.sql
Generating plan for query 7c.sql
Evaluating plan for query 7c.sql
Executing query: SELECT /*+  leading((it ((lt ((((n ci) ml) an) t)) pi))) */  MIN(n.name) AS cast_member_name, MIN(pi.info) AS cast_member_info  FROM  aka_name AS an, cast_info AS ci, info_type AS it, link_type AS lt, movie_link AS ml, name AS n, person_info AS pi, title AS t WHERE an.name  is not NULL and (an.name LIKE '%a%' or an.name LIKE 'A%') AND it.info ='mini biography' AND lt.link  in ('references', 'referenced in', 'features', 'featured in') AND n.name_pcode_cf BETWEEN 'A' AND 'F' AND (n.gender = 'm' OR (n.gender = 'f' AND n.name LIKE 'A%')) AND pi.note  is not NULL AND t.production_year BETWEEN 1980 AND 2010 AND n.id = an.person_id AND n.id = pi.person_id AND ci.person_id = n.id AND t.id = ci.movie_id AND ml.linked_movie_id = t.id AND lt.id = ml.link_type_id AND it.id = pi.info_type_id AND pi.person_id = an.person_id AND pi.person_id = ci.person_id AND an.person_id = ci.person_id AND ci.movie_id = ml.linked_movie_id;
Calculating metrics for query 7c.sql
Metrics for query 7c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 8.44912, 'q_error': np.float32(289.97165), 'inference_time': 0.5322384834289551, 'timestamp': 1745854782.9286976}
Saving results for query 7c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7c/NEO/7c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7c/NEO/7c.sql_neo_metrics.json
INFO:__main__:Evaluated 7c.sql: Latency=8.45ms, Q-error=289.97
Evaluating queries:  12%|█▏        | 14/113 [02:44<19:25, 11.77s/it]Evaluating query 12b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12b/12b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12b/NEO for query 12b.sql
Creating a new environment for query 12b.sql
Generating plan for query 12b.sql
Evaluating plan for query 12b.sql
Executing query: SELECT /*+  leading((it1 ((cn ((mi ((mi_idx t) it2)) mc)) ct))) */  MIN(mi.info) AS budget, MIN(t.title) AS unsuccsessful_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, title AS t WHERE cn.country_code ='[us]' AND ct.kind  is not NULL and (ct.kind ='production companies' or ct.kind = 'distributors') AND it1.info ='budget' AND it2.info ='bottom 10 rank' AND t.production_year >2000 AND (t.title LIKE 'Birdemic%' OR t.title LIKE '%Movie%') AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND mi.info_type_id = it1.id AND mi_idx.info_type_id = it2.id AND t.id = mc.movie_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id;
Calculating metrics for query 12b.sql
Metrics for query 12b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 2.438519, 'q_error': np.float32(83.689354), 'inference_time': 0.5771427154541016, 'timestamp': 1745854786.0144274}
Saving results for query 12b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12b/NEO/12b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12b/NEO/12b.sql_neo_metrics.json
INFO:__main__:Evaluated 12b.sql: Latency=2.44ms, Q-error=83.69
Evaluating queries:  13%|█▎        | 15/113 [02:47<14:56,  9.15s/it]Evaluating query 18a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18a/18a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18a/NEO for query 18a.sql
Creating a new environment for query 18a.sql
Generating plan for query 18a.sql
Evaluating plan for query 18a.sql
Executing query: SELECT /*+  leading((((mi_idx (t (mi (ci n)))) it1) it2)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(t.title) AS movie_title  FROM  cast_info AS ci, info_type AS it1, info_type AS it2, movie_info AS mi, movie_info_idx AS mi_idx, name AS n, title AS t WHERE ci.note  in ('(producer)', '(executive producer)') AND it1.info  = 'budget' AND it2.info  = 'votes' AND n.gender  = 'm' and n.name like '%Tim%' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 18a.sql
Metrics for query 18a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.381047, 'q_error': np.float32(116.03667), 'inference_time': 0.5088772773742676, 'timestamp': 1745854789.9525254}
Saving results for query 18a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18a/NEO/18a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18a/NEO/18a.sql_neo_metrics.json
INFO:__main__:Evaluated 18a.sql: Latency=3.38ms, Q-error=116.04
Evaluating queries:  14%|█▍        | 16/113 [02:51<12:15,  7.58s/it]Evaluating query 2b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2b/2b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2b/NEO for query 2b.sql
Creating a new environment for query 2b.sql
Generating plan for query 2b.sql
Evaluating plan for query 2b.sql
Executing query: SELECT /*+  leading((((t mc) (k mk)) cn)) */  MIN(t.title) AS movie_title  FROM  company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, title AS t WHERE cn.country_code ='[nl]' AND k.keyword ='character-name-in-title' AND cn.id = mc.company_id AND mc.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 2b.sql
Metrics for query 2b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 1.041681, 'q_error': np.float32(35.750225), 'inference_time': 0.14299416542053223, 'timestamp': 1745854791.1923203}
Saving results for query 2b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2b/NEO/2b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2b/NEO/2b.sql_neo_metrics.json
INFO:__main__:Evaluated 2b.sql: Latency=1.04ms, Q-error=35.75
Evaluating queries:  15%|█▌        | 17/113 [02:53<09:04,  5.67s/it]Evaluating query 5b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5b/5b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5b/NEO for query 5b.sql
Creating a new environment for query 5b.sql
Generating plan for query 5b.sql
Evaluating plan for query 5b.sql
Executing query: SELECT /*+  leading(((((mc t) ct) mi) it)) */  MIN(t.title) AS american_vhs_movie  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info AS mi, title AS t WHERE ct.kind  = 'production companies' AND mc.note  like '%(VHS)%' and mc.note like '%(USA)%' and mc.note like '%(1994)%' AND mi.info  IN ('USA', 'America') AND t.production_year > 2010 AND t.id = mi.movie_id AND t.id = mc.movie_id AND mc.movie_id = mi.movie_id AND ct.id = mc.company_type_id AND it.id = mi.info_type_id;
Calculating metrics for query 5b.sql
Metrics for query 5b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.162737, 'q_error': np.float32(5.585092), 'inference_time': 0.06656789779663086, 'timestamp': 1745854791.4649603}
Saving results for query 5b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5b/NEO/5b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5b/NEO/5b.sql_neo_metrics.json
INFO:__main__:Evaluated 5b.sql: Latency=0.16ms, Q-error=5.59
Evaluating queries:  16%|█▌        | 18/113 [02:53<06:24,  4.05s/it]Evaluating query 3b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3b/3b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3b/NEO for query 3b.sql
Creating a new environment for query 3b.sql
Generating plan for query 3b.sql
Evaluating plan for query 3b.sql
Executing query: SELECT /*+  leading((k (t (mi mk)))) */  MIN(t.title) AS movie_title  FROM  keyword AS k, movie_info AS mi, movie_keyword AS mk, title AS t WHERE k.keyword  like '%sequel%' AND mi.info  IN ('Bulgaria') AND t.production_year > 2010 AND t.id = mi.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi.movie_id AND k.id = mk.keyword_id;
Calculating metrics for query 3b.sql
Metrics for query 3b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 0.957545, 'q_error': np.float32(32.8627), 'inference_time': 0.05188345909118652, 'timestamp': 1745854792.509842}
Saving results for query 3b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3b/NEO/3b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3b/NEO/3b.sql_neo_metrics.json
INFO:__main__:Evaluated 3b.sql: Latency=0.96ms, Q-error=32.86
Evaluating queries:  17%|█▋        | 19/113 [02:54<04:57,  3.16s/it]Evaluating query 33c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33c/33c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33c/NEO for query 33c.sql
Creating a new environment for query 33c.sql
Generating plan for query 33c.sql
Evaluating plan for query 33c.sql
Executing query: SELECT /*+  leading(((((mc1 t1) cn1) ((cn2 mc2) ((it1 mi_idx1) ((it2 ((kt2 t2) mi_idx2)) (lt ml))))) kt1)) */  MIN(cn1.name) AS first_company, MIN(cn2.name) AS second_company, MIN(mi_idx1.info) AS first_rating, MIN(mi_idx2.info) AS second_rating, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie  FROM  company_name AS cn1, company_name AS cn2, info_type AS it1, info_type AS it2, kind_type AS kt1, kind_type AS kt2, link_type AS lt, movie_companies AS mc1, movie_companies AS mc2, movie_info_idx AS mi_idx1, movie_info_idx AS mi_idx2, movie_link AS ml, title AS t1, title AS t2 WHERE cn1.country_code  != '[us]' AND it1.info  = 'rating' AND it2.info  = 'rating' AND kt1.kind  in ('tv series', 'episode') AND kt2.kind  in ('tv series', 'episode') AND lt.link  in ('sequel', 'follows', 'followed by') AND mi_idx2.info  < '3.5' AND t2.production_year  between 2000 and 2010 AND lt.id = ml.link_type_id AND t1.id = ml.movie_id AND t2.id = ml.linked_movie_id AND it1.id = mi_idx1.info_type_id AND t1.id = mi_idx1.movie_id AND kt1.id = t1.kind_id AND cn1.id = mc1.company_id AND t1.id = mc1.movie_id AND ml.movie_id = mi_idx1.movie_id AND ml.movie_id = mc1.movie_id AND mi_idx1.movie_id = mc1.movie_id AND it2.id = mi_idx2.info_type_id AND t2.id = mi_idx2.movie_id AND kt2.id = t2.kind_id AND cn2.id = mc2.company_id AND t2.id = mc2.movie_id AND ml.linked_movie_id = mi_idx2.movie_id AND ml.linked_movie_id = mc2.movie_id AND mi_idx2.movie_id = mc2.movie_id;
Calculating metrics for query 33c.sql
Metrics for query 33c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.8068980000000003, 'q_error': np.float32(130.65176), 'inference_time': 2.6909019947052, 'timestamp': 1745854799.2781541}
Saving results for query 33c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33c/NEO/33c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33c/NEO/33c.sql_neo_metrics.json
INFO:__main__:Evaluated 33c.sql: Latency=3.81ms, Q-error=130.65
Evaluating queries:  18%|█▊        | 20/113 [03:01<06:33,  4.23s/it]Evaluating query 28a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28a/28a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28a/NEO for query 28a.sql
Creating a new environment for query 28a.sql
Generating plan for query 28a.sql
Evaluating plan for query 28a.sql
Executing query: SELECT /*+  leading((((it2 (cn (ct (mc mi_idx)))) ((mk (cct2 (cct1 cc))) (k (kt (mi t))))) it1)) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS complete_euro_dark_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cct1.kind  = 'crew' AND cct2.kind  != 'complete+verified' AND cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mc.note  not like '%(USA)%' and mc.note like '%(200%)%' AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Danish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  < '8.5' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND t.id = cc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = cc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = cc.movie_id AND mc.movie_id = mi_idx.movie_id AND mc.movie_id = cc.movie_id AND mi_idx.movie_id = cc.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 28a.sql
Metrics for query 28a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 83.956211, 'q_error': np.float32(2881.3557), 'inference_time': 2.479158639907837, 'timestamp': 1745854886.0934243}
Saving results for query 28a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28a/NEO/28a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28a/NEO/28a.sql_neo_metrics.json
INFO:__main__:Evaluated 28a.sql: Latency=83.96ms, Q-error=2881.36
Evaluating queries:  19%|█▊        | 21/113 [04:27<44:30, 29.03s/it]Evaluating query 8b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8b/8b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8b/NEO for query 8b.sql
Creating a new environment for query 8b.sql
Generating plan for query 8b.sql
Evaluating plan for query 8b.sql
Executing query: SELECT /*+  leading(((cn (n (an (mc (rt ci))))) t)) */  MIN(an.name) AS acress_pseudonym, MIN(t.title) AS japanese_anime_movie  FROM  aka_name AS an, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n, role_type AS rt, title AS t WHERE ci.note ='(voice: English version)' AND cn.country_code ='[jp]' AND mc.note like '%(Japan)%' and mc.note not like '%(USA)%' and (mc.note like '%(2006)%' or mc.note like '%(2007)%') AND n.name like '%Yo%' and n.name not like '%Yu%' AND rt.role ='actress' AND t.production_year between 2006 and 2007 and (t.title like 'One Piece%' or t.title like 'Dragon Ball Z%') AND an.person_id = n.id AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND an.person_id = ci.person_id AND ci.movie_id = mc.movie_id;
Calculating metrics for query 8b.sql
Metrics for query 8b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 2.292523, 'q_error': np.float32(78.67881), 'inference_time': 0.15388035774230957, 'timestamp': 1745854888.6249318}
Saving results for query 8b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8b/NEO/8b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8b/NEO/8b.sql_neo_metrics.json
INFO:__main__:Evaluated 8b.sql: Latency=2.29ms, Q-error=78.68
Evaluating queries:  19%|█▉        | 22/113 [04:30<31:57, 21.07s/it]Evaluating query 14b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14b/14b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14b/NEO for query 14b.sql
Creating a new environment for query 14b.sql
Generating plan for query 14b.sql
Evaluating plan for query 14b.sql
Executing query: SELECT /*+  leading(((((it1 (mi_idx ((t k) mi))) kt) it2) mk)) */  MIN(mi_idx.info) AS rating, MIN(t.title) AS western_dark_production  FROM  info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title') AND kt.kind  = 'movie' AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  > '6.0' AND t.production_year  > 2010 and (t.title like '%murder%' or t.title like '%Murder%' or t.title like '%Mord%') AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 14b.sql
Metrics for query 14b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 3.889785, 'q_error': np.float32(133.49643), 'inference_time': 0.1985628604888916, 'timestamp': 1745854892.7591608}
Saving results for query 14b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14b/NEO/14b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14b/NEO/14b.sql_neo_metrics.json
INFO:__main__:Evaluated 14b.sql: Latency=3.89ms, Q-error=133.50
Evaluating queries:  20%|██        | 23/113 [04:34<23:58, 15.99s/it]Evaluating query 32b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32b/32b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32b/NEO for query 32b.sql
Creating a new environment for query 32b.sql
Generating plan for query 32b.sql
Evaluating plan for query 32b.sql
Executing query: SELECT /*+  leading((lt (t2 ((ml (k t1)) mk)))) */  MIN(lt.link) AS link_type, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie  FROM  keyword AS k, link_type AS lt, movie_keyword AS mk, movie_link AS ml, title AS t1, title AS t2 WHERE k.keyword ='character-name-in-title' AND mk.keyword_id = k.id AND t1.id = mk.movie_id AND ml.movie_id = t1.id AND ml.linked_movie_id = t2.id AND lt.id = ml.link_type_id AND mk.movie_id = t1.id;
Calculating metrics for query 32b.sql
Metrics for query 32b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 0.634137, 'q_error': np.float32(21.76342), 'inference_time': 0.14595627784729004, 'timestamp': 1745854893.5781987}
Saving results for query 32b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32b/NEO/32b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32b/NEO/32b.sql_neo_metrics.json
INFO:__main__:Evaluated 32b.sql: Latency=0.63ms, Q-error=21.76
Evaluating queries:  21%|██        | 24/113 [04:35<16:57, 11.43s/it]Evaluating query 3a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3a/3a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3a/NEO for query 3a.sql
Creating a new environment for query 3a.sql
Generating plan for query 3a.sql
Evaluating plan for query 3a.sql
Executing query: SELECT /*+  leading((k (t (mi mk)))) */  MIN(t.title) AS movie_title  FROM  keyword AS k, movie_info AS mi, movie_keyword AS mk, title AS t WHERE k.keyword  like '%sequel%' AND mi.info  IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German') AND t.production_year > 2005 AND t.id = mi.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi.movie_id AND k.id = mk.keyword_id;
Calculating metrics for query 3a.sql
Metrics for query 3a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 3.100077, 'q_error': np.float32(106.39385), 'inference_time': 0.03979635238647461, 'timestamp': 1745854896.755432}
Saving results for query 3a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3a/NEO/3a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3a/NEO/3a.sql_neo_metrics.json
INFO:__main__:Evaluated 3a.sql: Latency=3.10ms, Q-error=106.39
Evaluating queries:  22%|██▏       | 25/113 [04:38<13:08,  8.96s/it]Evaluating query 18b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18b/18b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18b/NEO for query 18b.sql
Creating a new environment for query 18b.sql
Generating plan for query 18b.sql
Evaluating plan for query 18b.sql
Executing query: SELECT /*+  leading((n ((mi_idx (((t mi) ci) it1)) it2))) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(t.title) AS movie_title  FROM  cast_info AS ci, info_type AS it1, info_type AS it2, movie_info AS mi, movie_info_idx AS mi_idx, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'rating' AND mi.info  in ('Horror', 'Thriller') and mi.note is NULL AND mi_idx.info  > '8.0' AND n.gender  is not null and n.gender = 'f' AND t.production_year  between 2008 and 2014 AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 18b.sql
Metrics for query 18b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 4.0853139999999994, 'q_error': np.float32(140.20692), 'inference_time': 0.7844321727752686, 'timestamp': 1745854901.6736388}
Saving results for query 18b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18b/NEO/18b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18b/NEO/18b.sql_neo_metrics.json
INFO:__main__:Evaluated 18b.sql: Latency=4.09ms, Q-error=140.21
Evaluating queries:  23%|██▎       | 26/113 [04:43<11:13,  7.75s/it]Evaluating query 27c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27c/27c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27c/NEO for query 27c.sql
Creating a new environment for query 27c.sql
Generating plan for query 27c.sql
Evaluating plan for query 27c.sql
Executing query: SELECT /*+  leading(((ct (cct1 (cn (cct2 (mi (cc (mc (ml (k (mk t)))))))))) lt)) */  MIN(cn.name) AS producing_company, MIN(lt.link) AS link_type, MIN(t.title) AS complete_western_sequel  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like 'complete%' AND cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'English') AND t.production_year BETWEEN 1950 AND 2010 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND mi.movie_id = t.id AND t.id = cc.movie_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND ml.movie_id = mi.movie_id AND mk.movie_id = mi.movie_id AND mc.movie_id = mi.movie_id AND ml.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = cc.movie_id;
Calculating metrics for query 27c.sql
Metrics for query 27c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 19.176594, 'q_error': np.float32(658.1358), 'inference_time': 1.2847175598144531, 'timestamp': 1745854922.2843184}
Saving results for query 27c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27c/NEO/27c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27c/NEO/27c.sql_neo_metrics.json
INFO:__main__:Evaluated 27c.sql: Latency=19.18ms, Q-error=658.14
Evaluating queries:  24%|██▍       | 27/113 [05:04<16:38, 11.61s/it]Evaluating query 14c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14c/14c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14c/NEO for query 14c.sql
Creating a new environment for query 14c.sql
Generating plan for query 14c.sql
Evaluating plan for query 14c.sql
Executing query: SELECT /*+  leading(((mi ((((mi_idx (t kt)) k) mk) it2)) it1)) */  MIN(mi_idx.info) AS rating, MIN(t.title) AS north_european_dark_production  FROM  info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Danish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  < '8.5' AND t.production_year  > 2005 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;
Error evaluating query 14c.sql: canceling statement due to statement timeout

ERROR:__main__:Error evaluating query 14c.sql: canceling statement due to statement timeout
Traceback (most recent call last):
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 112, in evaluate_queries
    query_result = self._evaluate_single_query(query_name, file_path)
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 164, in _evaluate_single_query
    query_plan,actual_latency = eval_env.explain_analyze()
  File "/data/hdd1/users/kmparmp/Neo/database_env/base.py", line 69, in explain_analyze
    return explain_analyze_plan(self.plan, self.conn, self.db)
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 407, in explain_analyze_plan
    raise e
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 399, in explain_analyze_plan
    cur.execute(
psycopg2.errors.QueryCanceled: canceling statement due to statement timeout

Evaluating queries:  25%|██▍       | 28/113 [10:04<2:19:17, 98.32s/it]Evaluating query 4c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4c/4c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4c/NEO for query 4c.sql
Creating a new environment for query 4c.sql
Generating plan for query 4c.sql
Evaluating plan for query 4c.sql
Executing query: SELECT /*+  leading((k ((mk (it mi_idx)) t))) */  MIN(mi_idx.info) AS rating, MIN(t.title) AS movie_title  FROM  info_type AS it, keyword AS k, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE it.info ='rating' AND k.keyword  like '%sequel%' AND mi_idx.info  > '2.0' AND t.production_year > 1990 AND t.id = mi_idx.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 4c.sql
Metrics for query 4c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 3.636143, 'q_error': np.float32(124.7915), 'inference_time': 0.10856461524963379, 'timestamp': 1745855226.725299}
Saving results for query 4c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4c/NEO/4c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4c/NEO/4c.sql_neo_metrics.json
INFO:__main__:Evaluated 4c.sql: Latency=3.64ms, Q-error=124.79
Evaluating queries:  26%|██▌       | 29/113 [10:08<1:37:56, 69.96s/it]Evaluating query 29a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29a/29a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29a/NEO for query 29a.sql
Creating a new environment for query 29a.sql
Generating plan for query 29a.sql
Evaluating plan for query 29a.sql
Executing query: SELECT /*+  leading((((it (t (mi (mc cn)))) ((it3 ((n pi) (chn (an ci)))) (cct2 (k (cct1 (cc mk)))))) rt)) */  MIN(chn.name) AS voiced_char, MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_animation  FROM  aka_name AS an, complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, info_type AS it3, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, person_info AS pi, role_type AS rt, title AS t WHERE cct1.kind  ='cast' AND cct2.kind  ='complete+verified' AND chn.name  = 'Queen' AND ci.note  in ('(voice)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND it3.info  = 'trivia' AND k.keyword  = 'computer-animation' AND mi.info  is not null and (mi.info like 'Japan:%200%' or mi.info like 'USA:%200%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.title  = 'Shrek 2' AND t.production_year  between 2000 and 2010 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND n.id = pi.person_id AND ci.person_id = pi.person_id AND it3.id = pi.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Error evaluating query 29a.sql: canceling statement due to statement timeout

ERROR:__main__:Error evaluating query 29a.sql: canceling statement due to statement timeout
Traceback (most recent call last):
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 112, in evaluate_queries
    query_result = self._evaluate_single_query(query_name, file_path)
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 164, in _evaluate_single_query
    query_plan,actual_latency = eval_env.explain_analyze()
  File "/data/hdd1/users/kmparmp/Neo/database_env/base.py", line 69, in explain_analyze
    return explain_analyze_plan(self.plan, self.conn, self.db)
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 407, in explain_analyze_plan
    raise e
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 399, in explain_analyze_plan
    cur.execute(
psycopg2.errors.QueryCanceled: canceling statement due to statement timeout

Evaluating queries:  27%|██▋       | 30/113 [15:12<3:13:41, 140.02s/it]Evaluating query 21b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21b/21b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21b/NEO for query 21b.sql
Creating a new environment for query 21b.sql
Generating plan for query 21b.sql
Evaluating plan for query 21b.sql
Executing query: SELECT /*+  leading(((cn (t (ct ((((k mk) mi) ml) mc)))) lt)) */  MIN(cn.name) AS company_name, MIN(lt.link) AS link_type, MIN(t.title) AS german_follow_up  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND mi.info IN ('Germany', 'German') AND t.production_year BETWEEN 2000 AND 2010 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND mi.movie_id = t.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND ml.movie_id = mi.movie_id AND mk.movie_id = mi.movie_id AND mc.movie_id = mi.movie_id;
Calculating metrics for query 21b.sql
Metrics for query 21b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.926865, 'q_error': np.float32(31.809769), 'inference_time': 0.2978818416595459, 'timestamp': 1745855531.504646}
Saving results for query 21b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21b/NEO/21b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21b/NEO/21b.sql_neo_metrics.json
INFO:__main__:Evaluated 21b.sql: Latency=0.93ms, Q-error=31.81
Evaluating queries:  27%|██▋       | 31/113 [15:13<2:14:30, 98.42s/it] Evaluating query 21a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21a/21a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21a/NEO for query 21a.sql
Creating a new environment for query 21a.sql
Generating plan for query 21a.sql
Evaluating plan for query 21a.sql
Executing query: SELECT /*+  leading(((cn (t (ct ((((k mk) mi) ml) mc)))) lt)) */  MIN(cn.name) AS company_name, MIN(lt.link) AS link_type, MIN(t.title) AS western_follow_up  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German') AND t.production_year BETWEEN 1950 AND 2000 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND mi.movie_id = t.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND ml.movie_id = mi.movie_id AND mk.movie_id = mi.movie_id AND mc.movie_id = mi.movie_id;
Calculating metrics for query 21a.sql
Metrics for query 21a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.565648, 'q_error': np.float32(19.412895), 'inference_time': 0.36716175079345703, 'timestamp': 1745855532.5453558}
Saving results for query 21a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21a/NEO/21a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21a/NEO/21a.sql_neo_metrics.json
INFO:__main__:Evaluated 21a.sql: Latency=0.57ms, Q-error=19.41
Evaluating queries:  28%|██▊       | 32/113 [15:14<1:33:24, 69.19s/it]Evaluating query 29c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29c/29c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29c/NEO for query 29c.sql
Creating a new environment for query 29c.sql
Generating plan for query 29c.sql
Evaluating plan for query 29c.sql
Executing query: SELECT /*+  leading((t (((it3 (pi n)) ((it mi) (rt (chn (an ci))))) ((mc cn) (k (mk (cct2 (cc cct1)))))))) */  MIN(chn.name) AS voiced_char, MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_animation  FROM  aka_name AS an, complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, info_type AS it3, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, person_info AS pi, role_type AS rt, title AS t WHERE cct1.kind  ='cast' AND cct2.kind  ='complete+verified' AND ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND it3.info  = 'trivia' AND k.keyword  = 'computer-animation' AND mi.info  is not null and (mi.info like 'Japan:%200%' or mi.info like 'USA:%200%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.production_year  between 2000 and 2010 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND n.id = pi.person_id AND ci.person_id = pi.person_id AND it3.id = pi.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Error evaluating query 29c.sql: canceling statement due to statement timeout

ERROR:__main__:Error evaluating query 29c.sql: canceling statement due to statement timeout
Traceback (most recent call last):
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 112, in evaluate_queries
    query_result = self._evaluate_single_query(query_name, file_path)
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 164, in _evaluate_single_query
    query_plan,actual_latency = eval_env.explain_analyze()
  File "/data/hdd1/users/kmparmp/Neo/database_env/base.py", line 69, in explain_analyze
    return explain_analyze_plan(self.plan, self.conn, self.db)
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 407, in explain_analyze_plan
    raise e
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 399, in explain_analyze_plan
    cur.execute(
psycopg2.errors.QueryCanceled: canceling statement due to statement timeout

Evaluating queries:  29%|██▉       | 33/113 [20:18<3:06:21, 139.76s/it]Evaluating query 2a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2a/2a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2a/NEO for query 2a.sql
Creating a new environment for query 2a.sql
Generating plan for query 2a.sql
Evaluating plan for query 2a.sql
Executing query: SELECT /*+  leading((((t mc) (k mk)) cn)) */  MIN(t.title) AS movie_title  FROM  company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, title AS t WHERE cn.country_code ='[de]' AND k.keyword ='character-name-in-title' AND cn.id = mc.company_id AND mc.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 2a.sql
Metrics for query 2a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 1.1366720000000001, 'q_error': np.float32(39.010292), 'inference_time': 0.16508793830871582, 'timestamp': 1745855838.3225217}
Saving results for query 2a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2a/NEO/2a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2a/NEO/2a.sql_neo_metrics.json
INFO:__main__:Evaluated 2a.sql: Latency=1.14ms, Q-error=39.01
Evaluating queries:  30%|███       | 34/113 [20:20<2:09:20, 98.24s/it] Evaluating query 1a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1a/1a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1a/NEO for query 1a.sql
Creating a new environment for query 1a.sql
Generating plan for query 1a.sql
Evaluating plan for query 1a.sql
Executing query: SELECT /*+  leading(((((ct mc) mi_idx) it) t)) */  MIN(mc.note) AS production_note, MIN(t.title) AS movie_title, MIN(t.production_year) AS movie_year  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info_idx AS mi_idx, title AS t WHERE ct.kind = 'production companies' AND it.info = 'top 250 rank' AND mc.note  not like '%(as Metro-Goldwyn-Mayer Pictures)%' AND (mc.note like '%(co-production)%' or mc.note like '%(presents)%') AND ct.id = mc.company_type_id AND t.id = mc.movie_id AND t.id = mi_idx.movie_id AND mc.movie_id = mi_idx.movie_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 1a.sql
Metrics for query 1a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.40508, 'q_error': np.float32(13.902241), 'inference_time': 0.07992243766784668, 'timestamp': 1745855838.8497844}
Saving results for query 1a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1a/NEO/1a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1a/NEO/1a.sql_neo_metrics.json
INFO:__main__:Evaluated 1a.sql: Latency=0.41ms, Q-error=13.90
Evaluating queries:  31%|███       | 35/113 [20:20<1:29:36, 68.92s/it]Evaluating query 26a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26a/26a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26a/NEO for query 26a.sql
Creating a new environment for query 26a.sql
Generating plan for query 26a.sql
Evaluating plan for query 26a.sql
Executing query: SELECT /*+  leading((k (cct1 (mk (cct2 (((it2 ((((cc ci) n) mi_idx) chn)) t) kt)))))) */  MIN(chn.name) AS character_name, MIN(mi_idx.info) AS rating, MIN(n.name) AS playing_actor, MIN(t.title) AS complete_hero_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, info_type AS it2, keyword AS k, kind_type AS kt, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  is not NULL and (chn.name like '%man%' or chn.name like '%Man%') AND it2.info  = 'rating' AND k.keyword  in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') AND kt.kind  = 'movie' AND mi_idx.info  > '7.0' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND mk.movie_id = mi_idx.movie_id AND ci.movie_id = cc.movie_id AND ci.movie_id = mi_idx.movie_id AND cc.movie_id = mi_idx.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 26a.sql
Metrics for query 26a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 33.715576, 'q_error': np.float32(1157.11), 'inference_time': 1.22491455078125, 'timestamp': 1745855874.1196704}
Saving results for query 26a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26a/NEO/26a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26a/NEO/26a.sql_neo_metrics.json
INFO:__main__:Evaluated 26a.sql: Latency=33.72ms, Q-error=1157.11
Evaluating queries:  32%|███▏      | 36/113 [20:55<1:15:29, 58.83s/it]Evaluating query 24b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24b/24b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24b/NEO for query 24b.sql
Creating a new environment for query 24b.sql
Generating plan for query 24b.sql
Evaluating plan for query 24b.sql
Executing query: SELECT /*+  leading((k (cn (it (((((an (mk (t (n ci)))) rt) chn) mc) mi))))) */  MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS kung_fu_panda  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND cn.name  = 'DreamWorks Animation' AND it.info  = 'release dates' AND k.keyword  in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') AND mi.info  is not null and (mi.info like 'Japan:%201%' or mi.info like 'USA:%201%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.production_year  > 2010 AND t.title like 'Kung Fu Panda%' AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND ci.movie_id = mk.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND k.id = mk.keyword_id;
Calculating metrics for query 24b.sql
Metrics for query 24b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 2.2716439999999998, 'q_error': np.float32(77.96224), 'inference_time': 1.455085039138794, 'timestamp': 1745855877.9998379}
Saving results for query 24b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24b/NEO/24b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24b/NEO/24b.sql_neo_metrics.json
INFO:__main__:Evaluated 24b.sql: Latency=2.27ms, Q-error=77.96
Evaluating queries:  33%|███▎      | 37/113 [20:59<53:38, 42.34s/it]  Evaluating query 27a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27a/27a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27a/NEO for query 27a.sql
Creating a new environment for query 27a.sql
Generating plan for query 27a.sql
Evaluating plan for query 27a.sql
Executing query: SELECT /*+  leading(((ct (cct1 (cn (cct2 (mi (cc (mc (ml (k (mk t)))))))))) lt)) */  MIN(cn.name) AS producing_company, MIN(lt.link) AS link_type, MIN(t.title) AS complete_western_sequel  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cct1.kind  in ('cast', 'crew') AND cct2.kind  = 'complete' AND cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND mi.info IN ('Sweden', 'Germany','Swedish', 'German') AND t.production_year BETWEEN 1950 AND 2000 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND mi.movie_id = t.id AND t.id = cc.movie_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND ml.movie_id = mi.movie_id AND mk.movie_id = mi.movie_id AND mc.movie_id = mi.movie_id AND ml.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = cc.movie_id;
Calculating metrics for query 27a.sql
Metrics for query 27a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 7.715693, 'q_error': np.float32(264.80063), 'inference_time': 1.237227439880371, 'timestamp': 1745855887.0900247}
Saving results for query 27a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27a/NEO/27a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27a/NEO/27a.sql_neo_metrics.json
INFO:__main__:Evaluated 27a.sql: Latency=7.72ms, Q-error=264.80
Evaluating queries:  34%|███▎      | 38/113 [21:08<40:27, 32.37s/it]Evaluating query 31b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31b/31b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31b/NEO for query 31b.sql
Creating a new environment for query 31b.sql
Generating plan for query 31b.sql
Evaluating plan for query 31b.sql
Executing query: SELECT /*+  leading((n (((mc (ci (((t (it1 (mi mk))) mi_idx) it2))) k) cn))) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS writer, MIN(t.title) AS violent_liongate_movie  FROM  cast_info AS ci, company_name AS cn, info_type AS it1, info_type AS it2, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND cn.name  like 'Lionsgate%' AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mc.note  like '%(Blu-ray)%' AND mi.info  in ('Horror', 'Thriller') AND n.gender  = 'm' AND t.production_year  > 2000 and (t.title like '%Freddy%' or t.title like '%Jason%' or t.title like 'Saw%') AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = mc.movie_id AND mi_idx.movie_id = mk.movie_id AND mi_idx.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id AND cn.id = mc.company_id;
Calculating metrics for query 31b.sql
Metrics for query 31b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 9.237936, 'q_error': np.float32(317.04358), 'inference_time': 1.1023218631744385, 'timestamp': 1745855897.5340848}
Saving results for query 31b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31b/NEO/31b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31b/NEO/31b.sql_neo_metrics.json
INFO:__main__:Evaluated 31b.sql: Latency=9.24ms, Q-error=317.04
Evaluating queries:  35%|███▍      | 39/113 [21:19<31:48, 25.79s/it]Evaluating query 7b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7b/7b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7b/NEO for query 7b.sql
Creating a new environment for query 7b.sql
Generating plan for query 7b.sql
Evaluating plan for query 7b.sql
Executing query: SELECT /*+  leading((n (it ((t (pi (lt (ml ci)))) an)))) */  MIN(n.name) AS of_person, MIN(t.title) AS biography_movie  FROM  aka_name AS an, cast_info AS ci, info_type AS it, link_type AS lt, movie_link AS ml, name AS n, person_info AS pi, title AS t WHERE an.name LIKE '%a%' AND it.info ='mini biography' AND lt.link ='features' AND n.name_pcode_cf LIKE 'D%' AND n.gender = 'm' AND pi.note ='Volker Boehm' AND t.production_year BETWEEN 1980 AND 1984 AND n.id = an.person_id AND n.id = pi.person_id AND ci.person_id = n.id AND t.id = ci.movie_id AND ml.linked_movie_id = t.id AND lt.id = ml.link_type_id AND it.id = pi.info_type_id AND pi.person_id = an.person_id AND pi.person_id = ci.person_id AND an.person_id = ci.person_id AND ci.movie_id = ml.linked_movie_id;
Calculating metrics for query 7b.sql
Metrics for query 7b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 23.999689999999998, 'q_error': np.float32(823.6632), 'inference_time': 0.21727991104125977, 'timestamp': 1745855921.9280343}
Saving results for query 7b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7b/NEO/7b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7b/NEO/7b.sql_neo_metrics.json
INFO:__main__:Evaluated 7b.sql: Latency=24.00ms, Q-error=823.66
Evaluating queries:  35%|███▌      | 40/113 [21:43<30:52, 25.37s/it]Evaluating query 10c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10c/10c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10c/NEO for query 10c.sql
Creating a new environment for query 10c.sql
Generating plan for query 10c.sql
Evaluating plan for query 10c.sql
Executing query: SELECT /*+  leading(((ct ((cn (mc (ci chn))) t)) rt)) */  MIN(chn.name) AS character, MIN(t.title) AS movie_with_american_producer  FROM  char_name AS chn, cast_info AS ci, company_name AS cn, company_type AS ct, movie_companies AS mc, role_type AS rt, title AS t WHERE ci.note  like '%(producer)%' AND cn.country_code  = '[us]' AND t.production_year > 1990 AND t.id = mc.movie_id AND t.id = ci.movie_id AND ci.movie_id = mc.movie_id AND chn.id = ci.person_role_id AND rt.id = ci.role_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 10c.sql
Metrics for query 10c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 4.403336, 'q_error': np.float32(151.12138), 'inference_time': 0.16063594818115234, 'timestamp': 1745855926.5460203}
Saving results for query 10c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10c/NEO/10c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10c/NEO/10c.sql_neo_metrics.json
INFO:__main__:Evaluated 10c.sql: Latency=4.40ms, Q-error=151.12
Evaluating queries:  36%|███▋      | 41/113 [21:48<22:58, 19.14s/it]Evaluating query 22d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22d/22d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22d/NEO for query 22d.sql
Creating a new environment for query 22d.sql
Generating plan for query 22d.sql
Evaluating plan for query 22d.sql
Executing query: SELECT /*+  leading(((mk (((mi_idx (it1 (kt (t ((mc cn) mi))))) it2) ct)) k)) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS western_violent_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Danish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  < '8.5' AND t.production_year  > 2005 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mc.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id;
Calculating metrics for query 22d.sql
Metrics for query 22d.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 13.589362, 'q_error': np.float32(466.38348), 'inference_time': 1.2060468196868896, 'timestamp': 1745855941.4606643}
Saving results for query 22d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22d/NEO/22d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22d/NEO/22d.sql_neo_metrics.json
INFO:__main__:Evaluated 22d.sql: Latency=13.59ms, Q-error=466.38
Evaluating queries:  37%|███▋      | 42/113 [22:03<21:09, 17.88s/it]Evaluating query 27b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27b/27b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27b/NEO for query 27b.sql
Creating a new environment for query 27b.sql
Generating plan for query 27b.sql
Evaluating plan for query 27b.sql
Executing query: SELECT /*+  leading(((ct (cct1 (cn (cct2 (mi (cc (mc (ml (k (mk t)))))))))) lt)) */  MIN(cn.name) AS producing_company, MIN(lt.link) AS link_type, MIN(t.title) AS complete_western_sequel  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cct1.kind  in ('cast', 'crew') AND cct2.kind  = 'complete' AND cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND mi.info IN ('Sweden', 'Germany','Swedish', 'German') AND t.production_year  = 1998 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND mi.movie_id = t.id AND t.id = cc.movie_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND ml.movie_id = mi.movie_id AND mk.movie_id = mi.movie_id AND mc.movie_id = mi.movie_id AND ml.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = cc.movie_id;
Calculating metrics for query 27b.sql
Metrics for query 27b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 4.420128, 'q_error': np.float32(151.69766), 'inference_time': 1.3121273517608643, 'timestamp': 1745855947.3558877}
Saving results for query 27b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27b/NEO/27b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/27b/NEO/27b.sql_neo_metrics.json
INFO:__main__:Evaluated 27b.sql: Latency=4.42ms, Q-error=151.70
Evaluating queries:  38%|███▊      | 43/113 [22:09<16:40, 14.29s/it]Evaluating query 6f.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6f/6f.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6f/NEO for query 6f.sql
Creating a new environment for query 6f.sql
Generating plan for query 6f.sql
Evaluating plan for query 6f.sql
Executing query: SELECT /*+  leading(((mk ((ci t) n)) k)) */  MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS hero_movie  FROM  cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') AND t.production_year > 2000 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;
Calculating metrics for query 6f.sql
Metrics for query 6f.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 18.658437999999997, 'q_error': np.float32(640.3528), 'inference_time': 0.053171396255493164, 'timestamp': 1745855966.1427617}
Saving results for query 6f.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6f/NEO/6f.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6f/NEO/6f.sql_neo_metrics.json
INFO:__main__:Evaluated 6f.sql: Latency=18.66ms, Q-error=640.35
Evaluating queries:  39%|███▉      | 44/113 [22:28<17:59, 15.65s/it]Evaluating query 31a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31a/31a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31a/NEO for query 31a.sql
Creating a new environment for query 31a.sql
Generating plan for query 31a.sql
Evaluating plan for query 31a.sql
Executing query: SELECT /*+  leading((((((cn mc) t) ((mk (ci n)) ((mi mi_idx) it1))) it2) k)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS writer, MIN(t.title) AS violent_liongate_movie  FROM  cast_info AS ci, company_name AS cn, info_type AS it1, info_type AS it2, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND cn.name  like 'Lionsgate%' AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mi.info  in ('Horror', 'Thriller') AND n.gender   = 'm' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = mc.movie_id AND mi_idx.movie_id = mk.movie_id AND mi_idx.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id AND cn.id = mc.company_id;
Calculating metrics for query 31a.sql
Metrics for query 31a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 5.46684, 'q_error': np.float32(187.62056), 'inference_time': 2.1127841472625732, 'timestamp': 1745855973.8731687}
Saving results for query 31a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31a/NEO/31a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31a/NEO/31a.sql_neo_metrics.json
INFO:__main__:Evaluated 31a.sql: Latency=5.47ms, Q-error=187.62
Evaluating queries:  40%|███▉      | 45/113 [22:35<15:01, 13.26s/it]Evaluating query 2c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2c/2c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2c/NEO for query 2c.sql
Creating a new environment for query 2c.sql
Generating plan for query 2c.sql
Evaluating plan for query 2c.sql
Executing query: SELECT /*+  leading((((t mc) (k mk)) cn)) */  MIN(t.title) AS movie_title  FROM  company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, title AS t WHERE cn.country_code ='[sm]' AND k.keyword ='character-name-in-title' AND cn.id = mc.company_id AND mc.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 2c.sql
Metrics for query 2c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 1.007577, 'q_error': np.float32(34.57978), 'inference_time': 0.12220454216003418, 'timestamp': 1745855975.0478384}
Saving results for query 2c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2c/NEO/2c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2c/NEO/2c.sql_neo_metrics.json
INFO:__main__:Evaluated 2c.sql: Latency=1.01ms, Q-error=34.58
Evaluating queries:  41%|████      | 46/113 [22:36<10:45,  9.63s/it]Evaluating query 13b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13b/13b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13b/NEO for query 13b.sql
Creating a new environment for query 13b.sql
Generating plan for query 13b.sql
Evaluating plan for query 13b.sql
Executing query: SELECT /*+  leading((ct ((it2 (mi (t (it (miidx (cn mc)))))) kt))) */  MIN(cn.name) AS producing_company, MIN(miidx.info) AS rating, MIN(t.title) AS movie_about_winning  FROM  company_name AS cn, company_type AS ct, info_type AS it, info_type AS it2, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS miidx, title AS t WHERE cn.country_code ='[us]' AND ct.kind ='production companies' AND it.info ='rating' AND it2.info ='release dates' AND kt.kind ='movie' AND t.title  != '' AND (t.title LIKE '%Champion%' OR t.title LIKE '%Loser%') AND mi.movie_id = t.id AND it2.id = mi.info_type_id AND kt.id = t.kind_id AND mc.movie_id = t.id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND miidx.movie_id = t.id AND it.id = miidx.info_type_id AND mi.movie_id = miidx.movie_id AND mi.movie_id = mc.movie_id AND miidx.movie_id = mc.movie_id;
Calculating metrics for query 13b.sql
Metrics for query 13b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 4.601095, 'q_error': np.float32(157.9084), 'inference_time': 0.25067949295043945, 'timestamp': 1745855979.966548}
Saving results for query 13b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13b/NEO/13b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13b/NEO/13b.sql_neo_metrics.json
INFO:__main__:Evaluated 13b.sql: Latency=4.60ms, Q-error=157.91
Evaluating queries:  42%|████▏     | 47/113 [22:41<09:02,  8.22s/it]Evaluating query 13d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13d/13d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13d/NEO for query 13d.sql
Creating a new environment for query 13d.sql
Generating plan for query 13d.sql
Evaluating plan for query 13d.sql
Executing query: SELECT /*+  leading((kt (it ((cn (ct (it2 (mc (mi t))))) miidx)))) */  MIN(cn.name) AS producing_company, MIN(miidx.info) AS rating, MIN(t.title) AS movie  FROM  company_name AS cn, company_type AS ct, info_type AS it, info_type AS it2, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS miidx, title AS t WHERE cn.country_code ='[us]' AND ct.kind ='production companies' AND it.info ='rating' AND it2.info ='release dates' AND kt.kind ='movie' AND mi.movie_id = t.id AND it2.id = mi.info_type_id AND kt.id = t.kind_id AND mc.movie_id = t.id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND miidx.movie_id = t.id AND it.id = miidx.info_type_id AND mi.movie_id = miidx.movie_id AND mi.movie_id = mc.movie_id AND miidx.movie_id = mc.movie_id;
Calculating metrics for query 13d.sql
Metrics for query 13d.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 36.870211000000005, 'q_error': np.float32(1265.3763), 'inference_time': 0.42923998832702637, 'timestamp': 1745856017.7406793}
Saving results for query 13d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13d/NEO/13d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13d/NEO/13d.sql_neo_metrics.json
INFO:__main__:Evaluated 13d.sql: Latency=36.87ms, Q-error=1265.38
Evaluating queries:  42%|████▏     | 48/113 [23:19<18:31, 17.10s/it]Evaluating query 31c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31c/31c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31c/NEO for query 31c.sql
Creating a new environment for query 31c.sql
Generating plan for query 31c.sql
Evaluating plan for query 31c.sql
Executing query: SELECT /*+  leading(((((it1 ((mi ((cn (mk (ci mc))) t)) n)) mi_idx) it2) k)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS writer, MIN(t.title) AS violent_liongate_movie  FROM  cast_info AS ci, company_name AS cn, info_type AS it1, info_type AS it2, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND cn.name  like 'Lionsgate%' AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mi.info  in ('Horror', 'Action', 'Sci-Fi', 'Thriller', 'Crime', 'War') AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = mc.movie_id AND mi_idx.movie_id = mk.movie_id AND mi_idx.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id AND cn.id = mc.company_id;
Calculating metrics for query 31c.sql
Metrics for query 31c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 7.1995190000000004, 'q_error': np.float32(247.08568), 'inference_time': 1.1220901012420654, 'timestamp': 1745856026.2056532}
Saving results for query 31c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31c/NEO/31c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/31c/NEO/31c.sql_neo_metrics.json
INFO:__main__:Evaluated 31c.sql: Latency=7.20ms, Q-error=247.09
Evaluating queries:  43%|████▎     | 49/113 [23:28<15:27, 14.49s/it]Evaluating query 23b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23b/23b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23b/NEO for query 23b.sql
Creating a new environment for query 23b.sql
Generating plan for query 23b.sql
Evaluating plan for query 23b.sql
Executing query: SELECT /*+  leading((((mk (it1 (ct (t ((((cc cct1) mi) mc) cn))))) k) kt)) */  MIN(kt.kind) AS movie_kind, MIN(t.title) AS complete_nerdy_internet_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cct1.kind  = 'complete+verified' AND cn.country_code  = '[us]' AND it1.info  = 'release dates' AND k.keyword  in ('nerd', 'loner', 'alienation', 'dignity') AND kt.kind  in ('movie') AND mi.note  like '%internet%' AND mi.info  like 'USA:% 200%' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND t.id = cc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = cc.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = cc.movie_id AND mc.movie_id = cc.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND cct1.id = cc.status_id;
Calculating metrics for query 23b.sql
Metrics for query 23b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 3.140942, 'q_error': np.float32(107.79634), 'inference_time': 0.7513523101806641, 'timestamp': 1745856030.1844742}
Saving results for query 23b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23b/NEO/23b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23b/NEO/23b.sql_neo_metrics.json
INFO:__main__:Evaluated 23b.sql: Latency=3.14ms, Q-error=107.80
Evaluating queries:  44%|████▍     | 50/113 [23:32<11:54, 11.34s/it]Evaluating query 17c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17c/17c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17c/NEO for query 17c.sql
Creating a new environment for query 17c.sql
Generating plan for query 17c.sql
Evaluating plan for query 17c.sql
Executing query: SELECT /*+  leading((((cn (((ci mk) mc) n)) k) t)) */  MIN(n.name) AS member_in_charnamed_movie, MIN(n.name) AS a1  FROM  cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword ='character-name-in-title' AND n.name  LIKE 'X%' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 17c.sql
Metrics for query 17c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 123.973794, 'q_error': np.float32(4254.749), 'inference_time': 0.23282861709594727, 'timestamp': 1745856154.5210044}
Saving results for query 17c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17c/NEO/17c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17c/NEO/17c.sql_neo_metrics.json
INFO:__main__:Evaluated 17c.sql: Latency=123.97ms, Q-error=4254.75
Evaluating queries:  45%|████▌     | 51/113 [25:36<46:44, 45.24s/it]Evaluating query 9a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9a/9a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9a/NEO for query 9a.sql
Creating a new environment for query 9a.sql
Generating plan for query 9a.sql
Evaluating plan for query 9a.sql
Executing query: SELECT /*+  leading((an (t (cn (chn (rt ((n ci) mc))))))) */  MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND mc.note  is not NULL and (mc.note like '%(USA)%' or mc.note like '%(worldwide)%') AND n.gender ='f' and n.name like '%Ang%' AND rt.role ='actress' AND t.production_year  between 2005 and 2015 AND ci.movie_id = t.id AND t.id = mc.movie_id AND ci.movie_id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND n.id = ci.person_id AND chn.id = ci.person_role_id AND an.person_id = n.id AND an.person_id = ci.person_id;
Calculating metrics for query 9a.sql
Metrics for query 9a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 4.1972700000000005, 'q_error': np.float32(144.04922), 'inference_time': 0.3599891662597656, 'timestamp': 1745856159.1322358}
Saving results for query 9a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9a/NEO/9a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9a/NEO/9a.sql_neo_metrics.json
INFO:__main__:Evaluated 9a.sql: Latency=4.20ms, Q-error=144.05
Evaluating queries:  46%|████▌     | 52/113 [25:40<33:36, 33.05s/it]Evaluating query 19c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19c/19c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19c/NEO for query 19c.sql
Creating a new environment for query 19c.sql
Generating plan for query 19c.sql
Evaluating plan for query 19c.sql
Executing query: SELECT /*+  leading((cn (chn ((rt (mc (t (((ci mi) an) n)))) it)))) */  MIN(n.name) AS voicing_actress, MIN(t.title) AS jap_engl_voiced_movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, movie_companies AS mc, movie_info AS mi, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND mi.info  is not null and (mi.info like 'Japan:%200%' or mi.info like 'USA:%200%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.production_year  > 2000 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mi.movie_id = ci.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id;
Calculating metrics for query 19c.sql
Metrics for query 19c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 5.689207000000001, 'q_error': np.float32(195.25212), 'inference_time': 0.6400485038757324, 'timestamp': 1745856165.5301018}
Saving results for query 19c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19c/NEO/19c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19c/NEO/19c.sql_neo_metrics.json
INFO:__main__:Evaluated 19c.sql: Latency=5.69ms, Q-error=195.25
Evaluating queries:  47%|████▋     | 53/113 [25:47<25:03, 25.05s/it]Evaluating query 30b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30b/30b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30b/NEO for query 30b.sql
Creating a new environment for query 30b.sql
Generating plan for query 30b.sql
Evaluating plan for query 30b.sql
Executing query: SELECT /*+  leading(((cct2 ((n (t ci)) ((it1 mi) ((cct1 (cc (k mk))) mi_idx)))) it2)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS writer, MIN(t.title) AS complete_gore_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, cast_info AS ci, info_type AS it1, info_type AS it2, keyword AS k, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  in ('cast', 'crew') AND cct2.kind  ='complete+verified' AND ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mi.info  in ('Horror', 'Thriller') AND n.gender  = 'm' AND t.production_year  > 2000 and (t.title like '%Freddy%' or t.title like '%Jason%' or t.title like 'Saw%') AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND mi_idx.movie_id = mk.movie_id AND mi_idx.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 30b.sql
Metrics for query 30b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 1.3992660000000001, 'q_error': np.float32(48.022457), 'inference_time': 1.4134573936462402, 'timestamp': 1745856168.4839263}
Saving results for query 30b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30b/NEO/30b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30b/NEO/30b.sql_neo_metrics.json
INFO:__main__:Evaluated 30b.sql: Latency=1.40ms, Q-error=48.02
Evaluating queries:  48%|████▊     | 54/113 [25:50<18:07, 18.43s/it]Evaluating query 25a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25a/25a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25a/NEO for query 25a.sql
Creating a new environment for query 25a.sql
Generating plan for query 25a.sql
Evaluating plan for query 25a.sql
Executing query: SELECT /*+  leading((k (n ((it2 ((((mk mi) it1) ci) mi_idx)) t)))) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS male_writer, MIN(t.title) AS violent_movie_title  FROM  cast_info AS ci, info_type AS it1, info_type AS it2, keyword AS k, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'blood', 'gore', 'death', 'female-nudity') AND mi.info  = 'Horror' AND n.gender  = 'm' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi_idx.movie_id = mk.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id;
Calculating metrics for query 25a.sql
Metrics for query 25a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 10.968072, 'q_error': np.float32(376.42145), 'inference_time': 0.9144244194030762, 'timestamp': 1745856180.43177}
Saving results for query 25a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25a/NEO/25a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25a/NEO/25a.sql_neo_metrics.json
INFO:__main__:Evaluated 25a.sql: Latency=10.97ms, Q-error=376.42
Evaluating queries:  49%|████▊     | 55/113 [26:02<15:55, 16.48s/it]Evaluating query 2d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2d/2d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2d/NEO for query 2d.sql
Creating a new environment for query 2d.sql
Generating plan for query 2d.sql
Evaluating plan for query 2d.sql
Executing query: SELECT /*+  leading((((t mc) (k mk)) cn)) */  MIN(t.title) AS movie_title  FROM  company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND cn.id = mc.company_id AND mc.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 2d.sql
Metrics for query 2d.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 1.003285, 'q_error': np.float32(34.432484), 'inference_time': 0.11093854904174805, 'timestamp': 1745856181.5867484}
Saving results for query 2d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2d/NEO/2d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/2d/NEO/2d.sql_neo_metrics.json
INFO:__main__:Evaluated 2d.sql: Latency=1.00ms, Q-error=34.43
Evaluating queries:  50%|████▉     | 56/113 [26:03<11:17, 11.88s/it]Evaluating query 7a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7a/7a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7a/NEO for query 7a.sql
Creating a new environment for query 7a.sql
Generating plan for query 7a.sql
Evaluating plan for query 7a.sql
Executing query: SELECT /*+  leading((it ((lt ((((n ci) ml) an) t)) pi))) */  MIN(n.name) AS of_person, MIN(t.title) AS biography_movie  FROM  aka_name AS an, cast_info AS ci, info_type AS it, link_type AS lt, movie_link AS ml, name AS n, person_info AS pi, title AS t WHERE an.name LIKE '%a%' AND it.info ='mini biography' AND lt.link ='features' AND n.name_pcode_cf BETWEEN 'A' AND 'F' AND (n.gender = 'm' OR (n.gender = 'f' AND n.name LIKE 'B%')) AND pi.note ='Volker Boehm' AND t.production_year BETWEEN 1980 AND 1995 AND n.id = an.person_id AND n.id = pi.person_id AND ci.person_id = n.id AND t.id = ci.movie_id AND ml.linked_movie_id = t.id AND lt.id = ml.link_type_id AND it.id = pi.info_type_id AND pi.person_id = an.person_id AND pi.person_id = ci.person_id AND an.person_id = ci.person_id AND ci.movie_id = ml.linked_movie_id;
Calculating metrics for query 7a.sql
Metrics for query 7a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 8.885385, 'q_error': np.float32(304.94415), 'inference_time': 0.3487858772277832, 'timestamp': 1745856190.8796275}
Saving results for query 7a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7a/NEO/7a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/7a/NEO/7a.sql_neo_metrics.json
INFO:__main__:Evaluated 7a.sql: Latency=8.89ms, Q-error=304.94
Evaluating queries:  50%|█████     | 57/113 [26:12<10:21, 11.11s/it]Evaluating query 6a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6a/6a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6a/NEO for query 6a.sql
Creating a new environment for query 6a.sql
Generating plan for query 6a.sql
Evaluating plan for query 6a.sql
Executing query: SELECT /*+  leading((t (n (k (mk ci))))) */  MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS marvel_movie  FROM  cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword = 'marvel-cinematic-universe' AND n.name LIKE '%Downey%Robert%' AND t.production_year > 2010 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;
Calculating metrics for query 6a.sql
Metrics for query 6a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 57.319827, 'q_error': np.float32(1967.2019), 'inference_time': 0.07099175453186035, 'timestamp': 1745856248.5056381}
Saving results for query 6a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6a/NEO/6a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6a/NEO/6a.sql_neo_metrics.json
INFO:__main__:Evaluated 6a.sql: Latency=57.32ms, Q-error=1967.20
Evaluating queries:  51%|█████▏    | 58/113 [27:10<22:58, 25.06s/it]Evaluating query 12a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12a/12a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12a/NEO for query 12a.sql
Creating a new environment for query 12a.sql
Generating plan for query 12a.sql
Evaluating plan for query 12a.sql
Executing query: SELECT /*+  leading(((it1 (((ct ((mi_idx mc) t)) mi) cn)) it2)) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS drama_horror_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, title AS t WHERE cn.country_code  = '[us]' AND ct.kind  = 'production companies' AND it1.info = 'genres' AND it2.info = 'rating' AND mi.info  in ('Drama', 'Horror') AND mi_idx.info  > '8.0' AND t.production_year  between 2005 and 2008 AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND mi.info_type_id = it1.id AND mi_idx.info_type_id = it2.id AND t.id = mc.movie_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id;
Calculating metrics for query 12a.sql
Metrics for query 12a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 1.07193, 'q_error': np.float32(36.788364), 'inference_time': 0.6020610332489014, 'timestamp': 1745856250.2298584}
Saving results for query 12a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12a/NEO/12a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12a/NEO/12a.sql_neo_metrics.json
INFO:__main__:Evaluated 12a.sql: Latency=1.07ms, Q-error=36.79
Evaluating queries:  52%|█████▏    | 59/113 [27:12<16:15, 18.06s/it]Evaluating query 18c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18c/18c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18c/NEO for query 18c.sql
Creating a new environment for query 18c.sql
Generating plan for query 18c.sql
Evaluating plan for query 18c.sql
Executing query: SELECT /*+  leading(((it2 ((it1 (mi_idx (t mi))) ci)) n)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(t.title) AS movie_title  FROM  cast_info AS ci, info_type AS it1, info_type AS it2, movie_info AS mi, movie_info_idx AS mi_idx, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND mi.info  in ('Horror', 'Action', 'Sci-Fi', 'Thriller', 'Crime', 'War') AND n.gender  = 'm' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 18c.sql
Metrics for query 18c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 13.561218, 'q_error': np.float32(465.41754), 'inference_time': 0.14327430725097656, 'timestamp': 1745856263.979455}
Saving results for query 18c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18c/NEO/18c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/18c/NEO/18c.sql_neo_metrics.json
INFO:__main__:Evaluated 18c.sql: Latency=13.56ms, Q-error=465.42
Evaluating queries:  53%|█████▎    | 60/113 [27:25<14:48, 16.77s/it]Evaluating query 4a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4a/4a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4a/NEO for query 4a.sql
Creating a new environment for query 4a.sql
Generating plan for query 4a.sql
Evaluating plan for query 4a.sql
Executing query: SELECT /*+  leading((k ((mk (it mi_idx)) t))) */  MIN(mi_idx.info) AS rating, MIN(t.title) AS movie_title  FROM  info_type AS it, keyword AS k, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE it.info ='rating' AND k.keyword  like '%sequel%' AND mi_idx.info  > '5.0' AND t.production_year > 2005 AND t.id = mi_idx.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 4a.sql
Metrics for query 4a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 2.616446, 'q_error': np.float32(89.79576), 'inference_time': 0.09011197090148926, 'timestamp': 1745856266.7384694}
Saving results for query 4a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4a/NEO/4a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/4a/NEO/4a.sql_neo_metrics.json
INFO:__main__:Evaluated 4a.sql: Latency=2.62ms, Q-error=89.80
Evaluating queries:  54%|█████▍    | 61/113 [27:28<10:53, 12.57s/it]Evaluating query 17d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17d/17d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17d/NEO for query 17d.sql
Creating a new environment for query 17d.sql
Generating plan for query 17d.sql
Evaluating plan for query 17d.sql
Executing query: SELECT /*+  leading((((cn (((ci mk) mc) n)) k) t)) */  MIN(n.name) AS member_in_charnamed_movie  FROM  cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword ='character-name-in-title' AND n.name  LIKE '%Bert%' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 17d.sql
Metrics for query 17d.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 114.527155, 'q_error': np.float32(3930.543), 'inference_time': 0.41180920600891113, 'timestamp': 1745856381.818418}
Saving results for query 17d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17d/NEO/17d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17d/NEO/17d.sql_neo_metrics.json
INFO:__main__:Evaluated 17d.sql: Latency=114.53ms, Q-error=3930.54
Evaluating queries:  55%|█████▍    | 62/113 [29:23<36:49, 43.32s/it]Evaluating query 33b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33b/33b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33b/NEO for query 33b.sql
Creating a new environment for query 33b.sql
Generating plan for query 33b.sql
Evaluating plan for query 33b.sql
Executing query: SELECT /*+  leading(((((mc1 t1) cn1) ((cn2 mc2) ((it1 mi_idx1) ((it2 ((kt2 t2) mi_idx2)) (lt ml))))) kt1)) */  MIN(cn1.name) AS first_company, MIN(cn2.name) AS second_company, MIN(mi_idx1.info) AS first_rating, MIN(mi_idx2.info) AS second_rating, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie  FROM  company_name AS cn1, company_name AS cn2, info_type AS it1, info_type AS it2, kind_type AS kt1, kind_type AS kt2, link_type AS lt, movie_companies AS mc1, movie_companies AS mc2, movie_info_idx AS mi_idx1, movie_info_idx AS mi_idx2, movie_link AS ml, title AS t1, title AS t2 WHERE cn1.country_code  = '[nl]' AND it1.info  = 'rating' AND it2.info  = 'rating' AND kt1.kind  in ('tv series') AND kt2.kind  in ('tv series') AND lt.link  LIKE '%follow%' AND mi_idx2.info  < '3.0' AND t2.production_year  = 2007 AND lt.id = ml.link_type_id AND t1.id = ml.movie_id AND t2.id = ml.linked_movie_id AND it1.id = mi_idx1.info_type_id AND t1.id = mi_idx1.movie_id AND kt1.id = t1.kind_id AND cn1.id = mc1.company_id AND t1.id = mc1.movie_id AND ml.movie_id = mi_idx1.movie_id AND ml.movie_id = mc1.movie_id AND mi_idx1.movie_id = mc1.movie_id AND it2.id = mi_idx2.info_type_id AND t2.id = mi_idx2.movie_id AND kt2.id = t2.kind_id AND cn2.id = mc2.company_id AND t2.id = mc2.movie_id AND ml.linked_movie_id = mi_idx2.movie_id AND ml.linked_movie_id = mc2.movie_id AND mi_idx2.movie_id = mc2.movie_id;
Calculating metrics for query 33b.sql
Metrics for query 33b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.0049789999999996, 'q_error': np.float32(103.130104), 'inference_time': 1.8411734104156494, 'timestamp': 1745856387.0969927}
Saving results for query 33b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33b/NEO/33b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/33b/NEO/33b.sql_neo_metrics.json
INFO:__main__:Evaluated 33b.sql: Latency=3.00ms, Q-error=103.13
Evaluating queries:  56%|█████▌    | 63/113 [29:28<26:35, 31.91s/it]Evaluating query 19a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19a/19a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19a/NEO for query 19a.sql
Creating a new environment for query 19a.sql
Generating plan for query 19a.sql
Evaluating plan for query 19a.sql
Executing query: SELECT /*+  leading((t ((rt ((((n ((mc ci) mi)) chn) cn) an)) it))) */  MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, movie_companies AS mc, movie_info AS mi, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND mc.note  is not NULL and (mc.note like '%(USA)%' or mc.note like '%(worldwide)%') AND mi.info  is not null and (mi.info like 'Japan:%200%' or mi.info like 'USA:%200%') AND n.gender ='f' and n.name like '%Ang%' AND rt.role ='actress' AND t.production_year  between 2005 and 2009 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mi.movie_id = ci.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id;
Calculating metrics for query 19a.sql
Metrics for query 19a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 18.152532, 'q_error': np.float32(622.99036), 'inference_time': 0.624859094619751, 'timestamp': 1745856405.940127}
Saving results for query 19a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19a/NEO/19a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19a/NEO/19a.sql_neo_metrics.json
INFO:__main__:Evaluated 19a.sql: Latency=18.15ms, Q-error=622.99
Evaluating queries:  57%|█████▋    | 64/113 [29:47<22:51, 27.99s/it]Evaluating query 20b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20b/20b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20b/NEO for query 20b.sql
Creating a new environment for query 20b.sql
Generating plan for query 20b.sql
Evaluating plan for query 20b.sql
Executing query: SELECT /*+  leading((cct2 (kt (k (cct1 (t ((chn (cc (ci n))) mk))))))) */  MIN(t.title) AS complete_downey_ironman_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, keyword AS k, kind_type AS kt, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  not like '%Sherlock%' and (chn.name like '%Tony%Stark%' or chn.name like '%Iron%Man%') AND k.keyword  in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') AND kt.kind  = 'movie' AND n.name  LIKE '%Downey%Robert%' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND ci.movie_id = cc.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 20b.sql
Metrics for query 20b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 3.0319760000000002, 'q_error': np.float32(104.05664), 'inference_time': 0.9114582538604736, 'timestamp': 1745856409.9447956}
Saving results for query 20b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20b/NEO/20b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20b/NEO/20b.sql_neo_metrics.json
INFO:__main__:Evaluated 20b.sql: Latency=3.03ms, Q-error=104.06
Evaluating queries:  58%|█████▊    | 65/113 [29:51<16:38, 20.79s/it]Evaluating query 6b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6b/6b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6b/NEO for query 6b.sql
Creating a new environment for query 6b.sql
Generating plan for query 6b.sql
Evaluating plan for query 6b.sql
Executing query: SELECT /*+  leading((t (n (k (mk ci))))) */  MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS hero_movie  FROM  cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') AND n.name LIKE '%Downey%Robert%' AND t.production_year > 2014 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;
Calculating metrics for query 6b.sql
Metrics for query 6b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 134.06549299999998, 'q_error': np.float32(4601.0933), 'inference_time': 0.07909035682678223, 'timestamp': 1745856544.1283717}
Saving results for query 6b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6b/NEO/6b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6b/NEO/6b.sql_neo_metrics.json
INFO:__main__:Evaluated 6b.sql: Latency=134.07ms, Q-error=4601.09
Evaluating queries:  58%|█████▊    | 66/113 [32:05<42:56, 54.81s/it]Evaluating query 8c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8c/8c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8c/NEO for query 8c.sql
Creating a new environment for query 8c.sql
Generating plan for query 8c.sql
Evaluating plan for query 8c.sql
Executing query: SELECT /*+  leading((cn (mc (n1 (a1 ((ci rt) t)))))) */  MIN(a1.name) AS writer_pseudo_name, MIN(t.title) AS movie_title  FROM  aka_name AS a1, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n1, role_type AS rt, title AS t WHERE cn.country_code ='[us]' AND rt.role ='writer' AND a1.person_id = n1.id AND n1.id = ci.person_id AND ci.movie_id = t.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND a1.person_id = ci.person_id AND ci.movie_id = mc.movie_id;
Calculating metrics for query 8c.sql
Metrics for query 8c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 9.535018, 'q_error': np.float32(327.23938), 'inference_time': 0.24538183212280273, 'timestamp': 1745856554.0209937}
Saving results for query 8c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8c/NEO/8c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8c/NEO/8c.sql_neo_metrics.json
INFO:__main__:Evaluated 8c.sql: Latency=9.54ms, Q-error=327.24
Evaluating queries:  59%|█████▉    | 67/113 [32:15<31:41, 41.33s/it]Evaluating query 15b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15b/15b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15b/NEO for query 15b.sql
Creating a new environment for query 15b.sql
Generating plan for query 15b.sql
Evaluating plan for query 15b.sql
Executing query: SELECT /*+  leading((((mc ((mk (((at mi) t) it1)) k)) ct) cn)) */  MIN(mi.info) AS release_date, MIN(t.title) AS youtube_movie  FROM  aka_title AS at, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cn.country_code  = '[us]' and cn.name = 'YouTube' AND it1.info  = 'release dates' AND mc.note  like '%(200%)%' and mc.note like '%(worldwide)%' AND mi.note  like '%internet%' AND mi.info  like 'USA:% 200%' AND t.production_year  between 2005 and 2010 AND t.id = at.movie_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = at.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = at.movie_id AND mc.movie_id = at.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 15b.sql
Metrics for query 15b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 2.358475, 'q_error': np.float32(80.94225), 'inference_time': 0.17110681533813477, 'timestamp': 1745856556.614129}
Saving results for query 15b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15b/NEO/15b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15b/NEO/15b.sql_neo_metrics.json
INFO:__main__:Evaluated 15b.sql: Latency=2.36ms, Q-error=80.94
Evaluating queries:  60%|██████    | 68/113 [32:18<22:17, 29.71s/it]Evaluating query 29b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29b/29b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29b/NEO for query 29b.sql
Creating a new environment for query 29b.sql
Generating plan for query 29b.sql
Evaluating plan for query 29b.sql
Executing query: SELECT /*+  leading((((it (t (mi (mc cn)))) ((it3 ((n pi) (chn (an ci)))) (cct2 (k (cct1 (cc mk)))))) rt)) */  MIN(chn.name) AS voiced_char, MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_animation  FROM  aka_name AS an, complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, info_type AS it3, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, person_info AS pi, role_type AS rt, title AS t WHERE cct1.kind  ='cast' AND cct2.kind  ='complete+verified' AND chn.name  = 'Queen' AND ci.note  in ('(voice)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND it3.info  = 'height' AND k.keyword  = 'computer-animation' AND mi.info  like 'USA:%200%' AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.title  = 'Shrek 2' AND t.production_year  between 2000 and 2005 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND n.id = pi.person_id AND ci.person_id = pi.person_id AND it3.id = pi.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 29b.sql
Metrics for query 29b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 79.56832700000001, 'q_error': np.float32(2730.765), 'inference_time': 3.2135300636291504, 'timestamp': 1745856642.8384619}
Saving results for query 29b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29b/NEO/29b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/29b/NEO/29b.sql_neo_metrics.json
INFO:__main__:Evaluated 29b.sql: Latency=79.57ms, Q-error=2730.76
Evaluating queries:  61%|██████    | 69/113 [33:44<34:13, 46.67s/it]Evaluating query 17b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17b/17b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17b/NEO for query 17b.sql
Creating a new environment for query 17b.sql
Generating plan for query 17b.sql
Evaluating plan for query 17b.sql
Executing query: SELECT /*+  leading((((cn (((ci mk) mc) n)) k) t)) */  MIN(n.name) AS member_in_charnamed_movie, MIN(n.name) AS a1  FROM  cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword ='character-name-in-title' AND n.name  LIKE 'Z%' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 17b.sql
Metrics for query 17b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 131.595775, 'q_error': np.float32(4516.334), 'inference_time': 0.3141152858734131, 'timestamp': 1745856774.9680076}
Saving results for query 17b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17b/NEO/17b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17b/NEO/17b.sql_neo_metrics.json
INFO:__main__:Evaluated 17b.sql: Latency=131.60ms, Q-error=4516.33
Evaluating queries:  62%|██████▏   | 70/113 [35:56<51:49, 72.31s/it]Evaluating query 10a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10a/10a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10a/NEO for query 10a.sql
Creating a new environment for query 10a.sql
Generating plan for query 10a.sql
Evaluating plan for query 10a.sql
Executing query: SELECT /*+  leading(((((cn (ct mc)) (t ci)) rt) chn)) */  MIN(chn.name) AS uncredited_voiced_character, MIN(t.title) AS russian_movie  FROM  char_name AS chn, cast_info AS ci, company_name AS cn, company_type AS ct, movie_companies AS mc, role_type AS rt, title AS t WHERE ci.note  like '%(voice)%' and ci.note like '%(uncredited)%' AND cn.country_code  = '[ru]' AND rt.role  = 'actor' AND t.production_year > 2005 AND t.id = mc.movie_id AND t.id = ci.movie_id AND ci.movie_id = mc.movie_id AND chn.id = ci.person_role_id AND rt.id = ci.role_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 10a.sql
Metrics for query 10a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.600612, 'q_error': np.float32(123.572075), 'inference_time': 0.12393999099731445, 'timestamp': 1745856778.7764435}
Saving results for query 10a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10a/NEO/10a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10a/NEO/10a.sql_neo_metrics.json
INFO:__main__:Evaluated 10a.sql: Latency=3.60ms, Q-error=123.57
Evaluating queries:  63%|██████▎   | 71/113 [36:00<36:13, 51.76s/it]Evaluating query 10b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10b/10b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10b/NEO for query 10b.sql
Creating a new environment for query 10b.sql
Generating plan for query 10b.sql
Evaluating plan for query 10b.sql
Executing query: SELECT /*+  leading(((((cn (ct mc)) (t ci)) rt) chn)) */  MIN(chn.name) AS character, MIN(t.title) AS russian_mov_with_actor_producer  FROM  char_name AS chn, cast_info AS ci, company_name AS cn, company_type AS ct, movie_companies AS mc, role_type AS rt, title AS t WHERE ci.note  like '%(producer)%' AND cn.country_code  = '[ru]' AND rt.role  = 'actor' AND t.production_year > 2010 AND t.id = mc.movie_id AND t.id = ci.movie_id AND ci.movie_id = mc.movie_id AND chn.id = ci.person_role_id AND rt.id = ci.role_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 10b.sql
Metrics for query 10b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.52413, 'q_error': np.float32(120.94724), 'inference_time': 0.12267374992370605, 'timestamp': 1745856782.502293}
Saving results for query 10b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10b/NEO/10b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/10b/NEO/10b.sql_neo_metrics.json
INFO:__main__:Evaluated 10b.sql: Latency=3.52ms, Q-error=120.95
Evaluating queries:  64%|██████▎   | 72/113 [36:04<25:31, 37.35s/it]Evaluating query 26c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26c/26c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26c/NEO for query 26c.sql
Creating a new environment for query 26c.sql
Generating plan for query 26c.sql
Evaluating plan for query 26c.sql
Executing query: SELECT /*+  leading((((((cct1 ((((((cc mi_idx) ci) mk) it2) k) t)) kt) cct2) chn) n)) */  MIN(chn.name) AS character_name, MIN(mi_idx.info) AS rating, MIN(t.title) AS complete_hero_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, info_type AS it2, keyword AS k, kind_type AS kt, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  is not NULL and (chn.name like '%man%' or chn.name like '%Man%') AND it2.info  = 'rating' AND k.keyword  in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') AND kt.kind  = 'movie' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND mk.movie_id = mi_idx.movie_id AND ci.movie_id = cc.movie_id AND ci.movie_id = mi_idx.movie_id AND cc.movie_id = mi_idx.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 26c.sql
Metrics for query 26c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 132.67046900000003, 'q_error': np.float32(4553.2163), 'inference_time': 1.3842947483062744, 'timestamp': 1745856916.7865593}
Saving results for query 26c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26c/NEO/26c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/26c/NEO/26c.sql_neo_metrics.json
INFO:__main__:Evaluated 26c.sql: Latency=132.67ms, Q-error=4553.22
Evaluating queries:  65%|██████▍   | 73/113 [38:18<44:17, 66.43s/it]Evaluating query 5c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5c/5c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5c/NEO for query 5c.sql
Creating a new environment for query 5c.sql
Generating plan for query 5c.sql
Evaluating plan for query 5c.sql
Executing query: SELECT /*+  leading(((((mc t) ct) mi) it)) */  MIN(t.title) AS american_movie  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info AS mi, title AS t WHERE ct.kind  = 'production companies' AND mc.note  not like '%(TV)%' and mc.note like '%(USA)%' AND mi.info  IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'USA', 'American') AND t.production_year > 1990 AND t.id = mi.movie_id AND t.id = mc.movie_id AND mc.movie_id = mi.movie_id AND ct.id = mc.company_type_id AND it.id = mi.info_type_id;
Calculating metrics for query 5c.sql
Metrics for query 5c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.705863, 'q_error': np.float32(24.225037), 'inference_time': 0.05662679672241211, 'timestamp': 1745856917.592179}
Saving results for query 5c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5c/NEO/5c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/5c/NEO/5c.sql_neo_metrics.json
INFO:__main__:Evaluated 5c.sql: Latency=0.71ms, Q-error=24.23
Evaluating queries:  65%|██████▌   | 74/113 [38:19<30:22, 46.74s/it]Evaluating query 12c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12c/12c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12c/NEO for query 12c.sql
Creating a new environment for query 12c.sql
Generating plan for query 12c.sql
Evaluating plan for query 12c.sql
Executing query: SELECT /*+  leading(((it1 (((ct ((mi_idx mc) t)) mi) cn)) it2)) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS mainstream_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, title AS t WHERE cn.country_code  = '[us]' AND ct.kind  = 'production companies' AND it1.info = 'genres' AND it2.info = 'rating' AND mi.info  in ('Drama', 'Horror', 'Western', 'Family') AND mi_idx.info  > '7.0' AND t.production_year  between 2000 and 2010 AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND mi.info_type_id = it1.id AND mi_idx.info_type_id = it2.id AND t.id = mc.movie_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id;
Calculating metrics for query 12c.sql
Metrics for query 12c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 2.749043, 'q_error': np.float32(94.34645), 'inference_time': 0.7186567783355713, 'timestamp': 1745856921.10521}
Saving results for query 12c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12c/NEO/12c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/12c/NEO/12c.sql_neo_metrics.json
INFO:__main__:Evaluated 12c.sql: Latency=2.75ms, Q-error=94.35
Evaluating queries:  66%|██████▋   | 75/113 [38:22<21:23, 33.77s/it]Evaluating query 25c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25c/25c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25c/NEO for query 25c.sql
Creating a new environment for query 25c.sql
Generating plan for query 25c.sql
Evaluating plan for query 25c.sql
Executing query: SELECT /*+  leading((k (n ((it2 ((((mk mi) it1) ci) mi_idx)) t)))) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS male_writer, MIN(t.title) AS violent_movie_title  FROM  cast_info AS ci, info_type AS it1, info_type AS it2, keyword AS k, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mi.info  in ('Horror', 'Action', 'Sci-Fi', 'Thriller', 'Crime', 'War') AND n.gender   = 'm' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi_idx.movie_id = mk.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id;
Calculating metrics for query 25c.sql
Metrics for query 25c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 70.715288, 'q_error': np.float32(2426.9307), 'inference_time': 1.047133445739746, 'timestamp': 1745856992.9684787}
Saving results for query 25c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25c/NEO/25c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25c/NEO/25c.sql_neo_metrics.json
INFO:__main__:Evaluated 25c.sql: Latency=70.72ms, Q-error=2426.93
Evaluating queries:  67%|██████▋   | 76/113 [39:34<27:52, 45.20s/it]Evaluating query 13c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13c/13c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13c/NEO for query 13c.sql
Creating a new environment for query 13c.sql
Generating plan for query 13c.sql
Evaluating plan for query 13c.sql
Executing query: SELECT /*+  leading((ct ((it2 (mi (t (it (miidx (cn mc)))))) kt))) */  MIN(cn.name) AS producing_company, MIN(miidx.info) AS rating, MIN(t.title) AS movie_about_winning  FROM  company_name AS cn, company_type AS ct, info_type AS it, info_type AS it2, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS miidx, title AS t WHERE cn.country_code ='[us]' AND ct.kind ='production companies' AND it.info ='rating' AND it2.info ='release dates' AND kt.kind ='movie' AND t.title  != '' AND (t.title LIKE 'Champion%' OR t.title LIKE 'Loser%') AND mi.movie_id = t.id AND it2.id = mi.info_type_id AND kt.id = t.kind_id AND mc.movie_id = t.id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND miidx.movie_id = t.id AND it.id = miidx.info_type_id AND mi.movie_id = miidx.movie_id AND mi.movie_id = mc.movie_id AND miidx.movie_id = mc.movie_id;
Calculating metrics for query 13c.sql
Metrics for query 13c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 5.295151, 'q_error': np.float32(181.72823), 'inference_time': 0.304046630859375, 'timestamp': 1745856998.6390517}
Saving results for query 13c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13c/NEO/13c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13c/NEO/13c.sql_neo_metrics.json
INFO:__main__:Evaluated 13c.sql: Latency=5.30ms, Q-error=181.73
Evaluating queries:  68%|██████▊   | 77/113 [39:40<20:00, 33.34s/it]Evaluating query 17e.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17e/17e.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17e/NEO for query 17e.sql
Creating a new environment for query 17e.sql
Generating plan for query 17e.sql
Evaluating plan for query 17e.sql
Executing query: SELECT /*+  leading((cn (n (((mc (k mk)) ci) t)))) */  MIN(n.name) AS member_in_charnamed_movie  FROM  cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 17e.sql
Metrics for query 17e.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 16.296618, 'q_error': np.float32(559.2958), 'inference_time': 0.10219717025756836, 'timestamp': 1745857015.0781088}
Saving results for query 17e.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17e/NEO/17e.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17e/NEO/17e.sql_neo_metrics.json
INFO:__main__:Evaluated 17e.sql: Latency=16.30ms, Q-error=559.30
Evaluating queries:  69%|██████▉   | 78/113 [39:56<16:29, 28.29s/it]Evaluating query 21c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21c/21c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21c/NEO for query 21c.sql
Creating a new environment for query 21c.sql
Generating plan for query 21c.sql
Evaluating plan for query 21c.sql
Executing query: SELECT /*+  leading(((cn (t (ct ((((k mk) mi) ml) mc)))) lt)) */  MIN(cn.name) AS company_name, MIN(lt.link) AS link_type, MIN(t.title) AS western_follow_up  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follow%' AND mc.note IS NULL AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'English') AND t.production_year BETWEEN 1950 AND 2010 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND mi.movie_id = t.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id AND ml.movie_id = mi.movie_id AND mk.movie_id = mi.movie_id AND mc.movie_id = mi.movie_id;
Calculating metrics for query 21c.sql
Metrics for query 21c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.630452, 'q_error': np.float32(21.63695), 'inference_time': 0.4418818950653076, 'timestamp': 1745857016.2884345}
Saving results for query 21c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21c/NEO/21c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/21c/NEO/21c.sql_neo_metrics.json
INFO:__main__:Evaluated 21c.sql: Latency=0.63ms, Q-error=21.64
Evaluating queries:  70%|██████▉   | 79/113 [39:58<11:25, 20.15s/it]Evaluating query 22c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22c/22c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22c/NEO for query 22c.sql
Creating a new environment for query 22c.sql
Generating plan for query 22c.sql
Evaluating plan for query 22c.sql
Executing query: SELECT /*+  leading((it1 (k (mi (kt ((t (it2 (((mc cn) ct) mi_idx))) mk)))))) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS western_violent_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mc.note  not like '%(USA)%' and mc.note like '%(200%)%' AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Danish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  < '8.5' AND t.production_year  > 2005 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mc.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id;
Calculating metrics for query 22c.sql
Metrics for query 22c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 8.023662999999999, 'q_error': np.float32(275.37003), 'inference_time': 1.4618048667907715, 'timestamp': 1745857026.1080537}
Saving results for query 22c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22c/NEO/22c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/22c/NEO/22c.sql_neo_metrics.json
INFO:__main__:Evaluated 22c.sql: Latency=8.02ms, Q-error=275.37
Evaluating queries:  71%|███████   | 80/113 [40:07<09:22, 17.05s/it]Evaluating query 6e.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6e/6e.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6e/NEO for query 6e.sql
Creating a new environment for query 6e.sql
Generating plan for query 6e.sql
Evaluating plan for query 6e.sql
Executing query: SELECT /*+  leading((t (n (k (mk ci))))) */  MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS marvel_movie  FROM  cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword = 'marvel-cinematic-universe' AND n.name LIKE '%Downey%Robert%' AND t.production_year > 2000 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;
Calculating metrics for query 6e.sql
Metrics for query 6e.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 47.88469, 'q_error': np.float32(1643.3904), 'inference_time': 0.0705711841583252, 'timestamp': 1745857074.1035423}
Saving results for query 6e.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6e/NEO/6e.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6e/NEO/6e.sql_neo_metrics.json
INFO:__main__:Evaluated 6e.sql: Latency=47.88ms, Q-error=1643.39
Evaluating queries:  72%|███████▏  | 81/113 [40:55<14:02, 26.33s/it]Evaluating query 6d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6d/6d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6d/NEO for query 6d.sql
Creating a new environment for query 6d.sql
Generating plan for query 6d.sql
Evaluating plan for query 6d.sql
Executing query: SELECT /*+  leading((t (n (k (mk ci))))) */  MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS hero_movie  FROM  cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') AND n.name LIKE '%Downey%Robert%' AND t.production_year > 2000 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;
Calculating metrics for query 6d.sql
Metrics for query 6d.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 155.57391, 'q_error': np.float32(5339.257), 'inference_time': 0.0947258472442627, 'timestamp': 1745857230.358826}
Saving results for query 6d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6d/NEO/6d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6d/NEO/6d.sql_neo_metrics.json
INFO:__main__:Evaluated 6d.sql: Latency=155.57ms, Q-error=5339.26
Evaluating queries:  73%|███████▎  | 82/113 [43:32<33:44, 65.31s/it]Evaluating query 25b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25b/25b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25b/NEO for query 25b.sql
Creating a new environment for query 25b.sql
Generating plan for query 25b.sql
Evaluating plan for query 25b.sql
Executing query: SELECT /*+  leading(((n ((it1 (t (mi ((mk mi_idx) k)))) ci)) it2)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS male_writer, MIN(t.title) AS violent_movie_title  FROM  cast_info AS ci, info_type AS it1, info_type AS it2, keyword AS k, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'blood', 'gore', 'death', 'female-nudity') AND mi.info  = 'Horror' AND n.gender   = 'm' AND t.production_year  > 2010 AND t.title  like 'Vampire%' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi_idx.movie_id = mk.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id;
Calculating metrics for query 25b.sql
Metrics for query 25b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 5.057589, 'q_error': np.float32(173.57515), 'inference_time': 0.5542688369750977, 'timestamp': 1745857236.054418}
Saving results for query 25b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25b/NEO/25b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/25b/NEO/25b.sql_neo_metrics.json
INFO:__main__:Evaluated 25b.sql: Latency=5.06ms, Q-error=173.58
Evaluating queries:  73%|███████▎  | 83/113 [43:37<23:42, 47.43s/it]Evaluating query 23c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23c/23c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23c/NEO for query 23c.sql
Creating a new environment for query 23c.sql
Generating plan for query 23c.sql
Evaluating plan for query 23c.sql
Executing query: SELECT /*+  leading((k ((kt (((cn (mi (t (cc (ct mc))))) cct1) it1)) mk))) */  MIN(kt.kind) AS movie_kind, MIN(t.title) AS complete_us_internet_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cct1.kind  = 'complete+verified' AND cn.country_code  = '[us]' AND it1.info  = 'release dates' AND kt.kind  in ('movie', 'tv movie', 'video movie', 'video game') AND mi.note  like '%internet%' AND mi.info  is not NULL and (mi.info like 'USA:% 199%' or mi.info like 'USA:% 200%') AND t.production_year  > 1990 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND t.id = cc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = cc.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = cc.movie_id AND mc.movie_id = cc.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND cct1.id = cc.status_id;
Calculating metrics for query 23c.sql
Metrics for query 23c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.7319009999999997, 'q_error': np.float32(128.07788), 'inference_time': 1.2576704025268555, 'timestamp': 1745857241.1620867}
Saving results for query 23c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23c/NEO/23c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/23c/NEO/23c.sql_neo_metrics.json
INFO:__main__:Evaluated 23c.sql: Latency=3.73ms, Q-error=128.08
Evaluating queries:  74%|███████▍  | 84/113 [43:42<16:47, 34.73s/it]Evaluating query 11d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11d/11d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11d/NEO for query 11d.sql
Creating a new environment for query 11d.sql
Generating plan for query 11d.sql
Evaluating plan for query 11d.sql
Executing query: SELECT /*+  leading((ct ((((((t mk) ml) k) mc) cn) lt))) */  MIN(cn.name) AS from_company, MIN(mc.note) AS production_note, MIN(t.title) AS movie_based_on_book  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code  != '[pl]' AND ct.kind  != 'production companies' and ct.kind is not NULL AND k.keyword  in ('sequel', 'revenge', 'based-on-novel') AND mc.note  is not NULL AND t.production_year  > 1950 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id;
Calculating metrics for query 11d.sql
Metrics for query 11d.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 0.232847, 'q_error': np.float32(7.99125), 'inference_time': 0.5461666584014893, 'timestamp': 1745857241.990687}
Saving results for query 11d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11d/NEO/11d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11d/NEO/11d.sql_neo_metrics.json
INFO:__main__:Evaluated 11d.sql: Latency=0.23ms, Q-error=7.99
Evaluating queries:  75%|███████▌  | 85/113 [43:43<11:27, 24.56s/it]Evaluating query 32a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32a/32a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32a/NEO for query 32a.sql
Creating a new environment for query 32a.sql
Generating plan for query 32a.sql
Evaluating plan for query 32a.sql
Executing query: SELECT /*+  leading(((k ((ml lt) (t1 mk))) t2)) */  MIN(lt.link) AS link_type, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie  FROM  keyword AS k, link_type AS lt, movie_keyword AS mk, movie_link AS ml, title AS t1, title AS t2 WHERE k.keyword ='10,000-mile-club' AND mk.keyword_id = k.id AND t1.id = mk.movie_id AND ml.movie_id = t1.id AND ml.linked_movie_id = t2.id AND lt.id = ml.link_type_id AND mk.movie_id = t1.id;
Calculating metrics for query 32a.sql
Metrics for query 32a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 0.26704300000000003, 'q_error': np.float32(9.164847), 'inference_time': 0.08338785171508789, 'timestamp': 1745857242.376705}
Saving results for query 32a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32a/NEO/32a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/32a/NEO/32a.sql_neo_metrics.json
INFO:__main__:Evaluated 32a.sql: Latency=0.27ms, Q-error=9.16
Evaluating queries:  76%|███████▌  | 86/113 [43:44<07:47, 17.31s/it]Evaluating query 20a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20a/20a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20a/NEO for query 20a.sql
Creating a new environment for query 20a.sql
Generating plan for query 20a.sql
Evaluating plan for query 20a.sql
Executing query: SELECT /*+  leading((((mk (n ((((t (cc cct2)) cct1) ci) kt))) k) chn)) */  MIN(t.title) AS complete_downey_ironman_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, keyword AS k, kind_type AS kt, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  not like '%Sherlock%' and (chn.name like '%Tony%Stark%' or chn.name like '%Iron%Man%') AND k.keyword  in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') AND kt.kind  = 'movie' AND t.production_year  > 1950 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND ci.movie_id = cc.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 20a.sql
Metrics for query 20a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 7.370874, 'q_error': np.float32(252.96649), 'inference_time': 0.6341915130615234, 'timestamp': 1745857250.4455035}
Saving results for query 20a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20a/NEO/20a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/20a/NEO/20a.sql_neo_metrics.json
INFO:__main__:Evaluated 20a.sql: Latency=7.37ms, Q-error=252.97
Evaluating queries:  77%|███████▋  | 87/113 [43:52<06:18, 14.55s/it]Evaluating query 15c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15c/15c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15c/NEO for query 15c.sql
Creating a new environment for query 15c.sql
Generating plan for query 15c.sql
Evaluating plan for query 15c.sql
Executing query: SELECT /*+  leading((k (at (mk (((((mc ct) cn) mi) it1) t))))) */  MIN(mi.info) AS release_date, MIN(t.title) AS modern_american_internet_movie  FROM  aka_title AS at, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cn.country_code  = '[us]' AND it1.info  = 'release dates' AND mi.note  like '%internet%' AND mi.info  is not NULL and (mi.info like 'USA:% 199%' or mi.info like 'USA:% 200%') AND t.production_year  > 1990 AND t.id = at.movie_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = at.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = at.movie_id AND mc.movie_id = at.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 15c.sql
Metrics for query 15c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 2.5322359999999997, 'q_error': np.float32(86.9057), 'inference_time': 0.9502167701721191, 'timestamp': 1745857254.0203686}
Saving results for query 15c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15c/NEO/15c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15c/NEO/15c.sql_neo_metrics.json
INFO:__main__:Evaluated 15c.sql: Latency=2.53ms, Q-error=86.91
Evaluating queries:  78%|███████▊  | 88/113 [43:55<04:41, 11.24s/it]Evaluating query 24a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24a/24a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24a/NEO for query 24a.sql
Creating a new environment for query 24a.sql
Generating plan for query 24a.sql
Evaluating plan for query 24a.sql
Executing query: SELECT /*+  leading(((cn (mc ((((n (an (ci (mi (k mk))))) it) chn) rt))) t)) */  MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND k.keyword  in ('hero', 'martial-arts', 'hand-to-hand-combat') AND mi.info  is not null and (mi.info like 'Japan:%201%' or mi.info like 'USA:%201%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.production_year  > 2010 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND ci.movie_id = mk.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND k.id = mk.keyword_id;
Calculating metrics for query 24a.sql
Metrics for query 24a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 5.313591000000001, 'q_error': np.float32(182.36108), 'inference_time': 1.371748924255371, 'timestamp': 1745857260.8382032}
Saving results for query 24a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24a/NEO/24a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/24a/NEO/24a.sql_neo_metrics.json
INFO:__main__:Evaluated 24a.sql: Latency=5.31ms, Q-error=182.36
Evaluating queries:  79%|███████▉  | 89/113 [44:02<03:58,  9.92s/it]Evaluating query 11b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11b/11b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11b/NEO for query 11b.sql
Creating a new environment for query 11b.sql
Generating plan for query 11b.sql
Evaluating plan for query 11b.sql
Executing query: SELECT /*+  leading((lt (t (((((k mk) mc) cn) ml) ct)))) */  MIN(cn.name) AS from_company, MIN(lt.link) AS movie_link_type, MIN(t.title) AS sequel_movie  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code !='[pl]' AND (cn.name LIKE '%Film%' OR cn.name LIKE '%Warner%') AND ct.kind ='production companies' AND k.keyword ='sequel' AND lt.link LIKE '%follows%' AND mc.note IS NULL AND t.production_year  = 1998 and t.title like '%Money%' AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id;
Calculating metrics for query 11b.sql
Metrics for query 11b.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 0.669544, 'q_error': np.float32(22.978579), 'inference_time': 0.39989209175109863, 'timestamp': 1745857261.9564168}
Saving results for query 11b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11b/NEO/11b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11b/NEO/11b.sql_neo_metrics.json
INFO:__main__:Evaluated 11b.sql: Latency=0.67ms, Q-error=22.98
Evaluating queries:  80%|███████▉  | 90/113 [44:03<02:47,  7.28s/it]Evaluating query 11c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11c/11c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11c/NEO for query 11c.sql
Creating a new environment for query 11c.sql
Generating plan for query 11c.sql
Evaluating plan for query 11c.sql
Executing query: SELECT /*+  leading(((k ((mc (mk ((lt ml) t))) ct)) cn)) */  MIN(cn.name) AS from_company, MIN(mc.note) AS production_note, MIN(t.title) AS movie_based_on_book  FROM  company_name AS cn, company_type AS ct, keyword AS k, link_type AS lt, movie_companies AS mc, movie_keyword AS mk, movie_link AS ml, title AS t WHERE cn.country_code  !='[pl]' and (cn.name like '20th Century Fox%' or cn.name like 'Twentieth Century Fox%') AND ct.kind  != 'production companies' and ct.kind is not NULL AND k.keyword  in ('sequel', 'revenge', 'based-on-novel') AND mc.note  is not NULL AND t.production_year  > 1950 AND lt.id = ml.link_type_id AND ml.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_type_id = ct.id AND mc.company_id = cn.id AND ml.movie_id = mk.movie_id AND ml.movie_id = mc.movie_id AND mk.movie_id = mc.movie_id;
Calculating metrics for query 11c.sql
Metrics for query 11c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 3.082747, 'q_error': np.float32(105.79909), 'inference_time': 0.37426280975341797, 'timestamp': 1745857265.4967213}
Saving results for query 11c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11c/NEO/11c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/11c/NEO/11c.sql_neo_metrics.json
INFO:__main__:Evaluated 11c.sql: Latency=3.08ms, Q-error=105.80
Evaluating queries:  81%|████████  | 91/113 [44:07<02:15,  6.16s/it]Evaluating query 8a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8a/8a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8a/NEO for query 8a.sql
Creating a new environment for query 8a.sql
Generating plan for query 8a.sql
Evaluating plan for query 8a.sql
Executing query: SELECT /*+  leading((cn (t (mc (((ci n1) an1) rt))))) */  MIN(an1.name) AS actress_pseudonym, MIN(t.title) AS japanese_movie_dubbed  FROM  aka_name AS an1, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n1, role_type AS rt, title AS t WHERE ci.note ='(voice: English version)' AND cn.country_code ='[jp]' AND mc.note like '%(Japan)%' and mc.note not like '%(USA)%' AND n1.name like '%Yo%' and n1.name not like '%Yu%' AND rt.role ='actress' AND an1.person_id = n1.id AND n1.id = ci.person_id AND ci.movie_id = t.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND an1.person_id = ci.person_id AND ci.movie_id = mc.movie_id;
Calculating metrics for query 8a.sql
Metrics for query 8a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 2.48769, 'q_error': np.float32(85.376884), 'inference_time': 0.1614830493927002, 'timestamp': 1745857268.1926484}
Saving results for query 8a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8a/NEO/8a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8a/NEO/8a.sql_neo_metrics.json
INFO:__main__:Evaluated 8a.sql: Latency=2.49ms, Q-error=85.38
Evaluating queries:  81%|████████▏ | 92/113 [44:10<01:47,  5.12s/it]Evaluating query 9b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9b/9b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9b/NEO for query 9b.sql
Creating a new environment for query 9b.sql
Generating plan for query 9b.sql
Evaluating plan for query 9b.sql
Executing query: SELECT /*+  leading((an (t (cn (chn (rt ((n ci) mc))))))) */  MIN(an.name) AS alternative_name, MIN(chn.name) AS voiced_character, MIN(n.name) AS voicing_actress, MIN(t.title) AS american_movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n, role_type AS rt, title AS t WHERE ci.note  = '(voice)' AND cn.country_code ='[us]' AND mc.note  like '%(200%)%' and (mc.note like '%(USA)%' or mc.note like '%(worldwide)%') AND n.gender ='f' and n.name like '%Angel%' AND rt.role ='actress' AND t.production_year  between 2007 and 2010 AND ci.movie_id = t.id AND t.id = mc.movie_id AND ci.movie_id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND n.id = ci.person_id AND chn.id = ci.person_role_id AND an.person_id = n.id AND an.person_id = ci.person_id;
Calculating metrics for query 9b.sql
Metrics for query 9b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 2.629476, 'q_error': np.float32(90.24294), 'inference_time': 0.281280517578125, 'timestamp': 1745857271.1536584}
Saving results for query 9b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9b/NEO/9b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9b/NEO/9b.sql_neo_metrics.json
INFO:__main__:Evaluated 9b.sql: Latency=2.63ms, Q-error=90.24
Evaluating queries:  82%|████████▏ | 93/113 [44:12<01:29,  4.47s/it]Evaluating query 17f.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17f/17f.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17f/NEO for query 17f.sql
Creating a new environment for query 17f.sql
Generating plan for query 17f.sql
Evaluating plan for query 17f.sql
Executing query: SELECT /*+  leading((((cn (((ci mk) mc) n)) k) t)) */  MIN(n.name) AS member_in_charnamed_movie  FROM  cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword ='character-name-in-title' AND n.name  LIKE '%B%' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Error evaluating query 17f.sql: canceling statement due to statement timeout

ERROR:__main__:Error evaluating query 17f.sql: canceling statement due to statement timeout
Traceback (most recent call last):
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 112, in evaluate_queries
    query_result = self._evaluate_single_query(query_name, file_path)
  File "/data/hdd1/users/kmparmp/Neo/test_neo.py", line 164, in _evaluate_single_query
    query_plan,actual_latency = eval_env.explain_analyze()
  File "/data/hdd1/users/kmparmp/Neo/database_env/base.py", line 69, in explain_analyze
    return explain_analyze_plan(self.plan, self.conn, self.db)
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 407, in explain_analyze_plan
    raise e
  File "/data/hdd1/users/kmparmp/Neo/utils/db_utils.py", line 399, in explain_analyze_plan
    cur.execute(
psycopg2.errors.QueryCanceled: canceling statement due to statement timeout

Evaluating queries:  83%|████████▎ | 94/113 [49:15<29:45, 93.95s/it]Evaluating query 16c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16c/16c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16c/NEO for query 16c.sql
Creating a new environment for query 16c.sql
Generating plan for query 16c.sql
Evaluating plan for query 16c.sql
Executing query: SELECT /*+  leading((an (t (n (cn (ci ((k mk) mc))))))) */  MIN(an.name) AS cool_actor_pseudonym, MIN(t.title) AS series_named_after_char  FROM  aka_name AS an, cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND t.episode_nr < 100 AND an.person_id = n.id AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND an.person_id = ci.person_id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 16c.sql
Metrics for query 16c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 7.396993, 'q_error': np.float32(253.86293), 'inference_time': 0.6828579902648926, 'timestamp': 1745857582.0401628}
Saving results for query 16c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16c/NEO/16c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16c/NEO/16c.sql_neo_metrics.json
INFO:__main__:Evaluated 16c.sql: Latency=7.40ms, Q-error=253.86
Evaluating queries:  84%|████████▍ | 95/113 [49:23<20:27, 68.21s/it]Evaluating query 28b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28b/28b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28b/NEO for query 28b.sql
Creating a new environment for query 28b.sql
Generating plan for query 28b.sql
Evaluating plan for query 28b.sql
Executing query: SELECT /*+  leading((((it2 (cn (ct (mc mi_idx)))) ((mk (cct2 (cct1 cc))) (k (kt (mi t))))) it1)) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS complete_euro_dark_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cct1.kind  = 'crew' AND cct2.kind  != 'complete+verified' AND cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mc.note  not like '%(USA)%' and mc.note like '%(200%)%' AND mi.info  IN ('Sweden', 'Germany', 'Swedish', 'German') AND mi_idx.info  > '6.5' AND t.production_year  > 2005 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND t.id = cc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = cc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = cc.movie_id AND mc.movie_id = mi_idx.movie_id AND mc.movie_id = cc.movie_id AND mi_idx.movie_id = cc.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 28b.sql
Metrics for query 28b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 12.740781, 'q_error': np.float32(437.26038), 'inference_time': 1.9335923194885254, 'timestamp': 1745857597.0709538}
Saving results for query 28b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28b/NEO/28b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28b/NEO/28b.sql_neo_metrics.json
INFO:__main__:Evaluated 28b.sql: Latency=12.74ms, Q-error=437.26
Evaluating queries:  85%|████████▍ | 96/113 [49:38<14:48, 52.26s/it]Evaluating query 9d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9d/9d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9d/NEO for query 9d.sql
Creating a new environment for query 9d.sql
Generating plan for query 9d.sql
Evaluating plan for query 9d.sql
Executing query: SELECT /*+  leading((cn (an (mc (t (chn (n (rt ci)))))))) */  MIN(an.name) AS alternative_name, MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress, MIN(t.title) AS american_movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND n.gender ='f' AND rt.role ='actress' AND ci.movie_id = t.id AND t.id = mc.movie_id AND ci.movie_id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND n.id = ci.person_id AND chn.id = ci.person_role_id AND an.person_id = n.id AND an.person_id = ci.person_id;
Calculating metrics for query 9d.sql
Metrics for query 9d.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 7.556061, 'q_error': np.float32(259.32208), 'inference_time': 0.1749107837677002, 'timestamp': 1745857604.880886}
Saving results for query 9d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9d/NEO/9d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9d/NEO/9d.sql_neo_metrics.json
INFO:__main__:Evaluated 9d.sql: Latency=7.56ms, Q-error=259.32
Evaluating queries:  86%|████████▌ | 97/113 [49:46<10:22, 38.92s/it]Evaluating query 16a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16a/16a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16a/NEO for query 16a.sql
Creating a new environment for query 16a.sql
Generating plan for query 16a.sql
Evaluating plan for query 16a.sql
Executing query: SELECT /*+  leading((an (t (n (cn (ci ((k mk) mc))))))) */  MIN(an.name) AS cool_actor_pseudonym, MIN(t.title) AS series_named_after_char  FROM  aka_name AS an, cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND t.episode_nr >= 50 AND t.episode_nr < 100 AND an.person_id = n.id AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND an.person_id = ci.person_id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 16a.sql
Metrics for query 16a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 8.581774, 'q_error': np.float32(294.5243), 'inference_time': 0.4479484558105469, 'timestamp': 1745857613.9669547}
Saving results for query 16a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16a/NEO/16a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16a/NEO/16a.sql_neo_metrics.json
INFO:__main__:Evaluated 16a.sql: Latency=8.58ms, Q-error=294.52
Evaluating queries:  87%|████████▋ | 98/113 [49:55<07:29, 29.97s/it]Evaluating query 17a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17a/17a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17a/NEO for query 17a.sql
Creating a new environment for query 17a.sql
Generating plan for query 17a.sql
Evaluating plan for query 17a.sql
Executing query: SELECT /*+  leading(((cn (mc (((mk k) ci) n))) t)) */  MIN(n.name) AS member_in_charnamed_american_movie, MIN(n.name) AS a1  FROM  cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND n.name  LIKE 'B%' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 17a.sql
Metrics for query 17a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 5.684888, 'q_error': np.float32(195.10391), 'inference_time': 0.36348986625671387, 'timestamp': 1745857620.0657918}
Saving results for query 17a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17a/NEO/17a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/17a/NEO/17a.sql_neo_metrics.json
INFO:__main__:Evaluated 17a.sql: Latency=5.68ms, Q-error=195.10
Evaluating queries:  88%|████████▊ | 99/113 [50:01<05:19, 22.81s/it]Evaluating query 1b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1b/1b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1b/NEO for query 1b.sql
Creating a new environment for query 1b.sql
Generating plan for query 1b.sql
Evaluating plan for query 1b.sql
Executing query: SELECT /*+  leading((t (((it mi_idx) mc) ct))) */  MIN(mc.note) AS production_note, MIN(t.title) AS movie_title, MIN(t.production_year) AS movie_year  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info_idx AS mi_idx, title AS t WHERE ct.kind = 'production companies' AND it.info = 'bottom 10 rank' AND mc.note  not like '%(as Metro-Goldwyn-Mayer Pictures)%' AND t.production_year between 2005 and 2010 AND ct.id = mc.company_type_id AND t.id = mc.movie_id AND t.id = mi_idx.movie_id AND mc.movie_id = mi_idx.movie_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 1b.sql
Metrics for query 1b.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.18005500000000002, 'q_error': np.float32(6.1794415), 'inference_time': 0.05230522155761719, 'timestamp': 1745857620.3333416}
Saving results for query 1b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1b/NEO/1b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1b/NEO/1b.sql_neo_metrics.json
INFO:__main__:Evaluated 1b.sql: Latency=0.18ms, Q-error=6.18
Evaluating queries:  88%|████████▊ | 100/113 [50:02<03:28, 16.05s/it]Evaluating query 15a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15a/15a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15a/NEO for query 15a.sql
Creating a new environment for query 15a.sql
Generating plan for query 15a.sql
Evaluating plan for query 15a.sql
Executing query: SELECT /*+  leading((t (k ((mk ((at ((mi it1) mc)) cn)) ct)))) */  MIN(mi.info) AS release_date, MIN(t.title) AS internet_movie  FROM  aka_title AS at, company_name AS cn, company_type AS ct, info_type AS it1, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, title AS t WHERE cn.country_code  = '[us]' AND it1.info  = 'release dates' AND mc.note  like '%(200%)%' and mc.note like '%(worldwide)%' AND mi.note  like '%internet%' AND mi.info  like 'USA:% 200%' AND t.production_year  > 2000 AND t.id = at.movie_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = at.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = at.movie_id AND mc.movie_id = at.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND cn.id = mc.company_id AND ct.id = mc.company_type_id;
Calculating metrics for query 15a.sql
Metrics for query 15a.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 0.975322, 'q_error': np.float32(33.4728), 'inference_time': 0.2785210609436035, 'timestamp': 1745857621.6347709}
Saving results for query 15a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15a/NEO/15a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/15a/NEO/15a.sql_neo_metrics.json
INFO:__main__:Evaluated 15a.sql: Latency=0.98ms, Q-error=33.47
Evaluating queries:  89%|████████▉ | 101/113 [50:03<02:19, 11.62s/it]Evaluating query 6c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6c/6c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6c/NEO for query 6c.sql
Creating a new environment for query 6c.sql
Generating plan for query 6c.sql
Evaluating plan for query 6c.sql
Executing query: SELECT /*+  leading((t (n (k (mk ci))))) */  MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS marvel_movie  FROM  cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword = 'marvel-cinematic-universe' AND n.name LIKE '%Downey%Robert%' AND t.production_year > 2014 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;
Calculating metrics for query 6c.sql
Metrics for query 6c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 50.200152, 'q_error': np.float32(1722.8564), 'inference_time': 0.07356715202331543, 'timestamp': 1745857671.9539244}
Saving results for query 6c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6c/NEO/6c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/6c/NEO/6c.sql_neo_metrics.json
INFO:__main__:Evaluated 6c.sql: Latency=50.20ms, Q-error=1722.86
Evaluating queries:  90%|█████████ | 102/113 [50:53<04:15, 23.23s/it]Evaluating query 14a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14a/14a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14a/NEO for query 14a.sql
Creating a new environment for query 14a.sql
Generating plan for query 14a.sql
Evaluating plan for query 14a.sql
Executing query: SELECT /*+  leading(((mi ((((mi_idx (t kt)) k) mk) it2)) it1)) */  MIN(mi_idx.info) AS rating, MIN(t.title) AS northern_dark_movie  FROM  info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  = 'movie' AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  < '8.5' AND t.production_year  > 2010 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;
Calculating metrics for query 14a.sql
Metrics for query 14a.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 1.6145129999999999, 'q_error': np.float32(55.40967), 'inference_time': 0.4339101314544678, 'timestamp': 1745857674.043189}
Saving results for query 14a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14a/NEO/14a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/14a/NEO/14a.sql_neo_metrics.json
INFO:__main__:Evaluated 14a.sql: Latency=1.61ms, Q-error=55.41
Evaluating queries:  91%|█████████ | 103/113 [50:55<02:48, 16.89s/it]Evaluating query 9c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9c/9c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9c/NEO for query 9c.sql
Creating a new environment for query 9c.sql
Generating plan for query 9c.sql
Evaluating plan for query 9c.sql
Executing query: SELECT /*+  leading(((chn ((((ci n) (t mc)) an) cn)) rt)) */  MIN(an.name) AS alternative_name, MIN(chn.name) AS voiced_character_name, MIN(n.name) AS voicing_actress, MIN(t.title) AS american_movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND ci.movie_id = t.id AND t.id = mc.movie_id AND ci.movie_id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND n.id = ci.person_id AND chn.id = ci.person_role_id AND an.person_id = n.id AND an.person_id = ci.person_id;
Calculating metrics for query 9c.sql
Metrics for query 9c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 3.920233, 'q_error': np.float32(134.5414), 'inference_time': 0.2803959846496582, 'timestamp': 1745857678.2916412}
Saving results for query 9c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9c/NEO/9c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/9c/NEO/9c.sql_neo_metrics.json
INFO:__main__:Evaluated 9c.sql: Latency=3.92ms, Q-error=134.54
Evaluating queries:  92%|█████████▏| 104/113 [51:00<01:57, 13.10s/it]Evaluating query 8d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8d/8d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8d/NEO for query 8d.sql
Creating a new environment for query 8d.sql
Generating plan for query 8d.sql
Evaluating plan for query 8d.sql
Executing query: SELECT /*+  leading((cn (mc (n1 (an1 ((ci rt) t)))))) */  MIN(an1.name) AS costume_designer_pseudo, MIN(t.title) AS movie_with_costumes  FROM  aka_name AS an1, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n1, role_type AS rt, title AS t WHERE cn.country_code ='[us]' AND rt.role ='costume designer' AND an1.person_id = n1.id AND n1.id = ci.person_id AND ci.movie_id = t.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND an1.person_id = ci.person_id AND ci.movie_id = mc.movie_id;
Calculating metrics for query 8d.sql
Metrics for query 8d.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 3.9491, 'q_error': np.float32(135.5321), 'inference_time': 0.20409917831420898, 'timestamp': 1745857682.505038}
Saving results for query 8d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8d/NEO/8d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/8d/NEO/8d.sql_neo_metrics.json
INFO:__main__:Evaluated 8d.sql: Latency=3.95ms, Q-error=135.53
Evaluating queries:  93%|█████████▎| 105/113 [51:04<01:23, 10.43s/it]Evaluating query 3c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3c/3c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3c/NEO for query 3c.sql
Creating a new environment for query 3c.sql
Generating plan for query 3c.sql
Evaluating plan for query 3c.sql
Executing query: SELECT /*+  leading((k (t (mi mk)))) */  MIN(t.title) AS movie_title  FROM  keyword AS k, movie_info AS mi, movie_keyword AS mk, title AS t WHERE k.keyword  like '%sequel%' AND mi.info  IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'USA', 'American') AND t.production_year > 1990 AND t.id = mi.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi.movie_id AND k.id = mk.keyword_id;
Calculating metrics for query 3c.sql
Metrics for query 3c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 7.206007, 'q_error': np.float32(247.30832), 'inference_time': 0.06221914291381836, 'timestamp': 1745857689.8692572}
Saving results for query 3c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3c/NEO/3c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/3c/NEO/3c.sql_neo_metrics.json
INFO:__main__:Evaluated 3c.sql: Latency=7.21ms, Q-error=247.31
Evaluating queries:  94%|█████████▍| 106/113 [51:11<01:06,  9.51s/it]Evaluating query 19b.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19b/19b.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19b/NEO for query 19b.sql
Creating a new environment for query 19b.sql
Generating plan for query 19b.sql
Evaluating plan for query 19b.sql
Executing query: SELECT /*+  leading(((((cn (t (rt (((ci mc) an) n)))) mi) chn) it)) */  MIN(n.name) AS voicing_actress, MIN(t.title) AS kung_fu_panda  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, movie_companies AS mc, movie_info AS mi, name AS n, role_type AS rt, title AS t WHERE ci.note  = '(voice)' AND cn.country_code ='[us]' AND it.info  = 'release dates' AND mc.note  like '%(200%)%' and (mc.note like '%(USA)%' or mc.note like '%(worldwide)%') AND mi.info  is not null and (mi.info like 'Japan:%2007%' or mi.info like 'USA:%2008%') AND n.gender ='f' and n.name like '%Angel%' AND rt.role ='actress' AND t.production_year  between 2007 and 2008 and t.title like '%Kung%Fu%Panda%' AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mi.movie_id = ci.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id;
Calculating metrics for query 19b.sql
Metrics for query 19b.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 1.431909, 'q_error': np.float32(49.142754), 'inference_time': 0.5997140407562256, 'timestamp': 1745857691.9695575}
Saving results for query 19b.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19b/NEO/19b.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19b/NEO/19b.sql_neo_metrics.json
INFO:__main__:Evaluated 19b.sql: Latency=1.43ms, Q-error=49.14
Evaluating queries:  95%|█████████▍| 107/113 [51:13<00:43,  7.29s/it]Evaluating query 19d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19d/19d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19d/NEO for query 19d.sql
Creating a new environment for query 19d.sql
Generating plan for query 19d.sql
Evaluating plan for query 19d.sql
Executing query: SELECT /*+  leading(((t (chn ((it (n (((ci mi) mc) cn))) rt))) an)) */  MIN(n.name) AS voicing_actress, MIN(t.title) AS jap_engl_voiced_movie  FROM  aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, movie_companies AS mc, movie_info AS mi, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND n.gender ='f' AND rt.role ='actress' AND t.production_year  > 2000 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mi.movie_id = ci.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id;
Calculating metrics for query 19d.sql
Metrics for query 19d.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 46.239688, 'q_error': np.float32(1586.9342), 'inference_time': 0.6572623252868652, 'timestamp': 1745857739.2609837}
Saving results for query 19d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19d/NEO/19d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/19d/NEO/19d.sql_neo_metrics.json
INFO:__main__:Evaluated 19d.sql: Latency=46.24ms, Q-error=1586.93
Evaluating queries:  96%|█████████▌| 108/113 [52:01<01:36, 19.29s/it]Evaluating query 1c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1c/1c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1c/NEO for query 1c.sql
Creating a new environment for query 1c.sql
Generating plan for query 1c.sql
Evaluating plan for query 1c.sql
Executing query: SELECT /*+  leading((t (((it mi_idx) mc) ct))) */  MIN(mc.note) AS production_note, MIN(t.title) AS movie_title, MIN(t.production_year) AS movie_year  FROM  company_type AS ct, info_type AS it, movie_companies AS mc, movie_info_idx AS mi_idx, title AS t WHERE ct.kind = 'production companies' AND it.info = 'top 250 rank' AND mc.note  not like '%(as Metro-Goldwyn-Mayer Pictures)%' and (mc.note like '%(co-production)%') AND t.production_year > 2010 AND ct.id = mc.company_type_id AND t.id = mc.movie_id AND t.id = mi_idx.movie_id AND mc.movie_id = mi_idx.movie_id AND it.id = mi_idx.info_type_id;
Calculating metrics for query 1c.sql
Metrics for query 1c.sql: {'predicted_latency': np.float32(0.029137747), 'actual_latency': 0.17527600000000002, 'q_error': np.float32(6.015427), 'inference_time': 0.06090903282165527, 'timestamp': 1745857739.53075}
Saving results for query 1c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1c/NEO/1c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/1c/NEO/1c.sql_neo_metrics.json
INFO:__main__:Evaluated 1c.sql: Latency=0.18ms, Q-error=6.02
Evaluating queries:  96%|█████████▋| 109/113 [52:01<00:54, 13.58s/it]Evaluating query 28c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28c/28c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28c/NEO for query 28c.sql
Creating a new environment for query 28c.sql
Generating plan for query 28c.sql
Evaluating plan for query 28c.sql
Executing query: SELECT /*+  leading((((it2 (cn (ct (mc mi_idx)))) ((mk (cct2 (cct1 cc))) (k (kt (mi t))))) it1)) */  MIN(cn.name) AS movie_company, MIN(mi_idx.info) AS rating, MIN(t.title) AS complete_euro_dark_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, company_name AS cn, company_type AS ct, info_type AS it1, info_type AS it2, keyword AS k, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  = 'complete' AND cn.country_code  != '[us]' AND it1.info  = 'countries' AND it2.info  = 'rating' AND k.keyword  in ('murder', 'murder-in-title', 'blood', 'violence') AND kt.kind  in ('movie', 'episode') AND mc.note  not like '%(USA)%' and mc.note like '%(200%)%' AND mi.info IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Danish', 'Norwegian', 'German', 'USA', 'American') AND mi_idx.info  < '8.5' AND t.production_year  > 2005 AND kt.id = t.kind_id AND t.id = mi.movie_id AND t.id = mk.movie_id AND t.id = mi_idx.movie_id AND t.id = mc.movie_id AND t.id = cc.movie_id AND mk.movie_id = mi.movie_id AND mk.movie_id = mi_idx.movie_id AND mk.movie_id = mc.movie_id AND mk.movie_id = cc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mc.movie_id AND mi.movie_id = cc.movie_id AND mc.movie_id = mi_idx.movie_id AND mc.movie_id = cc.movie_id AND mi_idx.movie_id = cc.movie_id AND k.id = mk.keyword_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND ct.id = mc.company_type_id AND cn.id = mc.company_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 28c.sql
Metrics for query 28c.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 108.369804, 'q_error': np.float32(3719.2244), 'inference_time': 1.9386959075927734, 'timestamp': 1745857850.1979516}
Saving results for query 28c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28c/NEO/28c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/28c/NEO/28c.sql_neo_metrics.json
INFO:__main__:Evaluated 28c.sql: Latency=108.37ms, Q-error=3719.22
Evaluating queries:  97%|█████████▋| 110/113 [53:52<02:08, 42.71s/it]Evaluating query 30c.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30c/30c.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30c/NEO for query 30c.sql
Creating a new environment for query 30c.sql
Generating plan for query 30c.sql
Evaluating plan for query 30c.sql
Executing query: SELECT /*+  leading(((cct2 ((cc (it2 ((it1 ((mi (mi_idx (mk ci))) n)) t))) cct1)) k)) */  MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(n.name) AS writer, MIN(t.title) AS complete_violent_movie  FROM  complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, cast_info AS ci, info_type AS it1, info_type AS it2, keyword AS k, movie_info AS mi, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  ='complete+verified' AND ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND k.keyword  in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') AND mi.info  in ('Horror', 'Action', 'Sci-Fi', 'Thriller', 'Crime', 'War') AND n.gender  = 'm' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mi.movie_id = mi_idx.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND mi_idx.movie_id = mk.movie_id AND mi_idx.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;
Calculating metrics for query 30c.sql
Metrics for query 30c.sql: {'predicted_latency': np.float32(0.029137745), 'actual_latency': 11.132859, 'q_error': np.float32(382.0769), 'inference_time': 1.2453770637512207, 'timestamp': 1745857862.7352314}
Saving results for query 30c.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30c/NEO/30c.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/30c/NEO/30c.sql_neo_metrics.json
INFO:__main__:Evaluated 30c.sql: Latency=11.13ms, Q-error=382.08
Evaluating queries:  98%|█████████▊| 111/113 [54:04<01:07, 33.66s/it]Evaluating query 16d.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16d/16d.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16d/NEO for query 16d.sql
Creating a new environment for query 16d.sql
Generating plan for query 16d.sql
Evaluating plan for query 16d.sql
Executing query: SELECT /*+  leading((an (t (n (cn (ci ((k mk) mc))))))) */  MIN(an.name) AS cool_actor_pseudonym, MIN(t.title) AS series_named_after_char  FROM  aka_name AS an, cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND t.episode_nr >= 5 AND t.episode_nr < 100 AND an.person_id = n.id AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND an.person_id = ci.person_id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;
Calculating metrics for query 16d.sql
Metrics for query 16d.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 8.355379999999998, 'q_error': np.float32(286.75455), 'inference_time': 0.6635096073150635, 'timestamp': 1745857871.810156}
Saving results for query 16d.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16d/NEO/16d.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/16d/NEO/16d.sql_neo_metrics.json
INFO:__main__:Evaluated 16d.sql: Latency=8.36ms, Q-error=286.75
Evaluating queries:  99%|█████████▉| 112/113 [54:13<00:26, 26.28s/it]Evaluating query 13a.sql from /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13a/13a.sql
Creating directory /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13a/NEO for query 13a.sql
Creating a new environment for query 13a.sql
Generating plan for query 13a.sql
Evaluating plan for query 13a.sql
Executing query: SELECT /*+  leading((kt (it ((cn (ct (it2 (mc (mi t))))) miidx)))) */  MIN(mi.info) AS release_date, MIN(miidx.info) AS rating, MIN(t.title) AS german_movie  FROM  company_name AS cn, company_type AS ct, info_type AS it, info_type AS it2, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS miidx, title AS t WHERE cn.country_code ='[de]' AND ct.kind ='production companies' AND it.info ='rating' AND it2.info ='release dates' AND kt.kind ='movie' AND mi.movie_id = t.id AND it2.id = mi.info_type_id AND kt.id = t.kind_id AND mc.movie_id = t.id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND miidx.movie_id = t.id AND it.id = miidx.info_type_id AND mi.movie_id = miidx.movie_id AND mi.movie_id = mc.movie_id AND miidx.movie_id = mc.movie_id;
Calculating metrics for query 13a.sql
Metrics for query 13a.sql: {'predicted_latency': np.float32(0.029137744), 'actual_latency': 37.252694000000005, 'q_error': np.float32(1278.503), 'inference_time': 0.5187845230102539, 'timestamp': 1745857910.3126853}
Saving results for query 13a.sql
Saving plan to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13a/NEO/13a.sql_neo_abstract_plan.json
Saving metrics to /data/hdd1/users/kmparmp/workloads/experiment2/job/run1/13a/NEO/13a.sql_neo_metrics.json
INFO:__main__:Evaluated 13a.sql: Latency=37.25ms, Q-error=1278.50
Evaluating queries: 100%|██████████| 113/113 [54:52<00:00, 29.95s/it]Evaluating queries: 100%|██████████| 113/113 [54:52<00:00, 29.13s/it]
INFO:__main__:
Evaluation complete.
