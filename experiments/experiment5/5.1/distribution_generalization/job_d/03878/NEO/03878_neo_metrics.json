{
    "query_name": "03878",
    "sql": "SELECT MIN(cn.name) AS producing_company,\n       MIN(lt.link) AS link_type,\n       MIN(t.title) AS complete_western_sequel\nFROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name AS cn,\n     company_type AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n     movie_info AS mi,\n     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t\nWHERE cct2.kind = 'complete'\n  AND cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n       OR cn.name LIKE '%Warner%')\n  AND ct.kind ='production companies'\n  AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id = t.id\n  AND t.id = cc.movie_id\n  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mc.movie_id = mi.movie_id\n  AND ml.movie_id = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mc.movie_id = cc.movie_id\n  AND mi.movie_id = cc.movie_id\n  AND t.production_year = 1998\nAND cct1.kind IN ('cast',\n'cast')\nAND mi.info IN ('Sweden',\n'American',\n'German',\n'Sweden:27 March 1998');",
    "hint_str": "/*+ HashJoin(ml mk cc mi ct cn mc t cct2 k cct1 lt)\n NestLoop(ml mk cc mi ct cn mc t cct2 k cct1)\n NestLoop(ml mk cc mi ct cn mc t cct2 k)\n MergeJoin(ml mk cc mi ct cn mc t cct2)\n HashJoin(ml mk cc mi ct cn mc t)\n HashJoin(ct cn mc t)\n MergeJoin(ct cn mc)\n NestLoop(cn mc)\n MergeJoin(ml mk cc mi)\n MergeJoin(mk cc mi)\n HashJoin(mk cc)\n IndexScan(ml)\n TidScan(mk)\n IndexScan(cc)\n IndexScan(mi)\n IndexScan(ct)\n SeqScan(cn)\n IndexScan(mc)\n IndexScan(t)\n SeqScan(cct2)\n IndexScan(k)\n SeqScan(cct1)\n BitmapScan(lt)\n Leading(((((((ml ((mk cc) mi)) ((ct (cn mc)) t)) cct2) k) cct1) lt)) */",
    "inference_time": 8.80388855934143,
    "planning_time": 67.914,
    "predicted_latency": -11299.125,
    "actual_latency": 2742.922
}