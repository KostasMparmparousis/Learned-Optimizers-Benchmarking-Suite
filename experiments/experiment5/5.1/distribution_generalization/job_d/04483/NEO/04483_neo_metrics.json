{
    "query_name": "04483",
    "sql": "SELECT MIN(chn.name) AS character_name,\n       MIN(mi_idx.info) AS rating,\n       MIN(n.name) AS playing_actor,\n       MIN(t.title) AS complete_hero_movie\nFROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     char_name AS chn,\n     cast_info AS ci,\n     info_type AS it2,\n     keyword AS k,\n     kind_type AS kt,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind LIKE '%complete%'\n  AND chn.name IS NOT NULL\n  AND (chn.name LIKE '%man%'\n       OR chn.name LIKE '%Man%')\n  AND it2.info = 'rating'\n  AND kt.kind = 'movie'\n  AND mi_idx.info > '7.0'\n  AND kt.id = t.kind_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n  AND t.id = cc.movie_id\n  AND t.id = mi_idx.movie_id\n  AND mk.movie_id = ci.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND ci.movie_id = cc.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND cc.movie_id = mi_idx.movie_id\n  AND chn.id = ci.person_role_id\n  AND n.id = ci.person_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id\n  AND it2.id = mi_idx.info_type_id\n  AND k.keyword IN ('second-part',\n'murder',\n'based-on-novel',\n'10,000-mile-club',\n'sequel',\n'based-on-comic',\n'tv-special',\n'violence',\n'superhero',\n'violence')\nAND t.production_year > 1994;",
    "hint_str": "/*+ HashJoin(k cct2 cct1 it2 cc n kt t mk ci chn mi_idx)\n HashJoin(cct2 cct1 it2 cc n kt t mk ci chn mi_idx)\n MergeJoin(cct1 it2 cc n kt t mk ci chn mi_idx)\n HashJoin(it2 cc n kt t mk ci chn mi_idx)\n MergeJoin(cc n kt t mk ci chn mi_idx)\n HashJoin(n kt t mk ci chn mi_idx)\n NestLoop(n kt t mk ci chn)\n MergeJoin(n kt t mk ci)\n HashJoin(kt t mk ci)\n MergeJoin(kt t mk)\n NestLoop(t mk)\n BitmapScan(k)\n SeqScan(cct2)\n IndexScan(cct1)\n SeqScan(it2)\n TidScan(cc)\n BitmapScan(n)\n BitmapScan(kt)\n SeqScan(t)\n IndexScan(mk)\n IndexScan(ci)\n IndexScan(chn)\n IndexScan(mi_idx)\n Leading((k (cct2 (cct1 (it2 (cc (((n ((kt (t mk)) ci)) chn) mi_idx))))))) */",
    "inference_time": 3.4876344203948975,
    "planning_time": 41.703,
    "predicted_latency": -11465.64453125,
    "actual_latency": 241477.074
}