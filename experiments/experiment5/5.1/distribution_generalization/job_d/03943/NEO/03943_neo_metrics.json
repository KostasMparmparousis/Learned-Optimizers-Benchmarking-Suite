{
    "query_name": "03943",
    "sql": "SELECT MIN(cn.name) AS producing_company,\n       MIN(lt.link) AS link_type,\n       MIN(t.title) AS complete_western_sequel\nFROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name AS cn,\n     company_type AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n     movie_info AS mi,\n     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t\nWHERE cct2.kind = 'complete'\n  AND cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n       OR cn.name LIKE '%Warner%')\n  AND ct.kind ='production companies'\n  AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id = t.id\n  AND t.id = cc.movie_id\n  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mc.movie_id = mi.movie_id\n  AND ml.movie_id = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mc.movie_id = cc.movie_id\n  AND mi.movie_id = cc.movie_id\n  AND t.production_year = 1997\nAND cct1.kind IN ('complete+verified',\n'cast')\nAND mi.info IN ('Sweden',\n'Norway',\n'Denish',\n'Crime');",
    "hint_str": "/*+ HashJoin(cct2 cn t cc mk ml mc k mi lt ct cct1)\n NestLoop(cct2 cn t cc mk ml mc k mi lt ct)\n NestLoop(cct2 cn t cc mk ml mc k mi lt)\n MergeJoin(cct2 cn t cc mk ml mc k mi)\n HashJoin(cn t cc mk ml mc k mi)\n HashJoin(t cc mk ml mc k mi)\n MergeJoin(cc mk ml mc k mi)\n HashJoin(cc mk ml mc k)\n HashJoin(cc mk ml mc)\n HashJoin(cc mk ml)\n NestLoop(mk ml)\n IndexScan(cct2)\n SeqScan(cn)\n SeqScan(t)\n IndexScan(cc)\n IndexScan(mk)\n IndexScan(ml)\n BitmapScan(mc)\n IndexScan(k)\n TidScan(mi)\n IndexScan(lt)\n SeqScan(ct)\n BitmapScan(cct1)\n Leading(((((cct2 (cn (t ((((cc (mk ml)) mc) k) mi)))) lt) ct) cct1)) */",
    "inference_time": 3.7654075622558594,
    "planning_time": 55.893,
    "predicted_latency": -11032.548828125,
    "actual_latency": 4736.381
}