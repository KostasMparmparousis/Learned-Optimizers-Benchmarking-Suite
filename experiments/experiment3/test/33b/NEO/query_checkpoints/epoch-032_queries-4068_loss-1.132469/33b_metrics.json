{
    "query_name": "33b",
    "sql": "SELECT MIN(cn1.name) AS first_company, MIN(cn2.name) AS second_company, MIN(mi_idx1.info) AS first_rating, MIN(mi_idx2.info) AS second_rating, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie FROM company_name AS cn1, company_name AS cn2, info_type AS it1, info_type AS it2, kind_type AS kt1, kind_type AS kt2, link_type AS lt, movie_companies AS mc1, movie_companies AS mc2, movie_info_idx AS mi_idx1, movie_info_idx AS mi_idx2, movie_link AS ml, title AS t1, title AS t2 WHERE cn1.country_code  = '[nl]' AND it1.info  = 'rating' AND it2.info  = 'rating' AND kt1.kind  in ('tv series') AND kt2.kind  in ('tv series') AND lt.link  LIKE '%follow%' AND mi_idx2.info  < '3.0' AND t2.production_year  = 2007 AND lt.id = ml.link_type_id AND t1.id = ml.movie_id AND t2.id = ml.linked_movie_id AND it1.id = mi_idx1.info_type_id AND t1.id = mi_idx1.movie_id AND kt1.id = t1.kind_id AND cn1.id = mc1.company_id AND t1.id = mc1.movie_id AND ml.movie_id = mi_idx1.movie_id AND ml.movie_id = mc1.movie_id AND mi_idx1.movie_id = mc1.movie_id AND it2.id = mi_idx2.info_type_id AND t2.id = mi_idx2.movie_id AND kt2.id = t2.kind_id AND cn2.id = mc2.company_id AND t2.id = mc2.movie_id AND ml.linked_movie_id = mi_idx2.movie_id AND ml.linked_movie_id = mc2.movie_id AND mi_idx2.movie_id = mc2.movie_id;",
    "hint_str": "/*+ HashJoin(it1 t1 kt1 mi_idx1 mc1 cn1 t2 ml mc2 cn2 kt2 lt mi_idx2 it2)\n HashJoin(it1 t1 kt1 mi_idx1 mc1 cn1 t2 ml mc2 cn2 kt2 lt mi_idx2)\n HashJoin(it1 t1 kt1 mi_idx1 mc1 cn1 t2 ml mc2 cn2 kt2 lt)\n MergeJoin(it1 t1 kt1 mi_idx1 mc1 cn1 t2 ml mc2 cn2 kt2)\n HashJoin(it1 t1 kt1 mi_idx1 mc1 cn1 t2 ml mc2 cn2)\n HashJoin(t2 ml mc2 cn2)\n HashJoin(mc2 cn2)\n MergeJoin(t2 ml)\n NestLoop(it1 t1 kt1 mi_idx1 mc1 cn1)\n MergeJoin(it1 t1 kt1 mi_idx1 mc1)\n HashJoin(t1 kt1 mi_idx1 mc1)\n HashJoin(mi_idx1 mc1)\n HashJoin(t1 kt1)\n IndexScan(it1)\n SeqScan(t1)\n BitmapScan(kt1)\n TidScan(mi_idx1)\n SeqScan(mc1)\n IndexScan(cn1)\n SeqScan(t2)\n SeqScan(ml)\n BitmapScan(mc2)\n TidScan(cn2)\n IndexScan(kt2)\n IndexScan(lt)\n BitmapScan(mi_idx2)\n BitmapScan(it2)\n Leading((((((((it1 ((t1 kt1) (mi_idx1 mc1))) cn1) ((t2 ml) (mc2 cn2))) kt2) lt) mi_idx2) it2)) */",
    "predicted_latency_ms": 12983.0810546875,
    "planning_time_ms": 111.462,
    "actual_latency_ms": 4834.37
}