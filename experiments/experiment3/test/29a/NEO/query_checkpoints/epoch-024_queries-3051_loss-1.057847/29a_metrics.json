{
    "query_name": "29a",
    "sql": "SELECT MIN(chn.name) AS voiced_char, MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_animation FROM aka_name AS an, complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, info_type AS it3, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, person_info AS pi, role_type AS rt, title AS t WHERE cct1.kind  ='cast' AND cct2.kind  ='complete+verified' AND chn.name  = 'Queen' AND ci.note  in ('(voice)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND it3.info  = 'trivia' AND k.keyword  = 'computer-animation' AND mi.info  is not null and (mi.info like 'Japan:%200%' or mi.info like 'USA:%200%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.title  = 'Shrek 2' AND t.production_year  between 2000 and 2010 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND t.id = cc.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mc.movie_id = cc.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND mi.movie_id = cc.movie_id AND ci.movie_id = mk.movie_id AND ci.movie_id = cc.movie_id AND mk.movie_id = cc.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND n.id = pi.person_id AND ci.person_id = pi.person_id AND it3.id = pi.info_type_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id;",
    "hint_str": "/*+ HashJoin(it3 cct2 it mk t n an ci cc cct1 chn rt k mc mi cn pi)\n HashJoin(cct2 it mk t n an ci cc cct1 chn rt k mc mi cn pi)\n HashJoin(cct2 it mk t n an ci cc cct1 chn rt k mc mi cn)\n HashJoin(it mk t n an ci cc cct1 chn rt k mc mi cn)\n HashJoin(mk t n an ci cc cct1 chn rt k mc mi cn)\n HashJoin(mk t n an ci cc cct1 chn rt k mc mi)\n HashJoin(mk t n an ci cc cct1 chn rt k mc)\n HashJoin(mk t n an ci cc cct1 chn rt k)\n MergeJoin(mk t n an ci cc cct1 chn rt)\n MergeJoin(t n an ci cc cct1 chn rt)\n NestLoop(t n an ci cc cct1 chn)\n HashJoin(t n an ci cc cct1)\n NestLoop(t n an ci cc)\n HashJoin(t n an ci)\n HashJoin(n an ci)\n HashJoin(n an)\n IndexScan(it3)\n IndexScan(cct2)\n SeqScan(it)\n SeqScan(mk)\n TidScan(t)\n IndexScan(n)\n SeqScan(an)\n IndexScan(ci)\n IndexScan(cc)\n TidScan(cct1)\n IndexScan(chn)\n BitmapScan(rt)\n SeqScan(k)\n BitmapScan(mc)\n IndexScan(mi)\n SeqScan(cn)\n BitmapScan(pi)\n Leading((it3 ((cct2 (it (((((mk (((((t ((n an) ci)) cc) cct1) chn) rt)) k) mc) mi) cn))) pi))) */",
    "predicted_latency_ms": 12472.0771484375,
    "planning_time_ms": 1822.273,
    "actual_latency_ms": 5845.847
}