{
    "query_name": "9b",
    "sql": "SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS voiced_character, MIN(n.name) AS voicing_actress, MIN(t.title) AS american_movie FROM aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, movie_companies AS mc, name AS n, role_type AS rt, title AS t WHERE ci.note  = '(voice)' AND cn.country_code ='[us]' AND mc.note  like '%(200%)%' and (mc.note like '%(USA)%' or mc.note like '%(worldwide)%') AND n.gender ='f' and n.name like '%Angel%' AND rt.role ='actress' AND t.production_year  between 2007 and 2010 AND ci.movie_id = t.id AND t.id = mc.movie_id AND ci.movie_id = mc.movie_id AND mc.company_id = cn.id AND ci.role_id = rt.id AND n.id = ci.person_id AND chn.id = ci.person_role_id AND an.person_id = n.id AND an.person_id = ci.person_id;",
    "hint_str": "/*+ HashJoin(an mc cn ci chn rt t n)\n HashJoin(mc cn ci chn rt t n)\n MergeJoin(mc cn ci chn rt t)\n HashJoin(mc cn ci chn rt)\n MergeJoin(mc cn ci chn)\n NestLoop(mc cn ci)\n MergeJoin(mc cn)\n BitmapScan(an)\n BitmapScan(mc)\n BitmapScan(cn)\n IndexScan(ci)\n IndexScan(chn)\n BitmapScan(rt)\n BitmapScan(t)\n BitmapScan(n)\n Leading((an ((((((mc cn) ci) chn) rt) t) n))) */",
    "predicted_latency_ms": 11364.7294921875,
    "planning_time_ms": 9.914,
    "actual_latency_ms": 9714.224
}